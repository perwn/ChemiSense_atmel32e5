
XMEGA_E5_XPLAINED_DEMO1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ca  00802000  00003c16  00003caa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002bd  008020ca  008020ca  00003d74  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003d74  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006a0  00000000  00000000  00003dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00013f52  00000000  00000000  00004470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000036bb  00000000  00000000  000183c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000da59  00000000  00000000  0001ba7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001588  00000000  00000000  000294d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000301b2  00000000  00000000  0002aa60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000070a4  00000000  00000000  0005ac12  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000708  00000000  00000000  00061cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000de30  00000000  00000000  000623c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c2       	rjmp	.+1146   	; 0x47c <__ctors_end>
       2:	00 00       	nop
       4:	58 c2       	rjmp	.+1200   	; 0x4b6 <__bad_interrupt>
       6:	00 00       	nop
       8:	56 c2       	rjmp	.+1196   	; 0x4b6 <__bad_interrupt>
       a:	00 00       	nop
       c:	54 c2       	rjmp	.+1192   	; 0x4b6 <__bad_interrupt>
       e:	00 00       	nop
      10:	52 c2       	rjmp	.+1188   	; 0x4b6 <__bad_interrupt>
      12:	00 00       	nop
      14:	50 c2       	rjmp	.+1184   	; 0x4b6 <__bad_interrupt>
      16:	00 00       	nop
      18:	4e c2       	rjmp	.+1180   	; 0x4b6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__vector_7>
      20:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__vector_8>
      24:	48 c2       	rjmp	.+1168   	; 0x4b6 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c2       	rjmp	.+1164   	; 0x4b6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	44 c2       	rjmp	.+1160   	; 0x4b6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__vector_12>
      34:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <__vector_13>
      38:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__vector_14>
      3c:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__vector_15>
      40:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__vector_16>
      44:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__vector_17>
      48:	0c 94 af 12 	jmp	0x255e	; 0x255e <__vector_18>
      4c:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__vector_19>
      50:	0c 94 05 13 	jmp	0x260a	; 0x260a <__vector_20>
      54:	0c 94 30 13 	jmp	0x2660	; 0x2660 <__vector_21>
      58:	2e c2       	rjmp	.+1116   	; 0x4b6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2c c2       	rjmp	.+1112   	; 0x4b6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2a c2       	rjmp	.+1108   	; 0x4b6 <__bad_interrupt>
      62:	00 00       	nop
      64:	28 c2       	rjmp	.+1104   	; 0x4b6 <__bad_interrupt>
      66:	00 00       	nop
      68:	26 c2       	rjmp	.+1100   	; 0x4b6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	24 c2       	rjmp	.+1096   	; 0x4b6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	22 c2       	rjmp	.+1092   	; 0x4b6 <__bad_interrupt>
      72:	00 00       	nop
      74:	20 c2       	rjmp	.+1088   	; 0x4b6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c2       	rjmp	.+1084   	; 0x4b6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1c c2       	rjmp	.+1080   	; 0x4b6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	1a c2       	rjmp	.+1076   	; 0x4b6 <__bad_interrupt>
      82:	00 00       	nop
      84:	18 c2       	rjmp	.+1072   	; 0x4b6 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <__vector_34>
      8c:	14 c2       	rjmp	.+1064   	; 0x4b6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__vector_36>
      94:	0c 94 86 13 	jmp	0x270c	; 0x270c <__vector_37>
      98:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__vector_38>
      9c:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <__vector_39>
      a0:	0a c2       	rjmp	.+1044   	; 0x4b6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	08 c2       	rjmp	.+1040   	; 0x4b6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	06 c2       	rjmp	.+1036   	; 0x4b6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	14 10       	cpse	r1, r4
      ae:	32 10       	cpse	r3, r2
      b0:	2d 10       	cpse	r2, r13
      b2:	28 10       	cpse	r2, r8
      b4:	23 10       	cpse	r2, r3
      b6:	1e 10       	cpse	r1, r14
      b8:	19 10       	cpse	r1, r9

000000ba <__trampolines_end>:
	...
      c6:	00 00       	nop
      c8:	00 80       	ld	r0, Z
      ca:	c0 e0       	ldi	r28, 0x00	; 0
      cc:	f0 f8       	bld	r15, 0
      ce:	fc 7e       	andi	r31, 0xEC	; 236
      d0:	fe fe       	.word	0xfefe	; ????
      d2:	fe 00       	.word	0x00fe	; ????
      d4:	00 00       	nop
      d6:	00 fe       	sbrs	r0, 0
      d8:	fe fe       	.word	0xfefe	; ????
      da:	fe 80       	ldd	r15, Y+6	; 0x06
	...
     110:	00 00       	nop
     112:	00 fe       	sbrs	r0, 0
     114:	fe fe       	.word	0xfefe	; ????
     116:	fe fe       	.word	0xfefe	; ????
     118:	00 0c       	add	r0, r0
     11a:	1e 1e       	adc	r1, r30
     11c:	1e 0c       	add	r1, r14
	...
     126:	80 c0       	rjmp	.+256    	; 0x228 <sysfont_glyphs+0x3e>
     128:	e0 f0       	brcs	.+56     	; 0x162 <__trampolines_end+0xa8>
     12a:	f8 fc       	.word	0xfcf8	; ????
     12c:	ff ff       	.word	0xffff	; ????
     12e:	df c7       	rjmp	.+4030   	; 0x10ee <gfx_mono_generic_draw_filled_circle+0x60>
     130:	c3 01       	movw	r24, r6
     132:	00 ff       	sbrs	r16, 0
     134:	ff ff       	.word	0xffff	; ????
     136:	ff 00       	.word	0x00ff	; ????
     138:	00 0f       	add	r16, r16
     13a:	0f ff       	.word	0xff0f	; ????
     13c:	ff ff       	.word	0xffff	; ????
     13e:	ff 0f       	add	r31, r31
     140:	0f 0f       	add	r16, r31
     142:	0f 0f       	add	r16, r31
     144:	0f 00       	.word	0x000f	; ????
     146:	00 f0       	brcs	.+0      	; 0x148 <__trampolines_end+0x8e>
     148:	f8 fe       	.word	0xfef8	; ????
     14a:	fe 3f       	cpi	r31, 0xFE	; 254
     14c:	1f 0f       	add	r17, r31
     14e:	0f 0f       	add	r16, r31
     150:	0f 1f       	adc	r16, r31
     152:	fe fe       	.word	0xfefe	; ????
     154:	fe fe       	.word	0xfefe	; ????
     156:	ff 1f       	adc	r31, r31
     158:	0f 0f       	add	r16, r31
     15a:	0f 0f       	add	r16, r31
     15c:	1f ff       	.word	0xff1f	; ????
     15e:	fe fe       	.word	0xfefe	; ????
     160:	f8 e0       	ldi	r31, 0x08	; 8
     162:	00 c0       	rjmp	.+0      	; 0x164 <__trampolines_end+0xaa>
     164:	f0 fc       	sbrc	r15, 0
     166:	fe fe       	.word	0xfefe	; ????
     168:	ff cf       	rjmp	.-2      	; 0x168 <__trampolines_end+0xae>
     16a:	cf cf       	rjmp	.-98     	; 0x10a <__trampolines_end+0x50>
     16c:	cf cf       	rjmp	.-98     	; 0x10c <__trampolines_end+0x52>
     16e:	cf cf       	rjmp	.-98     	; 0x10e <__trampolines_end+0x54>
     170:	df ff       	.word	0xffdf	; ????
     172:	fe fc       	.word	0xfcfe	; ????
     174:	f8 c0       	rjmp	.+496    	; 0x366 <sysfont_glyphs+0x17c>
     176:	00 ff       	sbrs	r16, 0
     178:	ff ff       	.word	0xffff	; ????
     17a:	ff ff       	.word	0xffff	; ????
     17c:	00 00       	nop
     17e:	00 00       	nop
     180:	00 00       	nop
     182:	00 80       	ld	r0, Z
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	f0 f8       	bld	r15, 0
     188:	fc 7f       	andi	r31, 0xFC	; 252
     18a:	3f 0f       	add	r19, r31
     18c:	07 03       	mulsu	r16, r23
     18e:	03 03       	mulsu	r16, r19
     190:	03 03       	mulsu	r16, r19
     192:	03 03       	mulsu	r16, r19
     194:	03 00       	.word	0x0003	; ????
     196:	00 ff       	sbrs	r16, 0
     198:	ff ff       	.word	0xffff	; ????
     19a:	ff 00       	.word	0x00ff	; ????
     19c:	00 00       	nop
     19e:	00 0f       	add	r16, r16
     1a0:	3f ff       	.word	0xff3f	; ????
     1a2:	ff fc       	.word	0xfcff	; ????
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	e0 e0       	ldi	r30, 0x00	; 0
     1a8:	e0 00       	.word	0x00e0	; ????
     1aa:	00 ff       	sbrs	r16, 0
     1ac:	ff ff       	.word	0xffff	; ????
     1ae:	ff 00       	.word	0x00ff	; ????
     1b0:	00 00       	nop
     1b2:	00 00       	nop
     1b4:	00 00       	nop
     1b6:	ff ff       	.word	0xffff	; ????
     1b8:	ff ff       	.word	0xffff	; ????
     1ba:	ff 00       	.word	0x00ff	; ????
     1bc:	00 00       	nop
     1be:	00 00       	nop
     1c0:	00 ff       	sbrs	r16, 0
     1c2:	ff ff       	.word	0xffff	; ????
     1c4:	ff ff       	.word	0xffff	; ????
     1c6:	00 07       	cpc	r16, r16
     1c8:	3f 7f       	andi	r19, 0xFF	; 255
     1ca:	ff ff       	.word	0xffff	; ????
     1cc:	fb e3       	ldi	r31, 0x3B	; 59
     1ce:	c3 c3       	rjmp	.+1926   	; 0x956 <app_sampling_task+0xa>
     1d0:	c3 c3       	rjmp	.+1926   	; 0x958 <app_sampling_task+0xc>
     1d2:	c3 e3       	ldi	r28, 0x33	; 51
     1d4:	e3 e3       	ldi	r30, 0x33	; 51
     1d6:	e3 e3       	ldi	r30, 0x33	; 51
     1d8:	23 03       	mulsu	r18, r19
     1da:	00 0f       	add	r16, r16
     1dc:	3f 7f       	andi	r19, 0xFF	; 255
     1de:	ff ff       	.word	0xffff	; ????
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	e0 e0       	ldi	r30, 0x00	; 0
     1e4:	e0 00       	.word	0x00e0	; ????
     1e6:	00 00       	nop
	...

000001ea <sysfont_glyphs>:
     1ea:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     1fa:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     20a:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     21a:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     22a:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     23a:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     24a:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     25a:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     26a:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     27a:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     28a:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     29a:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     2aa:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     2ba:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     2ca:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     2da:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     2ea:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     2fa:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     30a:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     31a:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     32a:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     33a:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     34a:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     35a:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     36a:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     37a:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     38a:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     39a:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     3aa:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     3ba:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     3ca:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     3da:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     3ea:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     3fa:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     40a:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     41a:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     42a:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     43a:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     44a:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     45a:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     46a:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     47a:	20 40                                                @

0000047c <__ctors_end>:
     47c:	11 24       	eor	r1, r1
     47e:	1f be       	out	0x3f, r1	; 63
     480:	cf ef       	ldi	r28, 0xFF	; 255
     482:	cd bf       	out	0x3d, r28	; 61
     484:	df e2       	ldi	r29, 0x2F	; 47
     486:	de bf       	out	0x3e, r29	; 62

00000488 <__do_copy_data>:
     488:	10 e2       	ldi	r17, 0x20	; 32
     48a:	a0 e0       	ldi	r26, 0x00	; 0
     48c:	b0 e2       	ldi	r27, 0x20	; 32
     48e:	e6 e1       	ldi	r30, 0x16	; 22
     490:	fc e3       	ldi	r31, 0x3C	; 60
     492:	02 c0       	rjmp	.+4      	; 0x498 <__do_copy_data+0x10>
     494:	05 90       	lpm	r0, Z+
     496:	0d 92       	st	X+, r0
     498:	aa 3c       	cpi	r26, 0xCA	; 202
     49a:	b1 07       	cpc	r27, r17
     49c:	d9 f7       	brne	.-10     	; 0x494 <__do_copy_data+0xc>

0000049e <__do_clear_bss>:
     49e:	23 e2       	ldi	r18, 0x23	; 35
     4a0:	aa ec       	ldi	r26, 0xCA	; 202
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <.do_clear_bss_start>

000004a6 <.do_clear_bss_loop>:
     4a6:	1d 92       	st	X+, r1

000004a8 <.do_clear_bss_start>:
     4a8:	a7 38       	cpi	r26, 0x87	; 135
     4aa:	b2 07       	cpc	r27, r18
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <.do_clear_bss_loop>
     4ae:	0e 94 08 18 	call	0x3010	; 0x3010 <main>
     4b2:	0c 94 09 1e 	jmp	0x3c12	; 0x3c12 <_exit>

000004b6 <__bad_interrupt>:
     4b6:	a4 cd       	rjmp	.-1208   	; 0x0 <__vectors>

000004b8 <app_cpu_load_init>:
static uint32_t app_cpu_load_time_active;
/* ! Total time in sleep mode */
static uint32_t app_cpu_load_time_sleep;

void app_cpu_load_init(void)
{
     4b8:	0f 93       	push	r16
	/* Reset counters */
	app_cpu_load_time_active = 0;
     4ba:	10 92 cf 20 	sts	0x20CF, r1
     4be:	10 92 d0 20 	sts	0x20D0, r1
     4c2:	10 92 d1 20 	sts	0x20D1, r1
     4c6:	10 92 d2 20 	sts	0x20D2, r1
	app_cpu_load_time_sleep = 0;
     4ca:	10 92 cb 20 	sts	0x20CB, r1
     4ce:	10 92 cc 20 	sts	0x20CC, r1
     4d2:	10 92 cd 20 	sts	0x20CD, r1
     4d6:	10 92 ce 20 	sts	0x20CE, r1
	/* Start Timer counter used to monitor CPU timing */
	tc45_enable(&TCC4);
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	98 e0       	ldi	r25, 0x08	; 8
     4de:	0e 94 07 14 	call	0x280e	; 0x280e <tc45_enable>
static inline void tc45_write_clock_source(volatile void *tc,
		TC45_CLKSEL_t TC45_CLKSEL_enum)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
     4e2:	e0 e0       	ldi	r30, 0x00	; 0
     4e4:	f8 e0       	ldi	r31, 0x08	; 8
     4e6:	80 81       	ld	r24, Z
     4e8:	80 7f       	andi	r24, 0xF0	; 240
     4ea:	86 60       	ori	r24, 0x06	; 6
     4ec:	80 83       	st	Z, r24
 */
static inline void tc45_set_direction(volatile void *tc, enum tc45_dir_t dir)
{
	if (dir == TC45_UP) {
		if (tc45_is_TC4(void *tc)) {
			((TC4_t *)tc)->CTRLGCLR = TC4_DIR_bm;
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	80 87       	std	Z+8, r24	; 0x08
	tc45_write_clock_source(&TCC4, TC45_CLKSEL_DIV256_gc); /* 24MHz / 256 */
	tc45_set_direction(&TCC4, TC45_UP);
	/* Display static background */
	gfx_mono_draw_string(DISPLAY_CPU_LOAD_TEXT,
     4f2:	2e e0       	ldi	r18, 0x0E	; 14
     4f4:	30 e2       	ldi	r19, 0x20	; 32
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	8b e1       	ldi	r24, 0x1B	; 27
     4fc:	90 e2       	ldi	r25, 0x20	; 32
     4fe:	20 d7       	rcall	.+3648   	; 0x1340 <gfx_mono_draw_string>
			DISPLAY_CPU_LOAD_TEXT_POS_X,
			DISPLAY_CPU_LOAD_TEXT_POS_Y,
			&sysfont);
	gfx_mono_draw_filled_rect(
     500:	01 e0       	ldi	r16, 0x01	; 1
     502:	26 e0       	ldi	r18, 0x06	; 6
     504:	41 e0       	ldi	r20, 0x01	; 1
     506:	69 e0       	ldi	r22, 0x09	; 9
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	a6 d5       	rcall	.+2892   	; 0x1058 <gfx_mono_generic_draw_filled_rect>
			DISPLAY_CPU_LOAD_PROBAR_START_POS_X,
			DISPLAY_CPU_LOAD_PROBAR_START_POS_Y,
			DISPLAY_CPU_LOAD_PROBAR_START_SIZE_X,
			DISPLAY_CPU_LOAD_PROBAR_START_SIZE_Y,
			GFX_PIXEL_SET);
	gfx_mono_draw_filled_rect(
     50c:	26 e0       	ldi	r18, 0x06	; 6
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	69 e0       	ldi	r22, 0x09	; 9
     512:	81 e3       	ldi	r24, 0x31	; 49
     514:	a1 d5       	rcall	.+2882   	; 0x1058 <gfx_mono_generic_draw_filled_rect>
			DISPLAY_CPU_LOAD_PROBAR_STOP_POS_X,
			DISPLAY_CPU_LOAD_PROBAR_STOP_POS_Y,
			DISPLAY_CPU_LOAD_PROBAR_STOP_SIZE_X,
			DISPLAY_CPU_LOAD_PROBAR_STOP_SIZE_Y,
			GFX_PIXEL_SET);
}
     516:	0f 91       	pop	r16
     518:	08 95       	ret

0000051a <app_cpu_load_enter_sleep>:

void app_cpu_load_enter_sleep(void)
{
	/* Disable all interrupts to avoid interrupt
	 * before enter the CPU in sleep mode */
	cpu_irq_disable();
     51a:	f8 94       	cli
	app_cpu_load_sleep = true;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	80 93 d3 20 	sts	0x20D3, r24
 * \return The counter (CNT) value of a tc.
 */
static inline uint16_t tc45_read_count(volatile void *tc)
{
	if (tc45_is_TC4(void *tc)) {
		return (((TC4_t *)tc)->CNT);
     522:	e0 e0       	ldi	r30, 0x00	; 0
     524:	f8 e0       	ldi	r31, 0x08	; 8
     526:	20 a1       	ldd	r18, Z+32	; 0x20
     528:	31 a1       	ldd	r19, Z+33	; 0x21
	app_cpu_load_time_active += tc45_read_count(&TCC4);
     52a:	80 91 cf 20 	lds	r24, 0x20CF
     52e:	90 91 d0 20 	lds	r25, 0x20D0
     532:	a0 91 d1 20 	lds	r26, 0x20D1
     536:	b0 91 d2 20 	lds	r27, 0x20D2
     53a:	82 0f       	add	r24, r18
     53c:	93 1f       	adc	r25, r19
     53e:	a1 1d       	adc	r26, r1
     540:	b1 1d       	adc	r27, r1
     542:	80 93 cf 20 	sts	0x20CF, r24
     546:	90 93 d0 20 	sts	0x20D0, r25
     54a:	a0 93 d1 20 	sts	0x20D1, r26
     54e:	b0 93 d2 20 	sts	0x20D2, r27
 * \param cnt_value Counter value
 */
static inline void tc45_write_count(volatile void *tc, uint16_t cnt_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CNT = cnt_value;
     552:	10 a2       	std	Z+32, r1	; 0x20
     554:	11 a2       	std	Z+33, r1	; 0x21
     556:	08 95       	ret

00000558 <app_cpu_load_exit_sleep>:
	tc45_write_count(&TCC4, 0);
}

void app_cpu_load_exit_sleep(void)
{
	if (app_cpu_load_sleep) {
     558:	80 91 d3 20 	lds	r24, 0x20D3
     55c:	88 23       	and	r24, r24
     55e:	e1 f0       	breq	.+56     	; 0x598 <app_cpu_load_exit_sleep+0x40>
		/* It is a sleep mode exit */
		app_cpu_load_sleep = false;
     560:	10 92 d3 20 	sts	0x20D3, r1
 * \return The counter (CNT) value of a tc.
 */
static inline uint16_t tc45_read_count(volatile void *tc)
{
	if (tc45_is_TC4(void *tc)) {
		return (((TC4_t *)tc)->CNT);
     564:	e0 e0       	ldi	r30, 0x00	; 0
     566:	f8 e0       	ldi	r31, 0x08	; 8
     568:	20 a1       	ldd	r18, Z+32	; 0x20
     56a:	31 a1       	ldd	r19, Z+33	; 0x21
		app_cpu_load_time_sleep += tc45_read_count(&TCC4);
     56c:	80 91 cb 20 	lds	r24, 0x20CB
     570:	90 91 cc 20 	lds	r25, 0x20CC
     574:	a0 91 cd 20 	lds	r26, 0x20CD
     578:	b0 91 ce 20 	lds	r27, 0x20CE
     57c:	82 0f       	add	r24, r18
     57e:	93 1f       	adc	r25, r19
     580:	a1 1d       	adc	r26, r1
     582:	b1 1d       	adc	r27, r1
     584:	80 93 cb 20 	sts	0x20CB, r24
     588:	90 93 cc 20 	sts	0x20CC, r25
     58c:	a0 93 cd 20 	sts	0x20CD, r26
     590:	b0 93 ce 20 	sts	0x20CE, r27
 * \param cnt_value Counter value
 */
static inline void tc45_write_count(volatile void *tc, uint16_t cnt_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CNT = cnt_value;
     594:	10 a2       	std	Z+32, r1	; 0x20
     596:	11 a2       	std	Z+33, r1	; 0x21
     598:	08 95       	ret

0000059a <app_cpu_load_task>:
		tc45_write_count(&TCC4, 0);
	}
}

void app_cpu_load_task(void)
{
     59a:	cf 92       	push	r12
     59c:	df 92       	push	r13
     59e:	ef 92       	push	r14
     5a0:	ff 92       	push	r15
     5a2:	0f 93       	push	r16
     5a4:	cf 93       	push	r28
	static uint8_t bar_pos_last = 0;
	uint8_t bar_pos;

	/* Wait a total time > 250ms to update display each 250ms */
	if ((app_cpu_load_time_active + app_cpu_load_time_sleep)
     5a6:	80 91 cf 20 	lds	r24, 0x20CF
     5aa:	90 91 d0 20 	lds	r25, 0x20D0
     5ae:	a0 91 d1 20 	lds	r26, 0x20D1
     5b2:	b0 91 d2 20 	lds	r27, 0x20D2
     5b6:	40 91 cb 20 	lds	r20, 0x20CB
     5ba:	50 91 cc 20 	lds	r21, 0x20CC
     5be:	60 91 cd 20 	lds	r22, 0x20CD
     5c2:	70 91 ce 20 	lds	r23, 0x20CE
     5c6:	9a 01       	movw	r18, r20
     5c8:	ab 01       	movw	r20, r22
     5ca:	28 0f       	add	r18, r24
     5cc:	39 1f       	adc	r19, r25
     5ce:	4a 1f       	adc	r20, r26
     5d0:	5b 1f       	adc	r21, r27
     5d2:	22 31       	cpi	r18, 0x12	; 18
     5d4:	6a e7       	ldi	r22, 0x7A	; 122
     5d6:	36 07       	cpc	r19, r22
     5d8:	41 05       	cpc	r20, r1
     5da:	51 05       	cpc	r21, r1
     5dc:	08 f4       	brcc	.+2      	; 0x5e0 <app_cpu_load_task+0x46>
     5de:	51 c0       	rjmp	.+162    	; 0x682 <app_cpu_load_task+0xe8>
 * \return  overflow has occured or not : OVFIF
 */
static inline bool tc45_is_overflow(volatile void *tc)
{
	if (tc45_is_TC4(void *tc)) {
		return (((TC4_t *)tc)->INTFLAGS & TC4_OVFIF_bm);
     5e0:	e0 e0       	ldi	r30, 0x00	; 0
     5e2:	f8 e0       	ldi	r31, 0x08	; 8
     5e4:	64 85       	ldd	r22, Z+12	; 0x0c
			< ((32000lu / 256lu) * 250)) {
		return;
	}

	/* Compute CPU load */
	if (tc45_is_overflow(&TCC4)) {
     5e6:	60 ff       	sbrs	r22, 0
     5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <app_cpu_load_task+0x5a>
 * \note  OVFIF is cleared
 */
static inline void tc45_clear_overflow(volatile void *tc)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->INTFLAGS |= TC4_OVFIF_bm;
     5ea:	84 85       	ldd	r24, Z+12	; 0x0c
     5ec:	81 60       	ori	r24, 0x01	; 1
     5ee:	84 87       	std	Z+12, r24	; 0x0c
		tc45_clear_overflow(&TCC4);
		bar_pos = DISPLAY_CPU_LOAD_PROBAR_MAX_SIZE_X;
     5f0:	c0 e3       	ldi	r28, 0x30	; 48
     5f2:	1f c0       	rjmp	.+62     	; 0x632 <app_cpu_load_task+0x98>
	} else {
		bar_pos = (app_cpu_load_time_active *
     5f4:	6c 01       	movw	r12, r24
     5f6:	7d 01       	movw	r14, r26
     5f8:	cc 0c       	add	r12, r12
     5fa:	dd 1c       	adc	r13, r13
     5fc:	ee 1c       	adc	r14, r14
     5fe:	ff 1c       	adc	r15, r15
     600:	8c 0d       	add	r24, r12
     602:	9d 1d       	adc	r25, r13
     604:	ae 1d       	adc	r26, r14
     606:	bf 1d       	adc	r27, r15
     608:	88 0f       	add	r24, r24
     60a:	99 1f       	adc	r25, r25
     60c:	aa 1f       	adc	r26, r26
     60e:	bb 1f       	adc	r27, r27
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	aa 1f       	adc	r26, r26
     616:	bb 1f       	adc	r27, r27
     618:	bc 01       	movw	r22, r24
     61a:	cd 01       	movw	r24, r26
     61c:	66 0f       	add	r22, r22
     61e:	77 1f       	adc	r23, r23
     620:	88 1f       	adc	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	66 0f       	add	r22, r22
     626:	77 1f       	adc	r23, r23
     628:	88 1f       	adc	r24, r24
     62a:	99 1f       	adc	r25, r25
				DISPLAY_CPU_LOAD_PROBAR_MAX_SIZE_X)
				/ (app_cpu_load_time_active +
     62c:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__udivmodsi4>
	/* Compute CPU load */
	if (tc45_is_overflow(&TCC4)) {
		tc45_clear_overflow(&TCC4);
		bar_pos = DISPLAY_CPU_LOAD_PROBAR_MAX_SIZE_X;
	} else {
		bar_pos = (app_cpu_load_time_active *
     630:	c2 2f       	mov	r28, r18
				/ (app_cpu_load_time_active +
				app_cpu_load_time_sleep);
	}

	/* Update progress bar */
	if (bar_pos_last < bar_pos) {
     632:	80 91 ca 20 	lds	r24, 0x20CA
     636:	8c 17       	cp	r24, r28
     638:	40 f4       	brcc	.+16     	; 0x64a <app_cpu_load_task+0xb0>
		gfx_mono_draw_filled_rect(
     63a:	4c 2f       	mov	r20, r28
     63c:	48 1b       	sub	r20, r24
     63e:	01 e0       	ldi	r16, 0x01	; 1
     640:	24 e0       	ldi	r18, 0x04	; 4
     642:	6b e0       	ldi	r22, 0x0B	; 11
     644:	8f 5f       	subi	r24, 0xFF	; 255
     646:	08 d5       	rcall	.+2576   	; 0x1058 <gfx_mono_generic_draw_filled_rect>
     648:	0a c0       	rjmp	.+20     	; 0x65e <app_cpu_load_task+0xc4>
				DISPLAY_CPU_LOAD_PROBAR_POS_X + bar_pos_last,
				DISPLAY_CPU_LOAD_PROBAR_POS_Y,
				bar_pos - bar_pos_last,
				DISPLAY_CPU_LOAD_PROBAR_SIZE_Y,
				GFX_PIXEL_SET);
	} else if (bar_pos_last > bar_pos) {
     64a:	c8 17       	cp	r28, r24
     64c:	40 f4       	brcc	.+16     	; 0x65e <app_cpu_load_task+0xc4>
		gfx_mono_draw_filled_rect(
     64e:	48 2f       	mov	r20, r24
     650:	4c 1b       	sub	r20, r28
     652:	00 e0       	ldi	r16, 0x00	; 0
     654:	24 e0       	ldi	r18, 0x04	; 4
     656:	6b e0       	ldi	r22, 0x0B	; 11
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	8c 0f       	add	r24, r28
     65c:	fd d4       	rcall	.+2554   	; 0x1058 <gfx_mono_generic_draw_filled_rect>
				bar_pos_last - bar_pos,
				DISPLAY_CPU_LOAD_PROBAR_SIZE_Y,
				GFX_PIXEL_CLR);
	}

	bar_pos_last = bar_pos;
     65e:	c0 93 ca 20 	sts	0x20CA, r28

	/* Reset counters */
	app_cpu_load_time_active = 0;
     662:	10 92 cf 20 	sts	0x20CF, r1
     666:	10 92 d0 20 	sts	0x20D0, r1
     66a:	10 92 d1 20 	sts	0x20D1, r1
     66e:	10 92 d2 20 	sts	0x20D2, r1
	app_cpu_load_time_sleep = 0;
     672:	10 92 cb 20 	sts	0x20CB, r1
     676:	10 92 cc 20 	sts	0x20CC, r1
     67a:	10 92 cd 20 	sts	0x20CD, r1
     67e:	10 92 ce 20 	sts	0x20CE, r1
}
     682:	cf 91       	pop	r28
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	08 95       	ret

00000690 <app_sampling_display_rate>:

/**
 * \brief Displays the current sampling rate on OLED display
 */
static void app_sampling_display_rate(void)
{
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	64 97       	sbiw	r28, 0x14	; 20
     69e:	cd bf       	out	0x3d, r28	; 61
     6a0:	de bf       	out	0x3e, r29	; 62
	char string[20];
	sprintf(string, DISPLAY_SAMPLING_TEXT,
			app_sampling_rate / 4,
			(app_sampling_rate % 4) ? 5 : 0);
     6a2:	80 91 0d 20 	lds	r24, 0x200D
     6a6:	98 2f       	mov	r25, r24
     6a8:	93 70       	andi	r25, 0x03	; 3
 * \brief Displays the current sampling rate on OLED display
 */
static void app_sampling_display_rate(void)
{
	char string[20];
	sprintf(string, DISPLAY_SAMPLING_TEXT,
     6aa:	19 f0       	breq	.+6      	; 0x6b2 <app_sampling_display_rate+0x22>
     6ac:	95 e0       	ldi	r25, 0x05	; 5
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <app_sampling_display_rate+0x26>
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	2f 93       	push	r18
     6b8:	9f 93       	push	r25
     6ba:	86 95       	lsr	r24
     6bc:	86 95       	lsr	r24
     6be:	1f 92       	push	r1
     6c0:	8f 93       	push	r24
     6c2:	84 e2       	ldi	r24, 0x24	; 36
     6c4:	90 e2       	ldi	r25, 0x20	; 32
     6c6:	9f 93       	push	r25
     6c8:	8f 93       	push	r24
     6ca:	8e 01       	movw	r16, r28
     6cc:	0f 5f       	subi	r16, 0xFF	; 255
     6ce:	1f 4f       	sbci	r17, 0xFF	; 255
     6d0:	1f 93       	push	r17
     6d2:	0f 93       	push	r16
     6d4:	0e 94 08 1a 	call	0x3410	; 0x3410 <sprintf>
			app_sampling_rate / 4,
			(app_sampling_rate % 4) ? 5 : 0);
	gfx_mono_draw_string(string,
     6d8:	2e e0       	ldi	r18, 0x0E	; 14
     6da:	30 e2       	ldi	r19, 0x20	; 32
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	63 e4       	ldi	r22, 0x43	; 67
     6e0:	c8 01       	movw	r24, r16
     6e2:	2e d6       	rcall	.+3164   	; 0x1340 <gfx_mono_draw_string>
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	de bf       	out	0x3e, r29	; 62
			DISPLAY_SAMPLING_TEXT_POS_X,
			DISPLAY_SAMPLING_TEXT_POS_Y,
			&sysfont);
}
     6e8:	64 96       	adiw	r28, 0x14	; 20
     6ea:	cd bf       	out	0x3d, r28	; 61
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	08 95       	ret

000006f8 <app_sampling_start_next_conversion>:
		/* Configure for differential measurement through PAD GND or
		 * internal GND.
		 * DIFFWGAINH (INPUTMODE) is not used because it support
		 * only PAD GND.
		 */
		ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAINL_gc |
     6f8:	8e e1       	ldi	r24, 0x1E	; 30
     6fa:	80 93 1f 21 	sts	0x211F, r24
				adcch_get_gain_setting(gain);
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
     6fe:	8f e4       	ldi	r24, 0x4F	; 79
     700:	80 93 20 21 	sts	0x2120, r24
static void app_sampling_start_next_conversion(void)
{
	/* Setup ADC to start next one */
	adcch_set_input(&adcch_conf, adc_conv[adc_mux_index],
			ADCCH_NEG_INTERNAL_GND, 0);
	adcch_write_configuration(&LIGHT_SENSOR_ADC_MODULE, ADC_CH0,
     704:	4f e1       	ldi	r20, 0x1F	; 31
     706:	51 e2       	ldi	r21, 0x21	; 33
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	92 e0       	ldi	r25, 0x02	; 2
     70e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <adcch_write_configuration>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     712:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     714:	f8 94       	cli
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
#else
	adc->CTRLA |= ch_mask << ADC_START_bp;
     716:	e0 e0       	ldi	r30, 0x00	; 0
     718:	f2 e0       	ldi	r31, 0x02	; 2
     71a:	90 81       	ld	r25, Z
     71c:	94 60       	ori	r25, 0x04	; 4
     71e:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     720:	8f bf       	out	0x3f, r24	; 63
     722:	08 95       	ret

00000724 <app_sampling_start>:
 * \param time   Current RTC time
 */
static void app_sampling_start(uint32_t time)
{
	UNUSED(time);
	app_sampling_rtc_run = false;
     724:	10 92 2a 21 	sts	0x212A, r1
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     728:	80 e2       	ldi	r24, 0x20	; 32
     72a:	e0 e6       	ldi	r30, 0x60	; 96
     72c:	f6 e0       	ldi	r31, 0x06	; 6
     72e:	86 83       	std	Z+6, r24	; 0x06
	LED_On(LED1_GPIO);
	app_sampling_start_next_conversion();
     730:	e3 cf       	rjmp	.-58     	; 0x6f8 <app_sampling_start_next_conversion>
     732:	08 95       	ret

00000734 <app_sampling_handler>:
 * \param channel ADC channel number.
 * \param result Conversion result from ADC channel.
 */
static void app_sampling_handler(ADC_t *adc, uint8_t channel,
		adc_result_t result)
{
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
	/* Store ADC convertion result for the coresponding on-board sensor */
	switch (adc_conv[adc_mux_index]) {
     73c:	20 91 29 21 	lds	r18, 0x2129
	case LIGHT_SENSOR_ADC_INPUT:
		light = 2048 - result;
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	98 e0       	ldi	r25, 0x08	; 8
     744:	84 1b       	sub	r24, r20
     746:	95 0b       	sbc	r25, r21
     748:	80 93 1d 21 	sts	0x211D, r24
     74c:	90 93 1e 21 	sts	0x211E, r25
	default:
		break;
	}

	/* Parse table of ADC conversions */
	if (++adc_mux_index < sizeof(adc_conv)) {
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	82 0f       	add	r24, r18
     754:	80 93 29 21 	sts	0x2129, r24
     758:	81 11       	cpse	r24, r1
     75a:	02 c0       	rjmp	.+4      	; 0x760 <app_sampling_handler+0x2c>
		app_sampling_start_next_conversion();
     75c:	cd df       	rcall	.-102    	; 0x6f8 <app_sampling_start_next_conversion>
		return;
     75e:	5d c0       	rjmp	.+186    	; 0x81a <app_sampling_handler+0xe6>
	}

	/* End of all conversions */
	adc_mux_index = 0;
     760:	10 92 29 21 	sts	0x2129, r1
 *
 *  \return The number of used elements.
 */
static inline uint8_t fifo_get_used_size(fifo_desc_t *fifo_desc)
{
	return ((fifo_desc->write_index - fifo_desc->read_index) & fifo_desc->mask);
     764:	90 91 da 20 	lds	r25, 0x20DA
     768:	80 91 d9 20 	lds	r24, 0x20D9
     76c:	98 1b       	sub	r25, r24
     76e:	80 91 dc 20 	lds	r24, 0x20DC
     772:	98 23       	and	r25, r24
 *
 *  \return The number of free elements.
 */
static inline uint8_t fifo_get_free_size(fifo_desc_t *fifo_desc)
{
	return fifo_desc->size - fifo_get_used_size(fifo_desc);
     774:	80 91 db 20 	lds	r24, 0x20DB
     778:	89 1b       	sub	r24, r25

	/* Save values in FIFO */
	if (2 > fifo_get_free_size(&app_sampling_fifo_desc)) {
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	08 f4       	brcc	.+2      	; 0x780 <app_sampling_handler+0x4c>
     77e:	4d c0       	rjmp	.+154    	; 0x81a <app_sampling_handler+0xe6>
		return; /* Error */
	}

	fifo_push_uint16_nocheck(&app_sampling_fifo_desc, rtc_get_time());
     780:	0e 94 a6 10 	call	0x214c	; 0x214c <rtc_get_time>
 */
static inline void fifo_push_uint16_nocheck(fifo_desc_t *fifo_desc, uint32_t item)
{
	uint8_t write_index;

	write_index = fifo_desc->write_index;
     784:	40 91 da 20 	lds	r20, 0x20DA
	fifo_desc->buffer.u16ptr[write_index & (fifo_desc->mask >> 1)] = item;
     788:	ec ed       	ldi	r30, 0xDC	; 220
     78a:	f0 e2       	ldi	r31, 0x20	; 32
     78c:	a0 81       	ld	r26, Z
     78e:	a6 95       	lsr	r26
     790:	a4 23       	and	r26, r20
     792:	b0 e0       	ldi	r27, 0x00	; 0
     794:	aa 0f       	add	r26, r26
     796:	bb 1f       	adc	r27, r27
     798:	20 91 d7 20 	lds	r18, 0x20D7
     79c:	30 91 d8 20 	lds	r19, 0x20D8
     7a0:	a2 0f       	add	r26, r18
     7a2:	b3 1f       	adc	r27, r19
     7a4:	6d 93       	st	X+, r22
     7a6:	7c 93       	st	X, r23
	write_index = (write_index + 1) & fifo_desc->mask;
     7a8:	4f 5f       	subi	r20, 0xFF	; 255
     7aa:	80 81       	ld	r24, Z
     7ac:	48 23       	and	r20, r24

	// Must be the last thing to do.
	barrier();
	fifo_desc->write_index = write_index;
     7ae:	ea ed       	ldi	r30, 0xDA	; 218
     7b0:	f0 e2       	ldi	r31, 0x20	; 32
     7b2:	40 83       	st	Z, r20
 */
static inline void fifo_push_uint16_nocheck(fifo_desc_t *fifo_desc, uint32_t item)
{
	uint8_t write_index;

	write_index = fifo_desc->write_index;
     7b4:	20 81       	ld	r18, Z
	fifo_desc->buffer.u16ptr[write_index & (fifo_desc->mask >> 1)] = item;
     7b6:	ec ed       	ldi	r30, 0xDC	; 220
     7b8:	f0 e2       	ldi	r31, 0x20	; 32
     7ba:	a0 81       	ld	r26, Z
     7bc:	a6 95       	lsr	r26
     7be:	a2 23       	and	r26, r18
     7c0:	b0 e0       	ldi	r27, 0x00	; 0
     7c2:	aa 0f       	add	r26, r26
     7c4:	bb 1f       	adc	r27, r27
     7c6:	80 91 d7 20 	lds	r24, 0x20D7
     7ca:	90 91 d8 20 	lds	r25, 0x20D8
     7ce:	a8 0f       	add	r26, r24
     7d0:	b9 1f       	adc	r27, r25
     7d2:	80 91 1d 21 	lds	r24, 0x211D
     7d6:	90 91 1e 21 	lds	r25, 0x211E
     7da:	8d 93       	st	X+, r24
     7dc:	9c 93       	st	X, r25
	write_index = (write_index + 1) & fifo_desc->mask;
     7de:	2f 5f       	subi	r18, 0xFF	; 255
     7e0:	80 81       	ld	r24, Z
     7e2:	28 23       	and	r18, r24

	// Must be the last thing to do.
	barrier();
	fifo_desc->write_index = write_index;
     7e4:	20 93 da 20 	sts	0x20DA, r18
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     7e8:	80 e2       	ldi	r24, 0x20	; 32
     7ea:	e0 e6       	ldi	r30, 0x60	; 96
     7ec:	f6 e0       	ldi	r31, 0x06	; 6
     7ee:	85 83       	std	Z+5, r24	; 0x05
	fifo_push_uint16_nocheck(&app_sampling_fifo_desc, (uint16_t)light);
	LED_Off(LED1_GPIO);

	/* Enable the next RTC alarm */
	app_sampling_rtc_run = true;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	80 93 2a 21 	sts	0x212A, r24
	rtc_set_alarm_relative(app_sampling_rate - 1);
     7f6:	c0 90 0d 20 	lds	r12, 0x200D
     7fa:	d1 2c       	mov	r13, r1
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	c8 1a       	sub	r12, r24
     800:	d1 08       	sbc	r13, r1
     802:	ee 24       	eor	r14, r14
     804:	d7 fc       	sbrc	r13, 7
     806:	e0 94       	com	r14
     808:	fe 2c       	mov	r15, r14
 * \note Without this errata this function can block for up to 1 RTC clock
 *       source cycle after waking up from sleep.
 */
static inline void rtc_set_alarm_relative(uint32_t offset)
{
        rtc_set_alarm(rtc_get_time() + offset);
     80a:	0e 94 a6 10 	call	0x214c	; 0x214c <rtc_get_time>
     80e:	6c 0d       	add	r22, r12
     810:	7d 1d       	adc	r23, r13
     812:	8e 1d       	adc	r24, r14
     814:	9f 1d       	adc	r25, r15
     816:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rtc_set_alarm>
}
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	df 90       	pop	r13
     820:	cf 90       	pop	r12
     822:	08 95       	ret

00000824 <app_sampling_init>:

/****************** PUBLIC FUNCTIONS **********************/

void app_sampling_init(void)
{
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	27 97       	sbiw	r28, 0x07	; 7
     832:	cd bf       	out	0x3d, r28	; 61
     834:	de bf       	out	0x3e, r29	; 62
	/* QDec configuration */
	qdec_get_config_defaults(&qdec_config);
     836:	8b e2       	ldi	r24, 0x2B	; 43
     838:	91 e2       	ldi	r25, 0x21	; 33
     83a:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <qdec_get_config_defaults>
	qdec_config_phase_pins(&qdec_config, &PORTA, 6, false, 500);
     83e:	04 ef       	ldi	r16, 0xF4	; 244
     840:	11 e0       	ldi	r17, 0x01	; 1
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	46 e0       	ldi	r20, 0x06	; 6
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	76 e0       	ldi	r23, 0x06	; 6
     84a:	8b e2       	ldi	r24, 0x2B	; 43
     84c:	91 e2       	ldi	r25, 0x21	; 33
     84e:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <qdec_config_phase_pins>
	qdec_config_enable_rotary(&qdec_config);
     852:	8b e2       	ldi	r24, 0x2B	; 43
     854:	91 e2       	ldi	r25, 0x21	; 33
     856:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <qdec_config_enable_rotary>
	qdec_config_tc(&qdec_config, &TCC5);
     85a:	60 e4       	ldi	r22, 0x40	; 64
     85c:	78 e0       	ldi	r23, 0x08	; 8
     85e:	8b e2       	ldi	r24, 0x2B	; 43
     860:	91 e2       	ldi	r25, 0x21	; 33
     862:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <qdec_config_tc>
	qdec_config_revolution(&qdec_config, 40);
     866:	68 e2       	ldi	r22, 0x28	; 40
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	8b e2       	ldi	r24, 0x2B	; 43
     86c:	91 e2       	ldi	r25, 0x21	; 33
     86e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <qdec_config_revolution>
	qdec_enabled(&qdec_config);
     872:	8b e2       	ldi	r24, 0x2B	; 43
     874:	91 e2       	ldi	r25, 0x21	; 33
     876:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <qdec_enabled>
	 * - VCC reference
	 * - 200 kHz maximum clock rate
	 * - manual conversion triggering
	 * - callback function
	 */
	adc_read_configuration(&LIGHT_SENSOR_ADC_MODULE, &adc_conf);
     87a:	be 01       	movw	r22, r28
     87c:	6f 5f       	subi	r22, 0xFF	; 255
     87e:	7f 4f       	sbci	r23, 0xFF	; 255
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <adc_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
     888:	89 81       	ldd	r24, Y+1	; 0x01
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
     88a:	9a 81       	ldd	r25, Y+2	; 0x02
     88c:	9f 78       	andi	r25, 0x8F	; 143
	conf->refctrl |= ref;
     88e:	90 61       	ori	r25, 0x10	; 16
     890:	9a 83       	std	Y+2, r25	; 0x02
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
     892:	96 e0       	ldi	r25, 0x06	; 6
     894:	9c 83       	std	Y+4, r25	; 0x04
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     896:	81 7e       	andi	r24, 0xE1	; 225
     898:	80 61       	ori	r24, 0x10	; 16
     89a:	89 83       	std	Y+1, r24	; 0x01
		conf->evctrl = ADC_EVACT_NONE_gc;
     89c:	1b 82       	std	Y+3, r1	; 0x03
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_ON, ADC_RES_12,
			ADC_REF_VCC);
	adc_set_clock_rate(&adc_conf, 200000);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_write_configuration(&LIGHT_SENSOR_ADC_MODULE, &adc_conf);
     89e:	be 01       	movw	r22, r28
     8a0:	6f 5f       	subi	r22, 0xFF	; 255
     8a2:	7f 4f       	sbci	r23, 0xFF	; 255
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	92 e0       	ldi	r25, 0x02	; 2
     8a8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <adc_write_configuration>
	adc_set_callback(&LIGHT_SENSOR_ADC_MODULE, &app_sampling_handler);
     8ac:	6a e9       	ldi	r22, 0x9A	; 154
     8ae:	73 e0       	ldi	r23, 0x03	; 3
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	92 e0       	ldi	r25, 0x02	; 2
     8b4:	d8 d7       	rcall	.+4016   	; 0x1866 <adc_set_callback>
	adc_enable(&LIGHT_SENSOR_ADC_MODULE);
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	92 e0       	ldi	r25, 0x02	; 2
     8ba:	fd d7       	rcall	.+4090   	; 0x18b6 <adc_enable>
	 * - differantial measurement (V- linked on internal GND)
	 * - gain x0.5
	 * - interrupt flag set on completed conversion
	 * - interrupts enabled
	 */
	adcch_read_configuration(&LIGHT_SENSOR_ADC_MODULE, ADC_CH0,
     8bc:	4f e1       	ldi	r20, 0x1F	; 31
     8be:	51 e2       	ldi	r21, 0x21	; 33
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	92 e0       	ldi	r25, 0x02	; 2
     8c6:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <adcch_read_configuration>
		/* Configure for differential measurement through PAD GND or
		 * internal GND.
		 * DIFFWGAINH (INPUTMODE) is not used because it support
		 * only PAD GND.
		 */
		ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAINL_gc |
     8ca:	8e e1       	ldi	r24, 0x1E	; 30
     8cc:	80 93 1f 21 	sts	0x211F, r24
				adcch_get_gain_setting(gain);
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
     8d0:	8f e4       	ldi	r24, 0x4F	; 79
     8d2:	80 93 20 21 	sts	0x2120, r24
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
     8d6:	e1 e2       	ldi	r30, 0x21	; 33
     8d8:	f1 e2       	ldi	r31, 0x21	; 33
 *
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
     8da:	80 81       	ld	r24, Z
     8dc:	80 7f       	andi	r24, 0xF0	; 240
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
     8de:	81 60       	ori	r24, 0x01	; 1
     8e0:	80 83       	st	Z, r24
			&adcch_conf);
	adcch_set_input(&adcch_conf, LIGHT_SENSOR_ADC_INPUT,
			ADCCH_NEG_INTERNAL_GND, 0);
	adcch_set_interrupt_mode(&adcch_conf, ADCCH_MODE_COMPLETE);
	adcch_enable_interrupt(&adcch_conf);
	adcch_write_configuration(&LIGHT_SENSOR_ADC_MODULE, ADC_CH0,
     8e2:	4f e1       	ldi	r20, 0x1F	; 31
     8e4:	51 e2       	ldi	r21, 0x21	; 33
     8e6:	61 e0       	ldi	r22, 0x01	; 1
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	92 e0       	ldi	r25, 0x02	; 2
     8ec:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <adcch_write_configuration>
			&adcch_conf);

	fifo_init(&app_sampling_fifo_desc, app_sampling_fifo_buffer,
     8f0:	40 e2       	ldi	r20, 0x20	; 32
     8f2:	6d ed       	ldi	r22, 0xDD	; 221
     8f4:	70 e2       	ldi	r23, 0x20	; 32
     8f6:	87 ed       	ldi	r24, 0xD7	; 215
     8f8:	90 e2       	ldi	r25, 0x20	; 32
     8fa:	39 d2       	rcall	.+1138   	; 0xd6e <fifo_init>
			APP_SAMPLING_FIFO_SIZE);
	rtc_set_callback(&app_sampling_start);
     8fc:	82 e9       	ldi	r24, 0x92	; 146
     8fe:	93 e0       	ldi	r25, 0x03	; 3
     900:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <rtc_set_callback>

	/* Display background */
	gfx_mono_draw_line(DISPLAY_SAMPLING_TEXT_POS_X - 3,
     904:	01 e0       	ldi	r16, 0x01	; 1
     906:	20 e2       	ldi	r18, 0x20	; 32
     908:	40 e4       	ldi	r20, 0x40	; 64
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	80 e4       	ldi	r24, 0x40	; 64
     90e:	3a d3       	rcall	.+1652   	; 0xf84 <gfx_mono_generic_draw_line>
			0,
			DISPLAY_SAMPLING_TEXT_POS_X - 3,
			32,
			GFX_PIXEL_SET);
	app_sampling_display_rate();
     910:	bf de       	rcall	.-642    	; 0x690 <app_sampling_display_rate>
	gfx_mono_draw_string(DISPLAY_LIGHT_TEXT,
     912:	2e e0       	ldi	r18, 0x0E	; 14
     914:	30 e2       	ldi	r19, 0x20	; 32
     916:	43 e1       	ldi	r20, 0x13	; 19
     918:	63 e4       	ldi	r22, 0x43	; 67
     91a:	88 e3       	ldi	r24, 0x38	; 56
     91c:	90 e2       	ldi	r25, 0x20	; 32
     91e:	10 d5       	rcall	.+2592   	; 0x1340 <gfx_mono_draw_string>
			DISPLAY_LIGHT_TEXT_POS_X,
			DISPLAY_LIGHT_TEXT_POS_Y,
			&sysfont);
	gfx_mono_draw_filled_rect(
     920:	26 e0       	ldi	r18, 0x06	; 6
     922:	41 e0       	ldi	r20, 0x01	; 1
     924:	6c e1       	ldi	r22, 0x1C	; 28
     926:	83 e4       	ldi	r24, 0x43	; 67
     928:	97 d3       	rcall	.+1838   	; 0x1058 <gfx_mono_generic_draw_filled_rect>
			DISPLAY_LIGHT_PROBAR_START_POS_X,
			DISPLAY_LIGHT_PROBAR_START_POS_Y,
			DISPLAY_LIGHT_PROBAR_START_SIZE_X,
			DISPLAY_LIGHT_PROBAR_START_SIZE_Y,
			GFX_PIXEL_SET);
	gfx_mono_draw_filled_rect(
     92a:	26 e0       	ldi	r18, 0x06	; 6
     92c:	41 e0       	ldi	r20, 0x01	; 1
     92e:	6c e1       	ldi	r22, 0x1C	; 28
     930:	88 e6       	ldi	r24, 0x68	; 104
     932:	92 d3       	rcall	.+1828   	; 0x1058 <gfx_mono_generic_draw_filled_rect>
     934:	0e 94 a6 10 	call	0x214c	; 0x214c <rtc_get_time>
     938:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rtc_set_alarm>
			DISPLAY_LIGHT_PROBAR_STOP_SIZE_Y,
			GFX_PIXEL_SET);

	/* Start a RTC alarm immediatly */
	rtc_set_alarm_relative(0);
}
     93c:	27 96       	adiw	r28, 0x07	; 7
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	de bf       	out	0x3e, r29	; 62
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	1f 91       	pop	r17
     948:	0f 91       	pop	r16
     94a:	08 95       	ret

0000094c <app_sampling_task>:

void app_sampling_task(void)
{
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
     960:	6e 97       	sbiw	r28, 0x1e	; 30
     962:	cd bf       	out	0x3d, r28	; 61
     964:	de bf       	out	0x3e, r29	; 62
	irqflags_t flags;
	static uint16_t qdec_position_last = 2;
	uint16_t qdec_position;

	/* Manage frequency sample through Quadrature encoder */
	qdec_position = qdec_get_position(&qdec_config) / 2;
     966:	8b e2       	ldi	r24, 0x2B	; 43
     968:	91 e2       	ldi	r25, 0x21	; 33
     96a:	0e 94 99 10 	call	0x2132	; 0x2132 <qdec_get_position>
     96e:	96 95       	lsr	r25
     970:	87 95       	ror	r24
	if (qdec_position != qdec_position_last) {
     972:	20 91 0b 20 	lds	r18, 0x200B
     976:	30 91 0c 20 	lds	r19, 0x200C
     97a:	82 17       	cp	r24, r18
     97c:	93 07       	cpc	r25, r19
     97e:	41 f1       	breq	.+80     	; 0x9d0 <app_sampling_task+0x84>
		/* Quadrature encoder have changed */
		qdec_position_last = qdec_position;
     980:	80 93 0b 20 	sts	0x200B, r24
     984:	90 93 0c 20 	sts	0x200C, r25
		app_sampling_rate = (qdec_position_last + 1) * 2;
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	88 0f       	add	r24, r24
     98c:	80 93 0d 20 	sts	0x200D, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     990:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
     992:	f8 94       	cli
		flags = cpu_irq_save();
		if (app_sampling_rtc_run) {
     994:	80 91 2a 21 	lds	r24, 0x212A
     998:	88 23       	and	r24, r24
     99a:	c1 f0       	breq	.+48     	; 0x9cc <app_sampling_task+0x80>
			time_stamp = rtc_get_time();
     99c:	0e 94 a6 10 	call	0x214c	; 0x214c <rtc_get_time>
     9a0:	60 93 d5 20 	sts	0x20D5, r22
     9a4:	70 93 d6 20 	sts	0x20D6, r23
			rtc_set_alarm_relative(app_sampling_rate - 1);
     9a8:	c0 90 0d 20 	lds	r12, 0x200D
     9ac:	d1 2c       	mov	r13, r1
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	c8 1a       	sub	r12, r24
     9b2:	d1 08       	sbc	r13, r1
     9b4:	ee 24       	eor	r14, r14
     9b6:	d7 fc       	sbrc	r13, 7
     9b8:	e0 94       	com	r14
     9ba:	fe 2c       	mov	r15, r14
     9bc:	0e 94 a6 10 	call	0x214c	; 0x214c <rtc_get_time>
     9c0:	6c 0d       	add	r22, r12
     9c2:	7d 1d       	adc	r23, r13
     9c4:	8e 1d       	adc	r24, r14
     9c6:	9f 1d       	adc	r25, r15
     9c8:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rtc_set_alarm>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9cc:	1f bf       	out	0x3f, r17	; 63
		}

		cpu_irq_restore(flags);
		app_sampling_display_rate();
     9ce:	60 de       	rcall	.-832    	; 0x690 <app_sampling_display_rate>
	}

	/* Update sampling progress bar */
	time_pos = ((rtc_get_time() - time_stamp) * 8) / app_sampling_rate;
     9d0:	0e 94 a6 10 	call	0x214c	; 0x214c <rtc_get_time>
     9d4:	20 91 d5 20 	lds	r18, 0x20D5
     9d8:	30 91 d6 20 	lds	r19, 0x20D6
     9dc:	dc 01       	movw	r26, r24
     9de:	cb 01       	movw	r24, r22
     9e0:	82 1b       	sub	r24, r18
     9e2:	93 0b       	sbc	r25, r19
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	88 0f       	add	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	aa 1f       	adc	r26, r26
     9f6:	bb 1f       	adc	r27, r27
     9f8:	bc 01       	movw	r22, r24
     9fa:	cd 01       	movw	r24, r26
     9fc:	66 0f       	add	r22, r22
     9fe:	77 1f       	adc	r23, r23
     a00:	88 1f       	adc	r24, r24
     a02:	99 1f       	adc	r25, r25
     a04:	20 91 0d 20 	lds	r18, 0x200D
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__udivmodsi4>
     a12:	f2 2e       	mov	r15, r18
     a14:	98 e0       	ldi	r25, 0x08	; 8
     a16:	92 17       	cp	r25, r18
     a18:	18 f4       	brcc	.+6      	; 0xa20 <app_sampling_task+0xd4>
     a1a:	68 94       	set
     a1c:	ff 24       	eor	r15, r15
     a1e:	f3 f8       	bld	r15, 3
	if (time_pos > 8) {
		time_pos = 8;
	}

	if (time_last > time_pos) {
     a20:	80 91 d4 20 	lds	r24, 0x20D4
     a24:	f8 16       	cp	r15, r24
     a26:	30 f4       	brcc	.+12     	; 0xa34 <app_sampling_task+0xe8>
		gfx_mono_draw_filled_circle(
     a28:	0f ef       	ldi	r16, 0xFF	; 255
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	44 e0       	ldi	r20, 0x04	; 4
     a2e:	6e e0       	ldi	r22, 0x0E	; 14
     a30:	8e e6       	ldi	r24, 0x6E	; 110
     a32:	2d d3       	rcall	.+1626   	; 0x108e <gfx_mono_generic_draw_filled_circle>
				DISPLAY_SAMPLING_PROCIRCLE_RADIUS,
				GFX_PIXEL_CLR,
				GFX_WHOLE);
	}

	if (time_last != time_pos) {
     a34:	80 91 d4 20 	lds	r24, 0x20D4
     a38:	8f 15       	cp	r24, r15
     a3a:	91 f0       	breq	.+36     	; 0xa60 <app_sampling_task+0x114>
		gfx_mono_draw_filled_circle(
     a3c:	01 e0       	ldi	r16, 0x01	; 1
     a3e:	10 e0       	ldi	r17, 0x00	; 0
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	0f 2c       	mov	r0, r15
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <app_sampling_task+0x104>
     a48:	00 0f       	add	r16, r16
     a4a:	11 1f       	adc	r17, r17
     a4c:	22 1f       	adc	r18, r18
     a4e:	33 1f       	adc	r19, r19
     a50:	0a 94       	dec	r0
     a52:	d2 f7       	brpl	.-12     	; 0xa48 <app_sampling_task+0xfc>
     a54:	01 50       	subi	r16, 0x01	; 1
     a56:	21 e0       	ldi	r18, 0x01	; 1
     a58:	44 e0       	ldi	r20, 0x04	; 4
     a5a:	6e e0       	ldi	r22, 0x0E	; 14
     a5c:	8e e6       	ldi	r24, 0x6E	; 110
     a5e:	17 d3       	rcall	.+1582   	; 0x108e <gfx_mono_generic_draw_filled_circle>
				DISPLAY_SAMPLING_PROCIRCLE_RADIUS,
				GFX_PIXEL_SET,
				(1lu << time_pos) - 1);
	}

	time_last = time_pos;
     a60:	f0 92 d4 20 	sts	0x20D4, r15
 *
 *  \return The number of used elements.
 */
static inline uint8_t fifo_get_used_size(fifo_desc_t *fifo_desc)
{
	return ((fifo_desc->write_index - fifo_desc->read_index) & fifo_desc->mask);
     a64:	80 91 da 20 	lds	r24, 0x20DA
     a68:	90 91 d9 20 	lds	r25, 0x20D9
     a6c:	20 91 dc 20 	lds	r18, 0x20DC
     a70:	89 1b       	sub	r24, r25
     a72:	82 23       	and	r24, r18

	/* Manage FIFO about sensor data */
	if (2 > fifo_get_used_size(&app_sampling_fifo_desc)) {
     a74:	82 30       	cpi	r24, 0x02	; 2
     a76:	08 f4       	brcc	.+2      	; 0xa7a <app_sampling_task+0x12e>
     a78:	8c c0       	rjmp	.+280    	; 0xb92 <app_sampling_task+0x246>
static inline uint16_t fifo_pull_uint16_nocheck(fifo_desc_t *fifo_desc)
{
	uint8_t read_index;
	uint16_t item;

	read_index = fifo_desc->read_index;
     a7a:	30 91 d9 20 	lds	r19, 0x20D9
	item = fifo_desc->buffer.u16ptr[read_index & (fifo_desc->mask >> 1)];
     a7e:	e2 2f       	mov	r30, r18
     a80:	e6 95       	lsr	r30
     a82:	e3 23       	and	r30, r19
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	ee 0f       	add	r30, r30
     a88:	ff 1f       	adc	r31, r31
     a8a:	80 91 d7 20 	lds	r24, 0x20D7
     a8e:	90 91 d8 20 	lds	r25, 0x20D8
     a92:	e8 0f       	add	r30, r24
     a94:	f9 1f       	adc	r31, r25
     a96:	80 81       	ld	r24, Z
     a98:	91 81       	ldd	r25, Z+1	; 0x01
	read_index = (read_index + 1) & fifo_desc->mask;
     a9a:	3f 5f       	subi	r19, 0xFF	; 255
     a9c:	23 23       	and	r18, r19

	// Must be the last thing to do.
	barrier();
	fifo_desc->read_index = read_index;
     a9e:	e9 ed       	ldi	r30, 0xD9	; 217
     aa0:	f0 e2       	ldi	r31, 0x20	; 32
     aa2:	20 83       	st	Z, r18
		return; /* Not enought data */
	}

	/* Get values */
	time_stamp = fifo_pull_uint16_nocheck(&app_sampling_fifo_desc);
     aa4:	80 93 d5 20 	sts	0x20D5, r24
     aa8:	90 93 d6 20 	sts	0x20D6, r25
static inline uint16_t fifo_pull_uint16_nocheck(fifo_desc_t *fifo_desc)
{
	uint8_t read_index;
	uint16_t item;

	read_index = fifo_desc->read_index;
     aac:	30 81       	ld	r19, Z
	item = fifo_desc->buffer.u16ptr[read_index & (fifo_desc->mask >> 1)];
     aae:	20 91 dc 20 	lds	r18, 0x20DC
     ab2:	e2 2f       	mov	r30, r18
     ab4:	e6 95       	lsr	r30
     ab6:	e3 23       	and	r30, r19
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	ee 0f       	add	r30, r30
     abc:	ff 1f       	adc	r31, r31
     abe:	80 91 d7 20 	lds	r24, 0x20D7
     ac2:	90 91 d8 20 	lds	r25, 0x20D8
     ac6:	e8 0f       	add	r30, r24
     ac8:	f9 1f       	adc	r31, r25
     aca:	e0 80       	ld	r14, Z
     acc:	f1 80       	ldd	r15, Z+1	; 0x01
	read_index = (read_index + 1) & fifo_desc->mask;
     ace:	3f 5f       	subi	r19, 0xFF	; 255
     ad0:	23 23       	and	r18, r19

	// Must be the last thing to do.
	barrier();
	fifo_desc->read_index = read_index;
     ad2:	20 93 d9 20 	sts	0x20D9, r18
	light = (adc_result_t)fifo_pull_uint16_nocheck(&app_sampling_fifo_desc);

	/* Display values through USART */
	sprintf(string, "%4u,%02us - %3d light\r\n",
			time_stamp / 4, (time_stamp % 4) * 25,
     ad6:	80 91 d5 20 	lds	r24, 0x20D5
     ada:	90 91 d6 20 	lds	r25, 0x20D6
	/* Get values */
	time_stamp = fifo_pull_uint16_nocheck(&app_sampling_fifo_desc);
	light = (adc_result_t)fifo_pull_uint16_nocheck(&app_sampling_fifo_desc);

	/* Display values through USART */
	sprintf(string, "%4u,%02us - %3d light\r\n",
     ade:	ff 92       	push	r15
     ae0:	ef 92       	push	r14
			time_stamp / 4, (time_stamp % 4) * 25,
     ae2:	ac 01       	movw	r20, r24
     ae4:	43 70       	andi	r20, 0x03	; 3
     ae6:	55 27       	eor	r21, r21
	/* Get values */
	time_stamp = fifo_pull_uint16_nocheck(&app_sampling_fifo_desc);
	light = (adc_result_t)fifo_pull_uint16_nocheck(&app_sampling_fifo_desc);

	/* Display values through USART */
	sprintf(string, "%4u,%02us - %3d light\r\n",
     ae8:	69 e1       	ldi	r22, 0x19	; 25
     aea:	64 9f       	mul	r22, r20
     aec:	90 01       	movw	r18, r0
     aee:	65 9f       	mul	r22, r21
     af0:	30 0d       	add	r19, r0
     af2:	11 24       	eor	r1, r1
     af4:	3f 93       	push	r19
     af6:	2f 93       	push	r18
     af8:	96 95       	lsr	r25
     afa:	87 95       	ror	r24
     afc:	96 95       	lsr	r25
     afe:	87 95       	ror	r24
     b00:	9f 93       	push	r25
     b02:	8f 93       	push	r24
     b04:	8e e3       	ldi	r24, 0x3E	; 62
     b06:	90 e2       	ldi	r25, 0x20	; 32
     b08:	9f 93       	push	r25
     b0a:	8f 93       	push	r24
     b0c:	8e 01       	movw	r16, r28
     b0e:	0f 5f       	subi	r16, 0xFF	; 255
     b10:	1f 4f       	sbci	r17, 0xFF	; 255
     b12:	1f 93       	push	r17
     b14:	0f 93       	push	r16
     b16:	0e 94 08 1a 	call	0x3410	; 0x3410 <sprintf>
			time_stamp / 4, (time_stamp % 4) * 25,
			light);
	printf("%s", string);
     b1a:	1f 93       	push	r17
     b1c:	0f 93       	push	r16
     b1e:	86 e5       	ldi	r24, 0x56	; 86
     b20:	90 e2       	ldi	r25, 0x20	; 32
     b22:	9f 93       	push	r25
     b24:	8f 93       	push	r24
     b26:	0e 94 f7 19 	call	0x33ee	; 0x33ee <printf>

	/* Update light progress bar */
	light_bar_pos = ((uint32_t)light * DISPLAY_LIGHT_PROBAR_MAX_SIZE_X)
     b2a:	c7 01       	movw	r24, r14
     b2c:	aa 27       	eor	r26, r26
     b2e:	97 fd       	sbrc	r25, 7
     b30:	a0 95       	com	r26
     b32:	ba 2f       	mov	r27, r26
     b34:	ac 01       	movw	r20, r24
     b36:	bd 01       	movw	r22, r26
     b38:	44 0f       	add	r20, r20
     b3a:	55 1f       	adc	r21, r21
     b3c:	66 1f       	adc	r22, r22
     b3e:	77 1f       	adc	r23, r23
     b40:	44 0f       	add	r20, r20
     b42:	55 1f       	adc	r21, r21
     b44:	66 1f       	adc	r22, r22
     b46:	77 1f       	adc	r23, r23
     b48:	44 0f       	add	r20, r20
     b4a:	55 1f       	adc	r21, r21
     b4c:	66 1f       	adc	r22, r22
     b4e:	77 1f       	adc	r23, r23
     b50:	84 0f       	add	r24, r20
     b52:	95 1f       	adc	r25, r21
     b54:	a6 1f       	adc	r26, r22
     b56:	b7 1f       	adc	r27, r23
			/ 2048lu;
     b58:	07 2e       	mov	r0, r23
     b5a:	79 e0       	ldi	r23, 0x09	; 9
     b5c:	b6 95       	lsr	r27
     b5e:	a7 95       	ror	r26
     b60:	97 95       	ror	r25
     b62:	87 95       	ror	r24
     b64:	7a 95       	dec	r23
     b66:	d1 f7       	brne	.-12     	; 0xb5c <app_sampling_task+0x210>
     b68:	70 2d       	mov	r23, r0
     b6a:	18 2f       	mov	r17, r24
     b6c:	cd bf       	out	0x3d, r28	; 61
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	15 32       	cpi	r17, 0x25	; 37
     b72:	08 f0       	brcs	.+2      	; 0xb76 <app_sampling_task+0x22a>
     b74:	14 e2       	ldi	r17, 0x24	; 36
	if (light_bar_pos > DISPLAY_LIGHT_PROBAR_MAX_SIZE_X) {
		light_bar_pos = DISPLAY_LIGHT_PROBAR_MAX_SIZE_X;
	}

	gfx_mono_draw_filled_rect(DISPLAY_LIGHT_PROBAR_POS_X,
     b76:	01 e0       	ldi	r16, 0x01	; 1
     b78:	24 e0       	ldi	r18, 0x04	; 4
     b7a:	41 2f       	mov	r20, r17
     b7c:	6c e1       	ldi	r22, 0x1C	; 28
     b7e:	83 e4       	ldi	r24, 0x43	; 67
     b80:	6b d2       	rcall	.+1238   	; 0x1058 <gfx_mono_generic_draw_filled_rect>
			DISPLAY_LIGHT_PROBAR_POS_Y,
			light_bar_pos,
			DISPLAY_LIGHT_PROBAR_SIZE_Y,
			GFX_PIXEL_SET);
	gfx_mono_draw_filled_rect(DISPLAY_LIGHT_PROBAR_POS_X + light_bar_pos,
     b82:	44 e2       	ldi	r20, 0x24	; 36
     b84:	41 1b       	sub	r20, r17
     b86:	00 e0       	ldi	r16, 0x00	; 0
     b88:	24 e0       	ldi	r18, 0x04	; 4
     b8a:	6c e1       	ldi	r22, 0x1C	; 28
     b8c:	83 e4       	ldi	r24, 0x43	; 67
     b8e:	81 0f       	add	r24, r17
     b90:	63 d2       	rcall	.+1222   	; 0x1058 <gfx_mono_generic_draw_filled_rect>
			DISPLAY_LIGHT_PROBAR_POS_Y,
			DISPLAY_LIGHT_PROBAR_MAX_SIZE_X - light_bar_pos,
			DISPLAY_LIGHT_PROBAR_SIZE_Y,
			GFX_PIXEL_CLR);
}
     b92:	6e 96       	adiw	r28, 0x1e	; 30
     b94:	cd bf       	out	0x3d, r28	; 61
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
     ba8:	08 95       	ret

00000baa <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	1f 92       	push	r1
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	18 2f       	mov	r17, r24
#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = SSD1306_CS_PIN};
     bb8:	89 e7       	ldi	r24, 0x79	; 121
     bba:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(SSD1306_USART_SPI, &device);
     bbc:	be 01       	movw	r22, r28
     bbe:	6f 5f       	subi	r22, 0xFF	; 255
     bc0:	7f 4f       	sbci	r23, 0xFF	; 255
     bc2:	80 ec       	ldi	r24, 0xC0	; 192
     bc4:	98 e0       	ldi	r25, 0x08	; 8
     bc6:	93 d5       	rcall	.+2854   	; 0x16ee <usart_spi_select_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	e0 ee       	ldi	r30, 0xE0	; 224
     bcc:	f7 e0       	ldi	r31, 0x07	; 7
     bce:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     bd0:	e0 ec       	ldi	r30, 0xC0	; 192
     bd2:	f8 e0       	ldi	r31, 0x08	; 8
     bd4:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     bd6:	95 ff       	sbrs	r25, 5
     bd8:	fd cf       	rjmp	.-6      	; 0xbd4 <ssd1306_write_command+0x2a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     bda:	10 93 c0 08 	sts	0x08C0, r17
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     bde:	e0 ec       	ldi	r30, 0xC0	; 192
     be0:	f8 e0       	ldi	r31, 0x08	; 8
     be2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     be4:	86 ff       	sbrs	r24, 6
     be6:	fd cf       	rjmp	.-6      	; 0xbe2 <ssd1306_write_command+0x38>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     be8:	e0 ec       	ldi	r30, 0xC0	; 192
     bea:	f8 e0       	ldi	r31, 0x08	; 8
     bec:	80 e4       	ldi	r24, 0x40	; 64
     bee:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     bf0:	80 81       	ld	r24, Z
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
     bf2:	be 01       	movw	r22, r28
     bf4:	6f 5f       	subi	r22, 0xFF	; 255
     bf6:	7f 4f       	sbci	r23, 0xFF	; 255
     bf8:	80 ec       	ldi	r24, 0xC0	; 192
     bfa:	98 e0       	ldi	r25, 0x08	; 8
     bfc:	8e d5       	rcall	.+2844   	; 0x171a <usart_spi_deselect_device>
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
#endif
}
     bfe:	0f 90       	pop	r0
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	08 95       	ret

00000c08 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
     c08:	cf 92       	push	r12
     c0a:	df 92       	push	r13
     c0c:	ef 92       	push	r14
     c0e:	ff 92       	push	r15
     c10:	0f 93       	push	r16
     c12:	1f 93       	push	r17
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	1f 92       	push	r1
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	88 e0       	ldi	r24, 0x08	; 8
     c20:	e0 e6       	ldi	r30, 0x60	; 96
     c22:	f6 e0       	ldi	r31, 0x06	; 6
     c24:	86 83       	std	Z+6, r24	; 0x06
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	85 33       	cpi	r24, 0x35	; 53
     c2e:	91 05       	cpc	r25, r1
     c30:	e1 f7       	brne	.-8      	; 0xc2a <ssd1306_init+0x22>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     c32:	88 e0       	ldi	r24, 0x08	; 8
     c34:	e0 e6       	ldi	r30, 0x60	; 96
     c36:	f6 e0       	ldi	r31, 0x06	; 6
     c38:	85 83       	std	Z+5, r24	; 0x05
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	85 33       	cpi	r24, 0x35	; 53
     c42:	91 05       	cpc	r25, r1
     c44:	e1 f7       	brne	.-8      	; 0xc3e <ssd1306_init+0x36>
	spi_flags_t spi_flags = SPI_MODE_0;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     c46:	89 e7       	ldi	r24, 0x79	; 121
     c48:	89 83       	std	Y+1, r24	; 0x01
		.id = SSD1306_CS_PIN,
	};
	usart_spi_init(SSD1306_USART_SPI);
     c4a:	80 ec       	ldi	r24, 0xC0	; 192
     c4c:	98 e0       	ldi	r25, 0x08	; 8
     c4e:	24 d5       	rcall	.+2632   	; 0x1698 <usart_spi_init>
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
     c50:	c1 2c       	mov	r12, r1
     c52:	d1 2c       	mov	r13, r1
     c54:	76 01       	movw	r14, r12
     c56:	00 e0       	ldi	r16, 0x00	; 0
     c58:	1b e1       	ldi	r17, 0x1B	; 27
     c5a:	27 eb       	ldi	r18, 0xB7	; 183
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	be 01       	movw	r22, r28
     c62:	6f 5f       	subi	r22, 0xFF	; 255
     c64:	7f 4f       	sbci	r23, 0xFF	; 255
     c66:	80 ec       	ldi	r24, 0xC0	; 192
     c68:	98 e0       	ldi	r25, 0x08	; 8
     c6a:	25 d5       	rcall	.+2634   	; 0x16b6 <usart_spi_setup_device>

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
     c6c:	88 ea       	ldi	r24, 0xA8	; 168
     c6e:	9d df       	rcall	.-198    	; 0xbaa <ssd1306_write_command>
	ssd1306_write_command(0x1F);
     c70:	8f e1       	ldi	r24, 0x1F	; 31
     c72:	9b df       	rcall	.-202    	; 0xbaa <ssd1306_write_command>

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
     c74:	83 ed       	ldi	r24, 0xD3	; 211
     c76:	99 df       	rcall	.-206    	; 0xbaa <ssd1306_write_command>
	ssd1306_write_command(0x00);
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	97 df       	rcall	.-210    	; 0xbaa <ssd1306_write_command>

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	95 df       	rcall	.-214    	; 0xbaa <ssd1306_write_command>

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
     c80:	81 ea       	ldi	r24, 0xA1	; 161
     c82:	93 df       	rcall	.-218    	; 0xbaa <ssd1306_write_command>

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
     c84:	88 ec       	ldi	r24, 0xC8	; 200
     c86:	91 df       	rcall	.-222    	; 0xbaa <ssd1306_write_command>

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
     c88:	8a ed       	ldi	r24, 0xDA	; 218
     c8a:	8f df       	rcall	.-226    	; 0xbaa <ssd1306_write_command>
	ssd1306_write_command(0x02);
     c8c:	82 e0       	ldi	r24, 0x02	; 2
     c8e:	8d df       	rcall	.-230    	; 0xbaa <ssd1306_write_command>
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
     c90:	81 e8       	ldi	r24, 0x81	; 129
     c92:	8b df       	rcall	.-234    	; 0xbaa <ssd1306_write_command>
	ssd1306_write_command(contrast);
     c94:	8f e8       	ldi	r24, 0x8F	; 143
     c96:	89 df       	rcall	.-238    	; 0xbaa <ssd1306_write_command>

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
     c98:	84 ea       	ldi	r24, 0xA4	; 164
     c9a:	87 df       	rcall	.-242    	; 0xbaa <ssd1306_write_command>
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
     c9c:	86 ea       	ldi	r24, 0xA6	; 166
     c9e:	85 df       	rcall	.-246    	; 0xbaa <ssd1306_write_command>

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
     ca0:	85 ed       	ldi	r24, 0xD5	; 213
     ca2:	83 df       	rcall	.-250    	; 0xbaa <ssd1306_write_command>
	ssd1306_write_command(0x80);
     ca4:	80 e8       	ldi	r24, 0x80	; 128
     ca6:	81 df       	rcall	.-254    	; 0xbaa <ssd1306_write_command>

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
     ca8:	8d e8       	ldi	r24, 0x8D	; 141
     caa:	7f df       	rcall	.-258    	; 0xbaa <ssd1306_write_command>
	ssd1306_write_command(0x14);
     cac:	84 e1       	ldi	r24, 0x14	; 20
     cae:	7d df       	rcall	.-262    	; 0xbaa <ssd1306_write_command>

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
     cb0:	8b ed       	ldi	r24, 0xDB	; 219
     cb2:	7b df       	rcall	.-266    	; 0xbaa <ssd1306_write_command>
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
     cb4:	80 e4       	ldi	r24, 0x40	; 64
     cb6:	79 df       	rcall	.-270    	; 0xbaa <ssd1306_write_command>

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
     cb8:	89 ed       	ldi	r24, 0xD9	; 217
     cba:	77 df       	rcall	.-274    	; 0xbaa <ssd1306_write_command>
	ssd1306_write_command(0xF1);
     cbc:	81 ef       	ldi	r24, 0xF1	; 241
     cbe:	75 df       	rcall	.-278    	; 0xbaa <ssd1306_write_command>
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
     cc0:	8f ea       	ldi	r24, 0xAF	; 175
     cc2:	73 df       	rcall	.-282    	; 0xbaa <ssd1306_write_command>

	ssd1306_display_on();
}
     cc4:	0f 90       	pop	r0
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	ff 90       	pop	r15
     cd0:	ef 90       	pop	r14
     cd2:	df 90       	pop	r13
     cd4:	cf 90       	pop	r12
     cd6:	08 95       	ret

00000cd8 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     cd8:	8f ef       	ldi	r24, 0xFF	; 255
     cda:	80 93 70 00 	sts	0x0070, r24
     cde:	80 93 71 00 	sts	0x0071, r24
     ce2:	80 93 72 00 	sts	0x0072, r24
     ce6:	80 93 73 00 	sts	0x0073, r24
     cea:	80 93 74 00 	sts	0x0074, r24
     cee:	80 93 75 00 	sts	0x0075, r24
     cf2:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     cf6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     cf8:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     cfa:	e0 e5       	ldi	r30, 0x50	; 80
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	90 81       	ld	r25, Z
     d00:	92 60       	ori	r25, 0x02	; 2
     d02:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d04:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     d06:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     d08:	81 ff       	sbrs	r24, 1
     d0a:	fd cf       	rjmp	.-6      	; 0xd06 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	80 e4       	ldi	r24, 0x40	; 64
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	c9 d6       	rcall	.+3474   	; 0x1aa6 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     d14:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     d16:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     d18:	e0 e5       	ldi	r30, 0x50	; 80
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	90 81       	ld	r25, Z
     d1e:	9e 7f       	andi	r25, 0xFE	; 254
     d20:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d22:	8f bf       	out	0x3f, r24	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     d24:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     d26:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     d28:	90 81       	ld	r25, Z
     d2a:	94 60       	ori	r25, 0x04	; 4
     d2c:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d2e:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     d30:	81 81       	ldd	r24, Z+1	; 0x01
     d32:	82 ff       	sbrs	r24, 2
     d34:	fd cf       	rjmp	.-6      	; 0xd30 <sysclk_init+0x58>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     d36:	85 e0       	ldi	r24, 0x05	; 5
     d38:	e0 e4       	ldi	r30, 0x40	; 64
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	83 83       	std	Z+3, r24	; 0x03
     d3e:	08 95       	ret

00000d40 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     d40:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     d42:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     d44:	e8 2f       	mov	r30, r24
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	e0 59       	subi	r30, 0x90	; 144
     d4a:	ff 4f       	sbci	r31, 0xFF	; 255
     d4c:	60 95       	com	r22
     d4e:	80 81       	ld	r24, Z
     d50:	68 23       	and	r22, r24
     d52:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d54:	9f bf       	out	0x3f, r25	; 63
     d56:	08 95       	ret

00000d58 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     d58:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     d5a:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     d5c:	e8 2f       	mov	r30, r24
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	e0 59       	subi	r30, 0x90	; 144
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	80 81       	ld	r24, Z
     d66:	68 2b       	or	r22, r24
     d68:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d6a:	9f bf       	out	0x3f, r25	; 63
     d6c:	08 95       	ret

00000d6e <fifo_init>:
 */

#include "fifo.h"

int fifo_init(fifo_desc_t *fifo_desc, void *buffer, uint8_t size)
{
     d6e:	fc 01       	movw	r30, r24
	// ... and must fit in a uint8_t. Since the read and write indexes are using a
	// double-index range implementation, the max FIFO size is thus 128 items.
	Assert (size <= 128);

	// Fifo starts empty.
	fifo_desc->read_index  = 0;
     d70:	12 82       	std	Z+2, r1	; 0x02
	fifo_desc->write_index = 0;
     d72:	13 82       	std	Z+3, r1	; 0x03

	// Save the size parameter.
	fifo_desc->size = size;
     d74:	44 83       	std	Z+4, r20	; 0x04

	// Create a mask to speed up the FIFO management (index swapping).
	fifo_desc->mask = (2 * (uint16_t)size) - 1;
     d76:	44 0f       	add	r20, r20
     d78:	41 50       	subi	r20, 0x01	; 1
     d7a:	45 83       	std	Z+5, r20	; 0x05

	// Save the buffer pointer.
	fifo_desc->buffer.u8ptr = buffer;
     d7c:	60 83       	st	Z, r22
     d7e:	71 83       	std	Z+1, r23	; 0x01

	return FIFO_OK;
}
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	08 95       	ret

00000d86 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     d86:	80 93 48 21 	sts	0x2148, r24
     d8a:	90 93 49 21 	sts	0x2149, r25
     d8e:	08 95       	ret

00000d90 <gfx_mono_framebuffer_put_page>:
     d90:	dc 01       	movw	r26, r24
     d92:	e4 2f       	mov	r30, r20
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 e8       	ldi	r24, 0x80	; 128
     d98:	68 9f       	mul	r22, r24
     d9a:	e0 0d       	add	r30, r0
     d9c:	f1 1d       	adc	r31, r1
     d9e:	11 24       	eor	r1, r1
     da0:	80 91 48 21 	lds	r24, 0x2148
     da4:	90 91 49 21 	lds	r25, 0x2149
     da8:	e8 0f       	add	r30, r24
     daa:	f9 1f       	adc	r31, r25
     dac:	8d 91       	ld	r24, X+
     dae:	81 93       	st	Z+, r24
     db0:	21 50       	subi	r18, 0x01	; 1
     db2:	e1 f7       	brne	.-8      	; 0xdac <gfx_mono_framebuffer_put_page+0x1c>
     db4:	08 95       	ret

00000db6 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     db6:	20 e8       	ldi	r18, 0x80	; 128
     db8:	82 9f       	mul	r24, r18
     dba:	c0 01       	movw	r24, r0
     dbc:	11 24       	eor	r1, r1
     dbe:	fc 01       	movw	r30, r24
     dc0:	e6 0f       	add	r30, r22
     dc2:	f1 1d       	adc	r31, r1
     dc4:	80 91 48 21 	lds	r24, 0x2148
     dc8:	90 91 49 21 	lds	r25, 0x2149
     dcc:	e8 0f       	add	r30, r24
     dce:	f9 1f       	adc	r31, r25
     dd0:	40 83       	st	Z, r20
     dd2:	08 95       	ret

00000dd4 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     dd4:	20 e8       	ldi	r18, 0x80	; 128
     dd6:	82 9f       	mul	r24, r18
     dd8:	c0 01       	movw	r24, r0
     dda:	11 24       	eor	r1, r1
     ddc:	fc 01       	movw	r30, r24
     dde:	e6 0f       	add	r30, r22
     de0:	f1 1d       	adc	r31, r1
     de2:	80 91 48 21 	lds	r24, 0x2148
     de6:	90 91 49 21 	lds	r25, 0x2149
     dea:	e8 0f       	add	r30, r24
     dec:	f9 1f       	adc	r31, r25
}
     dee:	80 81       	ld	r24, Z
     df0:	08 95       	ret

00000df2 <gfx_mono_generic_draw_horizontal_line>:
		}

		/* Next X. */
		++offset_x;
	}
}
     df2:	ff 92       	push	r15
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	e4 2f       	mov	r30, r20
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	e8 0f       	add	r30, r24
     e02:	f1 1d       	adc	r31, r1
     e04:	e1 38       	cpi	r30, 0x81	; 129
     e06:	f1 05       	cpc	r31, r1
     e08:	14 f0       	brlt	.+4      	; 0xe0e <gfx_mono_generic_draw_horizontal_line+0x1c>
     e0a:	40 e8       	ldi	r20, 0x80	; 128
     e0c:	48 1b       	sub	r20, r24
     e0e:	44 23       	and	r20, r20
     e10:	09 f4       	brne	.+2      	; 0xe14 <gfx_mono_generic_draw_horizontal_line+0x22>
     e12:	5c c0       	rjmp	.+184    	; 0xecc <gfx_mono_generic_draw_horizontal_line+0xda>
     e14:	c6 2f       	mov	r28, r22
     e16:	c6 95       	lsr	r28
     e18:	c6 95       	lsr	r28
     e1a:	c6 95       	lsr	r28
     e1c:	ec 2f       	mov	r30, r28
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	f1 95       	neg	r31
     e22:	e1 95       	neg	r30
     e24:	f1 09       	sbc	r31, r1
     e26:	ee 0f       	add	r30, r30
     e28:	ff 1f       	adc	r31, r31
     e2a:	ee 0f       	add	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	ee 0f       	add	r30, r30
     e30:	ff 1f       	adc	r31, r31
     e32:	df 01       	movw	r26, r30
     e34:	a6 0f       	add	r26, r22
     e36:	b1 1d       	adc	r27, r1
     e38:	bd 01       	movw	r22, r26
     e3a:	e1 e0       	ldi	r30, 0x01	; 1
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	df 01       	movw	r26, r30
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <gfx_mono_generic_draw_horizontal_line+0x54>
     e42:	aa 0f       	add	r26, r26
     e44:	bb 1f       	adc	r27, r27
     e46:	6a 95       	dec	r22
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <gfx_mono_generic_draw_horizontal_line+0x50>
     e4a:	0a 2f       	mov	r16, r26
     e4c:	21 30       	cpi	r18, 0x01	; 1
     e4e:	49 f0       	breq	.+18     	; 0xe62 <gfx_mono_generic_draw_horizontal_line+0x70>
     e50:	68 f0       	brcs	.+26     	; 0xe6c <gfx_mono_generic_draw_horizontal_line+0x7a>
     e52:	22 30       	cpi	r18, 0x02	; 2
     e54:	09 f0       	breq	.+2      	; 0xe58 <gfx_mono_generic_draw_horizontal_line+0x66>
     e56:	3a c0       	rjmp	.+116    	; 0xecc <gfx_mono_generic_draw_horizontal_line+0xda>
     e58:	d4 2f       	mov	r29, r20
     e5a:	ff 24       	eor	r15, r15
     e5c:	fa 94       	dec	r15
     e5e:	f8 0e       	add	r15, r24
     e60:	28 c0       	rjmp	.+80     	; 0xeb2 <gfx_mono_generic_draw_horizontal_line+0xc0>
     e62:	d4 2f       	mov	r29, r20
     e64:	ff 24       	eor	r15, r15
     e66:	fa 94       	dec	r15
     e68:	f8 0e       	add	r15, r24
     e6a:	07 c0       	rjmp	.+14     	; 0xe7a <gfx_mono_generic_draw_horizontal_line+0x88>
     e6c:	d4 2f       	mov	r29, r20
     e6e:	ff 24       	eor	r15, r15
     e70:	fa 94       	dec	r15
     e72:	f8 0e       	add	r15, r24
     e74:	0a 2f       	mov	r16, r26
     e76:	00 95       	com	r16
     e78:	0e c0       	rjmp	.+28     	; 0xe96 <gfx_mono_generic_draw_horizontal_line+0xa4>
     e7a:	1f 2d       	mov	r17, r15
     e7c:	1d 0f       	add	r17, r29
     e7e:	61 2f       	mov	r22, r17
     e80:	8c 2f       	mov	r24, r28
     e82:	c1 d3       	rcall	.+1922   	; 0x1606 <gfx_mono_ssd1306_get_byte>
     e84:	48 2f       	mov	r20, r24
     e86:	40 2b       	or	r20, r16
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	61 2f       	mov	r22, r17
     e8c:	8c 2f       	mov	r24, r28
     e8e:	14 d3       	rcall	.+1576   	; 0x14b8 <gfx_mono_ssd1306_put_byte>
     e90:	d1 50       	subi	r29, 0x01	; 1
     e92:	99 f7       	brne	.-26     	; 0xe7a <gfx_mono_generic_draw_horizontal_line+0x88>
     e94:	1b c0       	rjmp	.+54     	; 0xecc <gfx_mono_generic_draw_horizontal_line+0xda>
     e96:	1f 2d       	mov	r17, r15
     e98:	1d 0f       	add	r17, r29
     e9a:	61 2f       	mov	r22, r17
     e9c:	8c 2f       	mov	r24, r28
     e9e:	b3 d3       	rcall	.+1894   	; 0x1606 <gfx_mono_ssd1306_get_byte>
     ea0:	48 2f       	mov	r20, r24
     ea2:	40 23       	and	r20, r16
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	61 2f       	mov	r22, r17
     ea8:	8c 2f       	mov	r24, r28
     eaa:	06 d3       	rcall	.+1548   	; 0x14b8 <gfx_mono_ssd1306_put_byte>
     eac:	d1 50       	subi	r29, 0x01	; 1
     eae:	99 f7       	brne	.-26     	; 0xe96 <gfx_mono_generic_draw_horizontal_line+0xa4>
     eb0:	0d c0       	rjmp	.+26     	; 0xecc <gfx_mono_generic_draw_horizontal_line+0xda>
     eb2:	1f 2d       	mov	r17, r15
     eb4:	1d 0f       	add	r17, r29
     eb6:	61 2f       	mov	r22, r17
     eb8:	8c 2f       	mov	r24, r28
     eba:	a5 d3       	rcall	.+1866   	; 0x1606 <gfx_mono_ssd1306_get_byte>
     ebc:	48 2f       	mov	r20, r24
     ebe:	40 27       	eor	r20, r16
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	61 2f       	mov	r22, r17
     ec4:	8c 2f       	mov	r24, r28
     ec6:	f8 d2       	rcall	.+1520   	; 0x14b8 <gfx_mono_ssd1306_put_byte>
     ec8:	d1 50       	subi	r29, 0x01	; 1
     eca:	99 f7       	brne	.-26     	; 0xeb2 <gfx_mono_generic_draw_horizontal_line+0xc0>
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	08 95       	ret

00000ed8 <gfx_mono_generic_draw_vertical_line>:
     ed8:	ef 92       	push	r14
     eda:	ff 92       	push	r15
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	08 2f       	mov	r16, r24
     ee6:	f2 2e       	mov	r15, r18
     ee8:	44 23       	and	r20, r20
     eea:	09 f4       	brne	.+2      	; 0xeee <gfx_mono_generic_draw_vertical_line+0x16>
     eec:	44 c0       	rjmp	.+136    	; 0xf76 <gfx_mono_generic_draw_vertical_line+0x9e>
     eee:	9f ef       	ldi	r25, 0xFF	; 255
     ef0:	96 0f       	add	r25, r22
     ef2:	94 0f       	add	r25, r20
     ef4:	69 13       	cpse	r22, r25
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <gfx_mono_generic_draw_vertical_line+0x26>
     ef8:	42 2f       	mov	r20, r18
     efa:	47 d3       	rcall	.+1678   	; 0x158a <gfx_mono_ssd1306_draw_pixel>
     efc:	3c c0       	rjmp	.+120    	; 0xf76 <gfx_mono_generic_draw_vertical_line+0x9e>
     efe:	9f 31       	cpi	r25, 0x1F	; 31
     f00:	08 f0       	brcs	.+2      	; 0xf04 <gfx_mono_generic_draw_vertical_line+0x2c>
     f02:	9f e1       	ldi	r25, 0x1F	; 31
     f04:	16 2f       	mov	r17, r22
     f06:	16 95       	lsr	r17
     f08:	16 95       	lsr	r17
     f0a:	16 95       	lsr	r17
     f0c:	e9 2e       	mov	r14, r25
     f0e:	e6 94       	lsr	r14
     f10:	e6 94       	lsr	r14
     f12:	e6 94       	lsr	r14
     f14:	67 70       	andi	r22, 0x07	; 7
     f16:	ef ef       	ldi	r30, 0xFF	; 255
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	af 01       	movw	r20, r30
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <gfx_mono_generic_draw_vertical_line+0x4a>
     f1e:	44 0f       	add	r20, r20
     f20:	55 1f       	adc	r21, r21
     f22:	6a 95       	dec	r22
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <gfx_mono_generic_draw_vertical_line+0x46>
     f26:	97 70       	andi	r25, 0x07	; 7
     f28:	c7 e0       	ldi	r28, 0x07	; 7
     f2a:	d0 e0       	ldi	r29, 0x00	; 0
     f2c:	c9 1b       	sub	r28, r25
     f2e:	d1 09       	sbc	r29, r1
     f30:	cf 01       	movw	r24, r30
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <gfx_mono_generic_draw_vertical_line+0x60>
     f34:	95 95       	asr	r25
     f36:	87 95       	ror	r24
     f38:	ca 95       	dec	r28
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <gfx_mono_generic_draw_vertical_line+0x5c>
     f3c:	ec 01       	movw	r28, r24
     f3e:	1e 11       	cpse	r17, r14
     f40:	06 c0       	rjmp	.+12     	; 0xf4e <gfx_mono_generic_draw_vertical_line+0x76>
     f42:	48 23       	and	r20, r24
     f44:	2f 2d       	mov	r18, r15
     f46:	60 2f       	mov	r22, r16
     f48:	81 2f       	mov	r24, r17
     f4a:	5f d3       	rcall	.+1726   	; 0x160a <gfx_mono_ssd1306_mask_byte>
     f4c:	14 c0       	rjmp	.+40     	; 0xf76 <gfx_mono_generic_draw_vertical_line+0x9e>
     f4e:	2f 2d       	mov	r18, r15
     f50:	60 2f       	mov	r22, r16
     f52:	81 2f       	mov	r24, r17
     f54:	5a d3       	rcall	.+1716   	; 0x160a <gfx_mono_ssd1306_mask_byte>
     f56:	1f 5f       	subi	r17, 0xFF	; 255
     f58:	1e 15       	cp	r17, r14
     f5a:	40 f4       	brcc	.+16     	; 0xf6c <gfx_mono_generic_draw_vertical_line+0x94>
     f5c:	2f 2d       	mov	r18, r15
     f5e:	4f ef       	ldi	r20, 0xFF	; 255
     f60:	60 2f       	mov	r22, r16
     f62:	81 2f       	mov	r24, r17
     f64:	52 d3       	rcall	.+1700   	; 0x160a <gfx_mono_ssd1306_mask_byte>
     f66:	1f 5f       	subi	r17, 0xFF	; 255
     f68:	1e 15       	cp	r17, r14
     f6a:	c0 f3       	brcs	.-16     	; 0xf5c <gfx_mono_generic_draw_vertical_line+0x84>
     f6c:	2f 2d       	mov	r18, r15
     f6e:	4c 2f       	mov	r20, r28
     f70:	60 2f       	mov	r22, r16
     f72:	8e 2d       	mov	r24, r14
     f74:	4a d3       	rcall	.+1684   	; 0x160a <gfx_mono_ssd1306_mask_byte>
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	08 95       	ret

00000f84 <gfx_mono_generic_draw_line>:
     f84:	9f 92       	push	r9
     f86:	af 92       	push	r10
     f88:	bf 92       	push	r11
     f8a:	cf 92       	push	r12
     f8c:	df 92       	push	r13
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	18 2f       	mov	r17, r24
     f9c:	d6 2e       	mov	r13, r22
     f9e:	48 17       	cp	r20, r24
     fa0:	28 f4       	brcc	.+10     	; 0xfac <gfx_mono_generic_draw_line+0x28>
     fa2:	d2 2e       	mov	r13, r18
     fa4:	26 2f       	mov	r18, r22
     fa6:	81 2f       	mov	r24, r17
     fa8:	14 2f       	mov	r17, r20
     faa:	48 2f       	mov	r20, r24
     fac:	41 1b       	sub	r20, r17
     fae:	e4 2e       	mov	r14, r20
     fb0:	2d 19       	sub	r18, r13
     fb2:	c2 2f       	mov	r28, r18
     fb4:	44 23       	and	r20, r20
     fb6:	24 f4       	brge	.+8      	; 0xfc0 <gfx_mono_generic_draw_line+0x3c>
     fb8:	e1 94       	neg	r14
     fba:	cc 24       	eor	r12, r12
     fbc:	ca 94       	dec	r12
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <gfx_mono_generic_draw_line+0x40>
     fc0:	cc 24       	eor	r12, r12
     fc2:	c3 94       	inc	r12
     fc4:	cc 23       	and	r28, r28
     fc6:	2c f4       	brge	.+10     	; 0xfd2 <gfx_mono_generic_draw_line+0x4e>
     fc8:	c2 2f       	mov	r28, r18
     fca:	c1 95       	neg	r28
     fcc:	bb 24       	eor	r11, r11
     fce:	ba 94       	dec	r11
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <gfx_mono_generic_draw_line+0x52>
     fd2:	bb 24       	eor	r11, r11
     fd4:	b3 94       	inc	r11
     fd6:	ce 15       	cp	r28, r14
     fd8:	d4 f4       	brge	.+52     	; 0x100e <gfx_mono_generic_draw_line+0x8a>
     fda:	ac 2e       	mov	r10, r28
     fdc:	9e 2c       	mov	r9, r14
     fde:	ce 19       	sub	r28, r14
     fe0:	ff 24       	eor	r15, r15
     fe2:	e7 fc       	sbrc	r14, 7
     fe4:	f0 94       	com	r15
     fe6:	ff 20       	and	r15, r15
     fe8:	5c f1       	brlt	.+86     	; 0x1040 <gfx_mono_generic_draw_line+0xbc>
     fea:	d0 e0       	ldi	r29, 0x00	; 0
     fec:	40 2f       	mov	r20, r16
     fee:	6d 2d       	mov	r22, r13
     ff0:	81 2f       	mov	r24, r17
     ff2:	cb d2       	rcall	.+1430   	; 0x158a <gfx_mono_ssd1306_draw_pixel>
     ff4:	cc 23       	and	r28, r28
     ff6:	14 f0       	brlt	.+4      	; 0xffc <gfx_mono_generic_draw_line+0x78>
     ff8:	c9 19       	sub	r28, r9
     ffa:	db 0c       	add	r13, r11
     ffc:	ca 0d       	add	r28, r10
     ffe:	1c 0d       	add	r17, r12
    1000:	df 5f       	subi	r29, 0xFF	; 255
    1002:	2d 2f       	mov	r18, r29
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	e2 16       	cp	r14, r18
    1008:	f3 06       	cpc	r15, r19
    100a:	84 f7       	brge	.-32     	; 0xfec <gfx_mono_generic_draw_line+0x68>
    100c:	19 c0       	rjmp	.+50     	; 0x1040 <gfx_mono_generic_draw_line+0xbc>
    100e:	ae 2c       	mov	r10, r14
    1010:	9c 2e       	mov	r9, r28
    1012:	ec 1a       	sub	r14, r28
    1014:	dd 27       	eor	r29, r29
    1016:	c7 fd       	sbrc	r28, 7
    1018:	d0 95       	com	r29
    101a:	dd 23       	and	r29, r29
    101c:	8c f0       	brlt	.+34     	; 0x1040 <gfx_mono_generic_draw_line+0xbc>
    101e:	f1 2c       	mov	r15, r1
    1020:	40 2f       	mov	r20, r16
    1022:	6d 2d       	mov	r22, r13
    1024:	81 2f       	mov	r24, r17
    1026:	b1 d2       	rcall	.+1378   	; 0x158a <gfx_mono_ssd1306_draw_pixel>
    1028:	ee 20       	and	r14, r14
    102a:	14 f0       	brlt	.+4      	; 0x1030 <gfx_mono_generic_draw_line+0xac>
    102c:	e9 18       	sub	r14, r9
    102e:	1c 0d       	add	r17, r12
    1030:	ea 0c       	add	r14, r10
    1032:	db 0c       	add	r13, r11
    1034:	f3 94       	inc	r15
    1036:	2f 2d       	mov	r18, r15
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	c2 17       	cp	r28, r18
    103c:	d3 07       	cpc	r29, r19
    103e:	84 f7       	brge	.-32     	; 0x1020 <gfx_mono_generic_draw_line+0x9c>
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
    104e:	cf 90       	pop	r12
    1050:	bf 90       	pop	r11
    1052:	af 90       	pop	r10
    1054:	9f 90       	pop	r9
    1056:	08 95       	ret

00001058 <gfx_mono_generic_draw_filled_rect>:
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	d8 2f       	mov	r29, r24
    1064:	14 2f       	mov	r17, r20
    1066:	22 23       	and	r18, r18
    1068:	61 f0       	breq	.+24     	; 0x1082 <gfx_mono_generic_draw_filled_rect+0x2a>
    106a:	c2 2f       	mov	r28, r18
    106c:	ff 24       	eor	r15, r15
    106e:	fa 94       	dec	r15
    1070:	f6 0e       	add	r15, r22
    1072:	6f 2d       	mov	r22, r15
    1074:	6c 0f       	add	r22, r28
    1076:	20 2f       	mov	r18, r16
    1078:	41 2f       	mov	r20, r17
    107a:	8d 2f       	mov	r24, r29
    107c:	ba de       	rcall	.-652    	; 0xdf2 <gfx_mono_generic_draw_horizontal_line>
    107e:	c1 50       	subi	r28, 0x01	; 1
    1080:	c1 f7       	brne	.-16     	; 0x1072 <gfx_mono_generic_draw_filled_rect+0x1a>
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	ff 90       	pop	r15
    108c:	08 95       	ret

0000108e <gfx_mono_generic_draw_filled_circle>:
 * \param  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
    108e:	5f 92       	push	r5
    1090:	6f 92       	push	r6
    1092:	7f 92       	push	r7
    1094:	8f 92       	push	r8
    1096:	9f 92       	push	r9
    1098:	af 92       	push	r10
    109a:	bf 92       	push	r11
    109c:	cf 92       	push	r12
    109e:	df 92       	push	r13
    10a0:	ef 92       	push	r14
    10a2:	ff 92       	push	r15
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	b8 2e       	mov	r11, r24
    10ae:	96 2e       	mov	r9, r22
    10b0:	14 2f       	mov	r17, r20
    10b2:	a2 2e       	mov	r10, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
    10b4:	41 11       	cpse	r20, r1
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <gfx_mono_generic_draw_filled_circle+0x30>
		gfx_mono_draw_pixel(x, y, color);
    10b8:	42 2f       	mov	r20, r18
    10ba:	67 d2       	rcall	.+1230   	; 0x158a <gfx_mono_ssd1306_draw_pixel>
		return;
    10bc:	74 c0       	rjmp	.+232    	; 0x11a6 <gfx_mono_generic_draw_filled_circle+0x118>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
    10be:	c4 2f       	mov	r28, r20
    10c0:	d0 e0       	ldi	r29, 0x00	; 0
    10c2:	cc 0f       	add	r28, r28
    10c4:	dd 1f       	adc	r29, r29
    10c6:	d1 95       	neg	r29
    10c8:	c1 95       	neg	r28
    10ca:	d1 09       	sbc	r29, r1
    10cc:	23 96       	adiw	r28, 0x03	; 3
    10ce:	c6 2e       	mov	r12, r22
    10d0:	d8 2e       	mov	r13, r24
    10d2:	e8 2e       	mov	r14, r24
    10d4:	ff 24       	eor	r15, r15
    10d6:	f3 94       	inc	r15

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
    10d8:	80 2f       	mov	r24, r16
    10da:	83 70       	andi	r24, 0x03	; 3
    10dc:	68 2e       	mov	r6, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
    10de:	80 2f       	mov	r24, r16
    10e0:	8c 70       	andi	r24, 0x0C	; 12
    10e2:	78 2e       	mov	r7, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
    10e4:	80 2f       	mov	r24, r16
    10e6:	80 73       	andi	r24, 0x30	; 48
    10e8:	88 2e       	mov	r8, r24
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
    10ea:	00 7c       	andi	r16, 0xC0	; 192
    10ec:	5e 2c       	mov	r5, r14
    10ee:	5b 18       	sub	r5, r11
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
    10f0:	66 20       	and	r6, r6
    10f2:	69 f0       	breq	.+26     	; 0x110e <gfx_mono_generic_draw_filled_circle+0x80>
			gfx_mono_draw_vertical_line(x + offset_y,
    10f4:	2a 2d       	mov	r18, r10
    10f6:	4f 2d       	mov	r20, r15
    10f8:	6c 2d       	mov	r22, r12
    10fa:	81 2f       	mov	r24, r17
    10fc:	8b 0d       	add	r24, r11
    10fe:	ec de       	rcall	.-552    	; 0xed8 <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
    1100:	2a 2d       	mov	r18, r10
    1102:	41 e0       	ldi	r20, 0x01	; 1
    1104:	41 0f       	add	r20, r17
    1106:	69 2d       	mov	r22, r9
    1108:	61 1b       	sub	r22, r17
    110a:	8e 2d       	mov	r24, r14
    110c:	e5 de       	rcall	.-566    	; 0xed8 <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
    110e:	77 20       	and	r7, r7
    1110:	69 f0       	breq	.+26     	; 0x112c <gfx_mono_generic_draw_filled_circle+0x9e>
			gfx_mono_draw_vertical_line(x - offset_y,
    1112:	2a 2d       	mov	r18, r10
    1114:	4f 2d       	mov	r20, r15
    1116:	6c 2d       	mov	r22, r12
    1118:	8b 2d       	mov	r24, r11
    111a:	81 1b       	sub	r24, r17
    111c:	dd de       	rcall	.-582    	; 0xed8 <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
    111e:	2a 2d       	mov	r18, r10
    1120:	41 e0       	ldi	r20, 0x01	; 1
    1122:	41 0f       	add	r20, r17
    1124:	69 2d       	mov	r22, r9
    1126:	61 1b       	sub	r22, r17
    1128:	8d 2d       	mov	r24, r13
    112a:	d6 de       	rcall	.-596    	; 0xed8 <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
    112c:	88 20       	and	r8, r8
    112e:	61 f0       	breq	.+24     	; 0x1148 <gfx_mono_generic_draw_filled_circle+0xba>
			gfx_mono_draw_vertical_line(x - offset_y,
    1130:	2a 2d       	mov	r18, r10
    1132:	4f 2d       	mov	r20, r15
    1134:	69 2d       	mov	r22, r9
    1136:	8b 2d       	mov	r24, r11
    1138:	81 1b       	sub	r24, r17
    113a:	ce de       	rcall	.-612    	; 0xed8 <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
    113c:	2a 2d       	mov	r18, r10
    113e:	41 e0       	ldi	r20, 0x01	; 1
    1140:	41 0f       	add	r20, r17
    1142:	69 2d       	mov	r22, r9
    1144:	8d 2d       	mov	r24, r13
    1146:	c8 de       	rcall	.-624    	; 0xed8 <gfx_mono_generic_draw_vertical_line>
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
    1148:	00 23       	and	r16, r16
    114a:	61 f0       	breq	.+24     	; 0x1164 <gfx_mono_generic_draw_filled_circle+0xd6>
			gfx_mono_draw_vertical_line(x + offset_y,
    114c:	2a 2d       	mov	r18, r10
    114e:	4f 2d       	mov	r20, r15
    1150:	69 2d       	mov	r22, r9
    1152:	81 2f       	mov	r24, r17
    1154:	8b 0d       	add	r24, r11
    1156:	c0 de       	rcall	.-640    	; 0xed8 <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
    1158:	2a 2d       	mov	r18, r10
    115a:	41 e0       	ldi	r20, 0x01	; 1
    115c:	41 0f       	add	r20, r17
    115e:	69 2d       	mov	r22, r9
    1160:	8e 2d       	mov	r24, r14
    1162:	ba de       	rcall	.-652    	; 0xed8 <gfx_mono_generic_draw_vertical_line>
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
    1164:	dd 23       	and	r29, r29
    1166:	54 f4       	brge	.+20     	; 0x117c <gfx_mono_generic_draw_filled_circle+0xee>
			error += ((offset_x << 2) + 6);
    1168:	e5 2d       	mov	r30, r5
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	ee 0f       	add	r30, r30
    116e:	ff 1f       	adc	r31, r31
    1170:	ee 0f       	add	r30, r30
    1172:	ff 1f       	adc	r31, r31
    1174:	36 96       	adiw	r30, 0x06	; 6
    1176:	ce 0f       	add	r28, r30
    1178:	df 1f       	adc	r29, r31
    117a:	0c c0       	rjmp	.+24     	; 0x1194 <gfx_mono_generic_draw_filled_circle+0x106>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
    117c:	e5 2d       	mov	r30, r5
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	e1 1b       	sub	r30, r17
    1182:	f1 09       	sbc	r31, r1
    1184:	ee 0f       	add	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	ee 0f       	add	r30, r30
    118a:	ff 1f       	adc	r31, r31
    118c:	3a 96       	adiw	r30, 0x0a	; 10
    118e:	ce 0f       	add	r28, r30
    1190:	df 1f       	adc	r29, r31
			--offset_y;
    1192:	11 50       	subi	r17, 0x01	; 1
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	8f 0d       	add	r24, r15
    1198:	e3 94       	inc	r14
    119a:	da 94       	dec	r13
    119c:	ca 94       	dec	r12
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
    119e:	1f 15       	cp	r17, r15
    11a0:	10 f0       	brcs	.+4      	; 0x11a6 <gfx_mono_generic_draw_filled_circle+0x118>
    11a2:	f8 2e       	mov	r15, r24
    11a4:	a3 cf       	rjmp	.-186    	; 0x10ec <gfx_mono_generic_draw_filled_circle+0x5e>
		}

		/* Next X. */
		++offset_x;
	}
}
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	df 90       	pop	r13
    11b4:	cf 90       	pop	r12
    11b6:	bf 90       	pop	r11
    11b8:	af 90       	pop	r10
    11ba:	9f 90       	pop	r9
    11bc:	8f 90       	pop	r8
    11be:	7f 90       	pop	r7
    11c0:	6f 90       	pop	r6
    11c2:	5f 90       	pop	r5
    11c4:	08 95       	ret

000011c6 <gfx_mono_generic_put_bitmap>:
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
		gfx_coord_t y)
{
    11c6:	bf 92       	push	r11
    11c8:	cf 92       	push	r12
    11ca:	df 92       	push	r13
    11cc:	ef 92       	push	r14
    11ce:	ff 92       	push	r15
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	ec 01       	movw	r28, r24
    11da:	f6 2e       	mov	r15, r22
	gfx_coord_t num_pages = bitmap->height / 8;
    11dc:	e9 80       	ldd	r14, Y+1	; 0x01
    11de:	e6 94       	lsr	r14
    11e0:	e6 94       	lsr	r14
    11e2:	e6 94       	lsr	r14
	gfx_coord_t page = y / 8;
    11e4:	d4 2e       	mov	r13, r20
    11e6:	d6 94       	lsr	r13
    11e8:	d6 94       	lsr	r13
    11ea:	d6 94       	lsr	r13
	gfx_coord_t column;
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	88 23       	and	r24, r24
    11f0:	49 f0       	breq	.+18     	; 0x1204 <gfx_mono_generic_put_bitmap+0x3e>
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	09 f0       	breq	.+2      	; 0x11f8 <gfx_mono_generic_put_bitmap+0x32>
    11f6:	3d c0       	rjmp	.+122    	; 0x1272 <gfx_mono_generic_put_bitmap+0xac>
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
    11f8:	ee 20       	and	r14, r14
    11fa:	09 f4       	brne	.+2      	; 0x11fe <gfx_mono_generic_put_bitmap+0x38>
    11fc:	3a c0       	rjmp	.+116    	; 0x1272 <gfx_mono_generic_put_bitmap+0xac>
    11fe:	00 e0       	ldi	r16, 0x00	; 0
    1200:	10 e0       	ldi	r17, 0x00	; 0
    1202:	1c c0       	rjmp	.+56     	; 0x123c <gfx_mono_generic_put_bitmap+0x76>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    1204:	e1 10       	cpse	r14, r1
    1206:	21 c0       	rjmp	.+66     	; 0x124a <gfx_mono_generic_put_bitmap+0x84>
    1208:	34 c0       	rjmp	.+104    	; 0x1272 <gfx_mono_generic_put_bitmap+0xac>

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
				temp = PROGMEM_READ_BYTE(bitmap->data.progmem
    120a:	90 9f       	mul	r25, r16
    120c:	f0 01       	movw	r30, r0
    120e:	91 9f       	mul	r25, r17
    1210:	f0 0d       	add	r31, r0
    1212:	11 24       	eor	r1, r1
    1214:	ec 0d       	add	r30, r12
    1216:	f1 1d       	adc	r31, r1
    1218:	2b 81       	ldd	r18, Y+3	; 0x03
    121a:	3c 81       	ldd	r19, Y+4	; 0x04
    121c:	e2 0f       	add	r30, r18
    121e:	f3 1f       	adc	r31, r19
    1220:	44 91       	lpm	r20, Z
    1222:	6c 2d       	mov	r22, r12
    1224:	6f 0d       	add	r22, r15
						+ (i * bitmap->width)
						+ column);
				gfx_mono_put_byte(i + page, column + x, temp);
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	8b 2d       	mov	r24, r11
    122a:	46 d1       	rcall	.+652    	; 0x14b8 <gfx_mono_ssd1306_put_byte>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
    122c:	c3 94       	inc	r12
    122e:	98 81       	ld	r25, Y
    1230:	c9 16       	cp	r12, r25
    1232:	58 f3       	brcs	.-42     	; 0x120a <gfx_mono_generic_put_bitmap+0x44>
    1234:	0f 5f       	subi	r16, 0xFF	; 255
    1236:	1f 4f       	sbci	r17, 0xFF	; 255
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
    1238:	0e 15       	cp	r16, r14
    123a:	d8 f4       	brcc	.+54     	; 0x1272 <gfx_mono_generic_put_bitmap+0xac>
			for (column = 0; column < bitmap->width; column++) {
    123c:	98 81       	ld	r25, Y
    123e:	99 23       	and	r25, r25
    1240:	c9 f3       	breq	.-14     	; 0x1234 <gfx_mono_generic_put_bitmap+0x6e>
    1242:	c1 2c       	mov	r12, r1
    1244:	bd 2c       	mov	r11, r13
    1246:	b0 0e       	add	r11, r16
    1248:	e0 cf       	rjmp	.-64     	; 0x120a <gfx_mono_generic_put_bitmap+0x44>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    124a:	00 e0       	ldi	r16, 0x00	; 0
    124c:	10 e0       	ldi	r17, 0x00	; 0
			gfx_mono_put_page(bitmap->data.pixmap
    124e:	28 81       	ld	r18, Y
    1250:	6d 2d       	mov	r22, r13
    1252:	60 0f       	add	r22, r16
    1254:	20 9f       	mul	r18, r16
    1256:	c0 01       	movw	r24, r0
    1258:	21 9f       	mul	r18, r17
    125a:	90 0d       	add	r25, r0
    125c:	11 24       	eor	r1, r1
    125e:	eb 81       	ldd	r30, Y+3	; 0x03
    1260:	fc 81       	ldd	r31, Y+4	; 0x04
    1262:	4f 2d       	mov	r20, r15
    1264:	8e 0f       	add	r24, r30
    1266:	9f 1f       	adc	r25, r31
    1268:	c3 d0       	rcall	.+390    	; 0x13f0 <gfx_mono_ssd1306_put_page>
    126a:	0f 5f       	subi	r16, 0xFF	; 255
    126c:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    126e:	0e 15       	cp	r16, r14
    1270:	70 f3       	brcs	.-36     	; 0x124e <gfx_mono_generic_put_bitmap+0x88>
		break;

	default:
		break;
	}
}
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	1f 91       	pop	r17
    1278:	0f 91       	pop	r16
    127a:	ff 90       	pop	r15
    127c:	ef 90       	pop	r14
    127e:	df 90       	pop	r13
    1280:	cf 90       	pop	r12
    1282:	bf 90       	pop	r11
    1284:	08 95       	ret

00001286 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    1286:	af 92       	push	r10
    1288:	bf 92       	push	r11
    128a:	cf 92       	push	r12
    128c:	df 92       	push	r13
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	c8 2f       	mov	r28, r24
    129c:	d6 2e       	mov	r13, r22
    129e:	a4 2e       	mov	r10, r20
    12a0:	79 01       	movw	r14, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    12a2:	00 e0       	ldi	r16, 0x00	; 0
    12a4:	f9 01       	movw	r30, r18
    12a6:	24 81       	ldd	r18, Z+4	; 0x04
    12a8:	43 81       	ldd	r20, Z+3	; 0x03
    12aa:	6a 2d       	mov	r22, r10
    12ac:	8d 2d       	mov	r24, r13
    12ae:	d4 de       	rcall	.-600    	; 0x1058 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    12b0:	f7 01       	movw	r30, r14
    12b2:	90 81       	ld	r25, Z
    12b4:	91 11       	cpse	r25, r1
    12b6:	39 c0       	rjmp	.+114    	; 0x132a <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    12b8:	83 81       	ldd	r24, Z+3	; 0x03
    12ba:	a8 2f       	mov	r26, r24
    12bc:	a6 95       	lsr	r26
    12be:	a6 95       	lsr	r26
    12c0:	a6 95       	lsr	r26
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    12c2:	87 70       	andi	r24, 0x07	; 7
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <gfx_mono_draw_char+0x42>
		char_row_size++;
    12c6:	af 5f       	subi	r26, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    12c8:	f7 01       	movw	r30, r14
    12ca:	c4 80       	ldd	r12, Z+4	; 0x04
    12cc:	ac 9d       	mul	r26, r12
    12ce:	d0 01       	movw	r26, r0
    12d0:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
    12d2:	ec 2f       	mov	r30, r28
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	e7 01       	movw	r28, r14
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	e8 1b       	sub	r30, r24
    12dc:	f1 09       	sbc	r31, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
    12de:	ae 9f       	mul	r26, r30
    12e0:	90 01       	movw	r18, r0
    12e2:	af 9f       	mul	r26, r31
    12e4:	30 0d       	add	r19, r0
    12e6:	be 9f       	mul	r27, r30
    12e8:	30 0d       	add	r19, r0
    12ea:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    12ec:	09 80       	ldd	r0, Y+1	; 0x01
    12ee:	da 81       	ldd	r29, Y+2	; 0x02
    12f0:	c0 2d       	mov	r28, r0
    12f2:	c2 0f       	add	r28, r18
    12f4:	d3 1f       	adc	r29, r19
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    12f6:	f7 01       	movw	r30, r14
    12f8:	b3 80       	ldd	r11, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    12fa:	bb 20       	and	r11, r11
    12fc:	99 f0       	breq	.+38     	; 0x1324 <gfx_mono_draw_char+0x9e>
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
    12fe:	00 e0       	ldi	r16, 0x00	; 0
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    1300:	10 e0       	ldi	r17, 0x00	; 0
    1302:	81 2f       	mov	r24, r17
    1304:	8d 0d       	add	r24, r13
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    1306:	91 2f       	mov	r25, r17
    1308:	97 70       	andi	r25, 0x07	; 7
    130a:	19 f4       	brne	.+6      	; 0x1312 <gfx_mono_draw_char+0x8c>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    130c:	fe 01       	movw	r30, r28
    130e:	04 91       	lpm	r16, Z
				glyph_data++;
    1310:	21 96       	adiw	r28, 0x01	; 1
			}

			if ((glyph_byte & 0x80)) {
    1312:	00 23       	and	r16, r16
    1314:	1c f4       	brge	.+6      	; 0x131c <gfx_mono_draw_char+0x96>
				gfx_mono_draw_pixel(inc_x, inc_y,
    1316:	41 e0       	ldi	r20, 0x01	; 1
    1318:	6a 2d       	mov	r22, r10
    131a:	37 d1       	rcall	.+622    	; 0x158a <gfx_mono_ssd1306_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    131c:	00 0f       	add	r16, r16

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    131e:	1f 5f       	subi	r17, 0xFF	; 255
    1320:	1b 11       	cpse	r17, r11
    1322:	ef cf       	rjmp	.-34     	; 0x1302 <gfx_mono_draw_char+0x7c>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    1324:	a3 94       	inc	r10
		inc_x = x;
		rows_left--;
    1326:	ca 94       	dec	r12
	} while (rows_left > 0);
    1328:	31 f7       	brne	.-52     	; 0x12f6 <gfx_mono_draw_char+0x70>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	bf 90       	pop	r11
    133c:	af 90       	pop	r10
    133e:	08 95       	ret

00001340 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    1340:	df 92       	push	r13
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	e4 2e       	mov	r14, r20
    1350:	89 01       	movw	r16, r18
    1352:	ec 01       	movw	r28, r24
    1354:	f6 2e       	mov	r15, r22

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1356:	d6 2e       	mov	r13, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    1358:	89 91       	ld	r24, Y+
    135a:	8a 30       	cpi	r24, 0x0A	; 10
    135c:	31 f4       	brne	.+12     	; 0x136a <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    135e:	f8 01       	movw	r30, r16
    1360:	84 81       	ldd	r24, Z+4	; 0x04
    1362:	8f 5f       	subi	r24, 0xFF	; 255
    1364:	e8 0e       	add	r14, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1366:	fd 2c       	mov	r15, r13
    1368:	09 c0       	rjmp	.+18     	; 0x137c <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    136a:	8d 30       	cpi	r24, 0x0D	; 13
    136c:	39 f0       	breq	.+14     	; 0x137c <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    136e:	98 01       	movw	r18, r16
    1370:	4e 2d       	mov	r20, r14
    1372:	6f 2d       	mov	r22, r15
    1374:	88 df       	rcall	.-240    	; 0x1286 <gfx_mono_draw_char>
			x += font->width;
    1376:	f8 01       	movw	r30, r16
    1378:	83 81       	ldd	r24, Z+3	; 0x03
    137a:	f8 0e       	add	r15, r24
		}
	} while (*(++str));
    137c:	88 81       	ld	r24, Y
    137e:	81 11       	cpse	r24, r1
    1380:	eb cf       	rjmp	.-42     	; 0x1358 <gfx_mono_draw_string+0x18>
}
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	df 90       	pop	r13
    1390:	08 95       	ret

00001392 <ssd1306_write_command>:
 */
void gfx_mono_ssd1306_get_page(gfx_mono_color_t *data, gfx_coord_t page,
		gfx_coord_t column, gfx_coord_t width)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_framebuffer_get_page(data, page, column, width);
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	1f 92       	push	r1
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	18 2f       	mov	r17, r24
    13a0:	89 e7       	ldi	r24, 0x79	; 121
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	be 01       	movw	r22, r28
    13a6:	6f 5f       	subi	r22, 0xFF	; 255
    13a8:	7f 4f       	sbci	r23, 0xFF	; 255
    13aa:	80 ec       	ldi	r24, 0xC0	; 192
    13ac:	98 e0       	ldi	r25, 0x08	; 8
    13ae:	9f d1       	rcall	.+830    	; 0x16ee <usart_spi_select_device>
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	e0 ee       	ldi	r30, 0xE0	; 224
    13b4:	f7 e0       	ldi	r31, 0x07	; 7
    13b6:	86 83       	std	Z+6, r24	; 0x06
    13b8:	e0 ec       	ldi	r30, 0xC0	; 192
    13ba:	f8 e0       	ldi	r31, 0x08	; 8
    13bc:	91 81       	ldd	r25, Z+1	; 0x01
    13be:	95 ff       	sbrs	r25, 5
    13c0:	fd cf       	rjmp	.-6      	; 0x13bc <ssd1306_write_command+0x2a>
    13c2:	10 93 c0 08 	sts	0x08C0, r17
    13c6:	e0 ec       	ldi	r30, 0xC0	; 192
    13c8:	f8 e0       	ldi	r31, 0x08	; 8
    13ca:	81 81       	ldd	r24, Z+1	; 0x01
    13cc:	86 ff       	sbrs	r24, 6
    13ce:	fd cf       	rjmp	.-6      	; 0x13ca <ssd1306_write_command+0x38>
    13d0:	e0 ec       	ldi	r30, 0xC0	; 192
    13d2:	f8 e0       	ldi	r31, 0x08	; 8
    13d4:	80 e4       	ldi	r24, 0x40	; 64
    13d6:	81 83       	std	Z+1, r24	; 0x01
    13d8:	80 81       	ld	r24, Z
    13da:	be 01       	movw	r22, r28
    13dc:	6f 5f       	subi	r22, 0xFF	; 255
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	80 ec       	ldi	r24, 0xC0	; 192
    13e2:	98 e0       	ldi	r25, 0x08	; 8
    13e4:	9a d1       	rcall	.+820    	; 0x171a <usart_spi_deselect_device>
    13e6:	0f 90       	pop	r0
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	1f 91       	pop	r17
    13ee:	08 95       	ret

000013f0 <gfx_mono_ssd1306_put_page>:
    13f0:	7f 92       	push	r7
    13f2:	8f 92       	push	r8
    13f4:	9f 92       	push	r9
    13f6:	af 92       	push	r10
    13f8:	bf 92       	push	r11
    13fa:	cf 92       	push	r12
    13fc:	df 92       	push	r13
    13fe:	ef 92       	push	r14
    1400:	ff 92       	push	r15
    1402:	0f 93       	push	r16
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	1f 92       	push	r1
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	d8 2e       	mov	r13, r24
    1412:	09 2f       	mov	r16, r25
    1414:	f6 2e       	mov	r15, r22
    1416:	14 2f       	mov	r17, r20
    1418:	b2 2e       	mov	r11, r18
    141a:	ba dc       	rcall	.-1676   	; 0xd90 <gfx_mono_framebuffer_put_page>
    141c:	8f 2d       	mov	r24, r15
    141e:	87 70       	andi	r24, 0x07	; 7
    1420:	80 6b       	ori	r24, 0xB0	; 176
    1422:	b7 df       	rcall	.-146    	; 0x1392 <ssd1306_write_command>
    1424:	81 2f       	mov	r24, r17
    1426:	8f 77       	andi	r24, 0x7F	; 127
    1428:	82 95       	swap	r24
    142a:	8f 70       	andi	r24, 0x0F	; 15
    142c:	80 61       	ori	r24, 0x10	; 16
    142e:	b1 df       	rcall	.-158    	; 0x1392 <ssd1306_write_command>
    1430:	81 2f       	mov	r24, r17
    1432:	8f 70       	andi	r24, 0x0F	; 15
    1434:	ae df       	rcall	.-164    	; 0x1392 <ssd1306_write_command>
    1436:	ed 2c       	mov	r14, r13
    1438:	f0 2e       	mov	r15, r16
    143a:	0f 2e       	mov	r0, r31
    143c:	f9 e7       	ldi	r31, 0x79	; 121
    143e:	7f 2e       	mov	r7, r31
    1440:	f0 2d       	mov	r31, r0
    1442:	00 ec       	ldi	r16, 0xC0	; 192
    1444:	18 e0       	ldi	r17, 0x08	; 8
    1446:	0f 2e       	mov	r0, r31
    1448:	f0 ee       	ldi	r31, 0xE0	; 224
    144a:	cf 2e       	mov	r12, r31
    144c:	f7 e0       	ldi	r31, 0x07	; 7
    144e:	df 2e       	mov	r13, r31
    1450:	f0 2d       	mov	r31, r0
    1452:	aa 24       	eor	r10, r10
    1454:	a3 94       	inc	r10
    1456:	68 94       	set
    1458:	88 24       	eor	r8, r8
    145a:	86 f8       	bld	r8, 6
    145c:	f7 01       	movw	r30, r14
    145e:	91 90       	ld	r9, Z+
    1460:	7f 01       	movw	r14, r30
    1462:	79 82       	std	Y+1, r7	; 0x01
    1464:	be 01       	movw	r22, r28
    1466:	6f 5f       	subi	r22, 0xFF	; 255
    1468:	7f 4f       	sbci	r23, 0xFF	; 255
    146a:	c8 01       	movw	r24, r16
    146c:	40 d1       	rcall	.+640    	; 0x16ee <usart_spi_select_device>
    146e:	f6 01       	movw	r30, r12
    1470:	a5 82       	std	Z+5, r10	; 0x05
    1472:	f8 01       	movw	r30, r16
    1474:	81 81       	ldd	r24, Z+1	; 0x01
    1476:	85 ff       	sbrs	r24, 5
    1478:	fc cf       	rjmp	.-8      	; 0x1472 <gfx_mono_ssd1306_put_page+0x82>
    147a:	90 82       	st	Z, r9
    147c:	f8 01       	movw	r30, r16
    147e:	81 81       	ldd	r24, Z+1	; 0x01
    1480:	86 ff       	sbrs	r24, 6
    1482:	fc cf       	rjmp	.-8      	; 0x147c <gfx_mono_ssd1306_put_page+0x8c>
    1484:	81 82       	std	Z+1, r8	; 0x01
    1486:	80 81       	ld	r24, Z
    1488:	f6 01       	movw	r30, r12
    148a:	a6 82       	std	Z+6, r10	; 0x06
    148c:	be 01       	movw	r22, r28
    148e:	6f 5f       	subi	r22, 0xFF	; 255
    1490:	7f 4f       	sbci	r23, 0xFF	; 255
    1492:	c8 01       	movw	r24, r16
    1494:	42 d1       	rcall	.+644    	; 0x171a <usart_spi_deselect_device>
    1496:	ba 94       	dec	r11
    1498:	09 f7       	brne	.-62     	; 0x145c <gfx_mono_ssd1306_put_page+0x6c>
    149a:	0f 90       	pop	r0
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	1f 91       	pop	r17
    14a2:	0f 91       	pop	r16
    14a4:	ff 90       	pop	r15
    14a6:	ef 90       	pop	r14
    14a8:	df 90       	pop	r13
    14aa:	cf 90       	pop	r12
    14ac:	bf 90       	pop	r11
    14ae:	af 90       	pop	r10
    14b0:	9f 90       	pop	r9
    14b2:	8f 90       	pop	r8
    14b4:	7f 90       	pop	r7
    14b6:	08 95       	ret

000014b8 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
 */
void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	1f 92       	push	r1
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	f8 2e       	mov	r15, r24
    14ca:	16 2f       	mov	r17, r22
    14cc:	04 2f       	mov	r16, r20
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
    14ce:	21 11       	cpse	r18, r1
    14d0:	03 c0       	rjmp	.+6      	; 0x14d8 <gfx_mono_ssd1306_put_byte+0x20>
    14d2:	80 dc       	rcall	.-1792   	; 0xdd4 <gfx_mono_framebuffer_get_byte>
    14d4:	80 17       	cp	r24, r16
    14d6:	c1 f1       	breq	.+112    	; 0x1548 <gfx_mono_ssd1306_put_byte+0x90>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
    14d8:	40 2f       	mov	r20, r16
    14da:	61 2f       	mov	r22, r17
    14dc:	8f 2d       	mov	r24, r15
    14de:	6b dc       	rcall	.-1834   	; 0xdb6 <gfx_mono_framebuffer_put_byte>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    14e0:	8f 2d       	mov	r24, r15
    14e2:	87 70       	andi	r24, 0x07	; 7
    14e4:	80 6b       	ori	r24, 0xB0	; 176
    14e6:	55 df       	rcall	.-342    	; 0x1392 <ssd1306_write_command>
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
    14e8:	81 2f       	mov	r24, r17
    14ea:	8f 77       	andi	r24, 0x7F	; 127
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
    14ec:	82 95       	swap	r24
    14ee:	8f 70       	andi	r24, 0x0F	; 15
    14f0:	80 61       	ori	r24, 0x10	; 16
    14f2:	4f df       	rcall	.-354    	; 0x1392 <ssd1306_write_command>
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
    14f4:	81 2f       	mov	r24, r17
    14f6:	8f 70       	andi	r24, 0x0F	; 15
    14f8:	4c df       	rcall	.-360    	; 0x1392 <ssd1306_write_command>
 * \param data the data to write
 */
static inline void ssd1306_write_data(uint8_t data)
{
#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = SSD1306_CS_PIN};
    14fa:	89 e7       	ldi	r24, 0x79	; 121
    14fc:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(SSD1306_USART_SPI, &device);
    14fe:	be 01       	movw	r22, r28
    1500:	6f 5f       	subi	r22, 0xFF	; 255
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	80 ec       	ldi	r24, 0xC0	; 192
    1506:	98 e0       	ldi	r25, 0x08	; 8
    1508:	f2 d0       	rcall	.+484    	; 0x16ee <usart_spi_select_device>
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	e0 ee       	ldi	r30, 0xE0	; 224
    150e:	f7 e0       	ldi	r31, 0x07	; 7
    1510:	85 83       	std	Z+5, r24	; 0x05
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1512:	e0 ec       	ldi	r30, 0xC0	; 192
    1514:	f8 e0       	ldi	r31, 0x08	; 8
    1516:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1518:	85 ff       	sbrs	r24, 5
    151a:	fd cf       	rjmp	.-6      	; 0x1516 <gfx_mono_ssd1306_put_byte+0x5e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    151c:	00 93 c0 08 	sts	0x08C0, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1520:	e0 ec       	ldi	r30, 0xC0	; 192
    1522:	f8 e0       	ldi	r31, 0x08	; 8
    1524:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1526:	86 ff       	sbrs	r24, 6
    1528:	fd cf       	rjmp	.-6      	; 0x1524 <gfx_mono_ssd1306_put_byte+0x6c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    152a:	e0 ec       	ldi	r30, 0xC0	; 192
    152c:	f8 e0       	ldi	r31, 0x08	; 8
    152e:	80 e4       	ldi	r24, 0x40	; 64
    1530:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1532:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	e0 ee       	ldi	r30, 0xE0	; 224
    1538:	f7 e0       	ldi	r31, 0x07	; 7
    153a:	86 83       	std	Z+6, r24	; 0x06
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
    153c:	be 01       	movw	r22, r28
    153e:	6f 5f       	subi	r22, 0xFF	; 255
    1540:	7f 4f       	sbci	r23, 0xFF	; 255
    1542:	80 ec       	ldi	r24, 0xC0	; 192
    1544:	98 e0       	ldi	r25, 0x08	; 8
    1546:	e9 d0       	rcall	.+466    	; 0x171a <usart_spi_deselect_device>

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
}
    1548:	0f 90       	pop	r0
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	1f 91       	pop	r17
    1550:	0f 91       	pop	r16
    1552:	ff 90       	pop	r15
    1554:	08 95       	ret

00001556 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
    155a:	8a e4       	ldi	r24, 0x4A	; 74
    155c:	91 e2       	ldi	r25, 0x21	; 33
    155e:	13 dc       	rcall	.-2010   	; 0xd86 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
    1560:	53 db       	rcall	.-2394   	; 0xc08 <ssd1306_init>
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(address));
    1562:	80 e4       	ldi	r24, 0x40	; 64
    1564:	16 df       	rcall	.-468    	; 0x1392 <ssd1306_write_command>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    1566:	d0 e0       	ldi	r29, 0x00	; 0
    1568:	0b c0       	rjmp	.+22     	; 0x1580 <gfx_mono_ssd1306_init+0x2a>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
    156a:	21 e0       	ldi	r18, 0x01	; 1
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	6c 2f       	mov	r22, r28
    1570:	8d 2f       	mov	r24, r29
    1572:	a2 df       	rcall	.-188    	; 0x14b8 <gfx_mono_ssd1306_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    1574:	cf 5f       	subi	r28, 0xFF	; 255
    1576:	c0 38       	cpi	r28, 0x80	; 128
    1578:	c1 f7       	brne	.-16     	; 0x156a <gfx_mono_ssd1306_init+0x14>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    157a:	df 5f       	subi	r29, 0xFF	; 255
    157c:	d4 30       	cpi	r29, 0x04	; 4
    157e:	11 f0       	breq	.+4      	; 0x1584 <gfx_mono_ssd1306_init+0x2e>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
    1580:	c0 e0       	ldi	r28, 0x00	; 0
    1582:	f3 cf       	rjmp	.-26     	; 0x156a <gfx_mono_ssd1306_init+0x14>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
		}
	}
}
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	08 95       	ret

0000158a <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
    158a:	ff 92       	push	r15
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	18 2f       	mov	r17, r24
    1596:	04 2f       	mov	r16, r20
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
    1598:	88 23       	and	r24, r24
    159a:	7c f1       	brlt	.+94     	; 0x15fa <gfx_mono_ssd1306_draw_pixel+0x70>
    159c:	60 32       	cpi	r22, 0x20	; 32
    159e:	68 f5       	brcc	.+90     	; 0x15fa <gfx_mono_ssd1306_draw_pixel+0x70>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
    15a0:	f6 2e       	mov	r15, r22
    15a2:	f6 94       	lsr	r15
    15a4:	f6 94       	lsr	r15
    15a6:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
    15a8:	2f 2d       	mov	r18, r15
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	31 95       	neg	r19
    15ae:	21 95       	neg	r18
    15b0:	31 09       	sbc	r19, r1
    15b2:	22 0f       	add	r18, r18
    15b4:	33 1f       	adc	r19, r19
    15b6:	22 0f       	add	r18, r18
    15b8:	33 1f       	adc	r19, r19
    15ba:	22 0f       	add	r18, r18
    15bc:	33 1f       	adc	r19, r19
    15be:	26 0f       	add	r18, r22
    15c0:	31 1d       	adc	r19, r1
    15c2:	e1 e0       	ldi	r30, 0x01	; 1
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	ef 01       	movw	r28, r30
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <gfx_mono_ssd1306_draw_pixel+0x44>
    15ca:	cc 0f       	add	r28, r28
    15cc:	dd 1f       	adc	r29, r29
    15ce:	2a 95       	dec	r18
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <gfx_mono_ssd1306_draw_pixel+0x40>
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    15d2:	68 2f       	mov	r22, r24
    15d4:	8f 2d       	mov	r24, r15
    15d6:	fe db       	rcall	.-2052   	; 0xdd4 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
    15d8:	01 30       	cpi	r16, 0x01	; 1
    15da:	21 f0       	breq	.+8      	; 0x15e4 <gfx_mono_ssd1306_draw_pixel+0x5a>
    15dc:	28 f0       	brcs	.+10     	; 0x15e8 <gfx_mono_ssd1306_draw_pixel+0x5e>
    15de:	02 30       	cpi	r16, 0x02	; 2
    15e0:	31 f0       	breq	.+12     	; 0x15ee <gfx_mono_ssd1306_draw_pixel+0x64>
    15e2:	06 c0       	rjmp	.+12     	; 0x15f0 <gfx_mono_ssd1306_draw_pixel+0x66>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
    15e4:	8c 2b       	or	r24, r28
		break;
    15e6:	04 c0       	rjmp	.+8      	; 0x15f0 <gfx_mono_ssd1306_draw_pixel+0x66>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
    15e8:	c0 95       	com	r28
    15ea:	8c 23       	and	r24, r28
		break;
    15ec:	01 c0       	rjmp	.+2      	; 0x15f0 <gfx_mono_ssd1306_draw_pixel+0x66>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
    15ee:	8c 27       	eor	r24, r28

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	48 2f       	mov	r20, r24
    15f4:	61 2f       	mov	r22, r17
    15f6:	8f 2d       	mov	r24, r15
    15f8:	5f df       	rcall	.-322    	; 0x14b8 <gfx_mono_ssd1306_put_byte>
}
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	ff 90       	pop	r15
    1604:	08 95       	ret

00001606 <gfx_mono_ssd1306_get_byte>:
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    1606:	e6 cb       	rjmp	.-2100   	; 0xdd4 <gfx_mono_framebuffer_get_byte>
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
    1608:	08 95       	ret

0000160a <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	d8 2f       	mov	r29, r24
    1614:	16 2f       	mov	r17, r22
    1616:	04 2f       	mov	r16, r20
    1618:	c2 2f       	mov	r28, r18
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    161a:	dc db       	rcall	.-2120   	; 0xdd4 <gfx_mono_framebuffer_get_byte>
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
    161c:	c1 30       	cpi	r28, 0x01	; 1
    161e:	21 f0       	breq	.+8      	; 0x1628 <gfx_mono_ssd1306_mask_byte+0x1e>
    1620:	28 f0       	brcs	.+10     	; 0x162c <gfx_mono_ssd1306_mask_byte+0x22>
    1622:	c2 30       	cpi	r28, 0x02	; 2
    1624:	31 f0       	breq	.+12     	; 0x1632 <gfx_mono_ssd1306_mask_byte+0x28>
    1626:	06 c0       	rjmp	.+12     	; 0x1634 <gfx_mono_ssd1306_mask_byte+0x2a>
	case GFX_PIXEL_SET:
		temp |= pixel_mask;
    1628:	80 2b       	or	r24, r16
		break;
    162a:	04 c0       	rjmp	.+8      	; 0x1634 <gfx_mono_ssd1306_mask_byte+0x2a>

	case GFX_PIXEL_CLR:
		temp &= ~pixel_mask;
    162c:	00 95       	com	r16
    162e:	80 23       	and	r24, r16
		break;
    1630:	01 c0       	rjmp	.+2      	; 0x1634 <gfx_mono_ssd1306_mask_byte+0x2a>

	case GFX_PIXEL_XOR:
		temp ^= pixel_mask;
    1632:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	48 2f       	mov	r20, r24
    1638:	61 2f       	mov	r22, r17
    163a:	8d 2f       	mov	r24, r29
    163c:	3d df       	rcall	.-390    	; 0x14b8 <gfx_mono_ssd1306_put_byte>
}
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	08 95       	ret

00001648 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	fc 01       	movw	r30, r24
    164e:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1654:	c6 2f       	mov	r28, r22
    1656:	d0 e0       	ldi	r29, 0x00	; 0
    1658:	de 01       	movw	r26, r28
    165a:	02 2e       	mov	r0, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <ioport_configure_port_pin+0x1a>
    165e:	b5 95       	asr	r27
    1660:	a7 95       	ror	r26
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <ioport_configure_port_pin+0x16>
    1666:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1668:	50 83       	st	Z, r21
    166a:	2f 5f       	subi	r18, 0xFF	; 255
    166c:	3f 4f       	sbci	r19, 0xFF	; 255
    166e:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1670:	28 30       	cpi	r18, 0x08	; 8
    1672:	31 05       	cpc	r19, r1
    1674:	89 f7       	brne	.-30     	; 0x1658 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1676:	40 ff       	sbrs	r20, 0
    1678:	0a c0       	rjmp	.+20     	; 0x168e <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    167a:	41 ff       	sbrs	r20, 1
    167c:	03 c0       	rjmp	.+6      	; 0x1684 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    167e:	fc 01       	movw	r30, r24
    1680:	65 83       	std	Z+5, r22	; 0x05
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1684:	fc 01       	movw	r30, r24
    1686:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1688:	fc 01       	movw	r30, r24
    168a:	61 83       	std	Z+1, r22	; 0x01
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    168e:	fc 01       	movw	r30, r24
    1690:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	08 95       	ret

00001698 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    1698:	80 3c       	cpi	r24, 0xC0	; 192
    169a:	28 e0       	ldi	r18, 0x08	; 8
    169c:	92 07       	cpc	r25, r18
    169e:	21 f4       	brne	.+8      	; 0x16a8 <usart_spi_init+0x10>
    16a0:	60 e1       	ldi	r22, 0x10	; 16
    16a2:	83 e0       	ldi	r24, 0x03	; 3
    16a4:	4d cb       	rjmp	.-2406   	; 0xd40 <sysclk_enable_module>
    16a6:	08 95       	ret
    16a8:	80 3c       	cpi	r24, 0xC0	; 192
    16aa:	99 40       	sbci	r25, 0x09	; 9
    16ac:	19 f4       	brne	.+6      	; 0x16b4 <usart_spi_init+0x1c>
    16ae:	60 e1       	ldi	r22, 0x10	; 16
    16b0:	84 e0       	ldi	r24, 0x04	; 4
    16b2:	46 cb       	rjmp	.-2420   	; 0xd40 <sysclk_enable_module>
    16b4:	08 95       	ret

000016b6 <usart_spi_setup_device>:
    16b6:	0f 93       	push	r16
    16b8:	1f 93       	push	r17
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	26 97       	sbiw	r28, 0x06	; 6
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	09 83       	std	Y+1, r16	; 0x01
    16ca:	1a 83       	std	Y+2, r17	; 0x02
    16cc:	2b 83       	std	Y+3, r18	; 0x03
    16ce:	3c 83       	std	Y+4, r19	; 0x04
    16d0:	4d 83       	std	Y+5, r20	; 0x05
    16d2:	1e 82       	std	Y+6, r1	; 0x06
    16d4:	be 01       	movw	r22, r28
    16d6:	6f 5f       	subi	r22, 0xFF	; 255
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255
    16da:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <usart_init_spi>
    16de:	26 96       	adiw	r28, 0x06	; 6
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	08 95       	ret

000016ee <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    16ee:	fb 01       	movw	r30, r22
    16f0:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    16f2:	e8 2f       	mov	r30, r24
    16f4:	e6 95       	lsr	r30
    16f6:	e6 95       	lsr	r30
    16f8:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    16fa:	40 e2       	ldi	r20, 0x20	; 32
    16fc:	e4 9f       	mul	r30, r20
    16fe:	f0 01       	movw	r30, r0
    1700:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1702:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1704:	87 70       	andi	r24, 0x07	; 7
    1706:	21 e0       	ldi	r18, 0x01	; 1
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	a9 01       	movw	r20, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <usart_spi_select_device+0x24>
    170e:	44 0f       	add	r20, r20
    1710:	55 1f       	adc	r21, r21
    1712:	8a 95       	dec	r24
    1714:	e2 f7       	brpl	.-8      	; 0x170e <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1716:	46 83       	std	Z+6, r20	; 0x06
    1718:	08 95       	ret

0000171a <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    171a:	fb 01       	movw	r30, r22
    171c:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    171e:	e8 2f       	mov	r30, r24
    1720:	e6 95       	lsr	r30
    1722:	e6 95       	lsr	r30
    1724:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    1726:	40 e2       	ldi	r20, 0x20	; 32
    1728:	e4 9f       	mul	r30, r20
    172a:	f0 01       	movw	r30, r0
    172c:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    172e:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1730:	87 70       	andi	r24, 0x07	; 7
    1732:	21 e0       	ldi	r18, 0x01	; 1
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	a9 01       	movw	r20, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <usart_spi_deselect_device+0x24>
    173a:	44 0f       	add	r20, r20
    173c:	55 1f       	adc	r21, r21
    173e:	8a 95       	dec	r24
    1740:	e2 f7       	brpl	.-8      	; 0x173a <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1742:	45 83       	std	Z+5, r20	; 0x05
    1744:	08 95       	ret

00001746 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	1f 92       	push	r1
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    1750:	80 91 71 23 	lds	r24, 0x2371
    1754:	90 91 72 23 	lds	r25, 0x2372
    1758:	e0 91 6d 23 	lds	r30, 0x236D
    175c:	f0 91 6e 23 	lds	r31, 0x236E
    1760:	be 01       	movw	r22, r28
    1762:	6f 5f       	subi	r22, 0xFF	; 255
    1764:	7f 4f       	sbci	r23, 0xFF	; 255
    1766:	09 95       	icall
	return c;
    1768:	89 81       	ldd	r24, Y+1	; 0x01
}
    176a:	99 27       	eor	r25, r25
    176c:	87 fd       	sbrc	r24, 7
    176e:	90 95       	com	r25
    1770:	0f 90       	pop	r0
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	08 95       	ret

00001778 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    1778:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    177a:	80 91 71 23 	lds	r24, 0x2371
    177e:	90 91 72 23 	lds	r25, 0x2372
    1782:	e0 91 6f 23 	lds	r30, 0x236F
    1786:	f0 91 70 23 	lds	r31, 0x2370
    178a:	09 95       	icall
    178c:	99 23       	and	r25, r25
    178e:	1c f4       	brge	.+6      	; 0x1796 <_write+0x1e>
		return -1;
    1790:	8f ef       	ldi	r24, 0xFF	; 255
    1792:	9f ef       	ldi	r25, 0xFF	; 255
    1794:	08 95       	ret
	}
	return 1;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
}
    179a:	08 95       	ret

0000179c <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    179c:	43 e0       	ldi	r20, 0x03	; 3
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	60 e1       	ldi	r22, 0x10	; 16
    17a2:	80 e6       	ldi	r24, 0x60	; 96
    17a4:	96 e0       	ldi	r25, 0x06	; 6
    17a6:	50 df       	rcall	.-352    	; 0x1648 <ioport_configure_port_pin>
    17a8:	43 e0       	ldi	r20, 0x03	; 3
    17aa:	50 e0       	ldi	r21, 0x00	; 0
    17ac:	60 e2       	ldi	r22, 0x20	; 32
    17ae:	80 e6       	ldi	r24, 0x60	; 96
    17b0:	96 e0       	ldi	r25, 0x06	; 6
    17b2:	4a df       	rcall	.-364    	; 0x1648 <ioport_configure_port_pin>
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	5b e1       	ldi	r21, 0x1B	; 27
    17b8:	61 e0       	ldi	r22, 0x01	; 1
    17ba:	80 e6       	ldi	r24, 0x60	; 96
    17bc:	96 e0       	ldi	r25, 0x06	; 6
    17be:	44 df       	rcall	.-376    	; 0x1648 <ioport_configure_port_pin>
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	5b e1       	ldi	r21, 0x1B	; 27
    17c4:	64 e0       	ldi	r22, 0x04	; 4
    17c6:	80 e6       	ldi	r24, 0x60	; 96
    17c8:	96 e0       	ldi	r25, 0x06	; 6
    17ca:	3e df       	rcall	.-388    	; 0x1648 <ioport_configure_port_pin>
    17cc:	40 e0       	ldi	r20, 0x00	; 0
    17ce:	5b e1       	ldi	r21, 0x1B	; 27
    17d0:	60 e2       	ldi	r22, 0x20	; 32
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	96 e0       	ldi	r25, 0x06	; 6
    17d6:	38 df       	rcall	.-400    	; 0x1648 <ioport_configure_port_pin>
    17d8:	43 e0       	ldi	r20, 0x03	; 3
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	62 e0       	ldi	r22, 0x02	; 2
    17de:	80 ee       	ldi	r24, 0xE0	; 224
    17e0:	97 e0       	ldi	r25, 0x07	; 7
    17e2:	32 df       	rcall	.-412    	; 0x1648 <ioport_configure_port_pin>
	// to unselect this component at default
	ioport_configure_pin(UG_2832HSWEG04_SS, IOPORT_DIR_OUTPUT
			| IOPORT_INIT_HIGH);

#ifdef CONF_BOARD_OLED_UG_2832HSWEG04
	PORTC.REMAP |= PORT_USART0_bm;
    17e4:	e0 e4       	ldi	r30, 0x40	; 64
    17e6:	f6 e0       	ldi	r31, 0x06	; 6
    17e8:	86 85       	ldd	r24, Z+14	; 0x0e
    17ea:	80 61       	ori	r24, 0x10	; 16
    17ec:	86 87       	std	Z+14, r24	; 0x0e
    17ee:	43 e0       	ldi	r20, 0x03	; 3
    17f0:	50 e0       	ldi	r21, 0x00	; 0
    17f2:	61 e0       	ldi	r22, 0x01	; 1
    17f4:	80 ee       	ldi	r24, 0xE0	; 224
    17f6:	97 e0       	ldi	r25, 0x07	; 7
    17f8:	27 df       	rcall	.-434    	; 0x1648 <ioport_configure_port_pin>
    17fa:	43 e0       	ldi	r20, 0x03	; 3
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	68 e0       	ldi	r22, 0x08	; 8
    1800:	80 e6       	ldi	r24, 0x60	; 96
    1802:	96 e0       	ldi	r25, 0x06	; 6
    1804:	21 df       	rcall	.-446    	; 0x1648 <ioport_configure_port_pin>
    1806:	43 e0       	ldi	r20, 0x03	; 3
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	60 e2       	ldi	r22, 0x20	; 32
    180c:	80 e4       	ldi	r24, 0x40	; 64
    180e:	96 e0       	ldi	r25, 0x06	; 6
    1810:	1b df       	rcall	.-458    	; 0x1648 <ioport_configure_port_pin>
    1812:	43 e0       	ldi	r20, 0x03	; 3
    1814:	50 e0       	ldi	r21, 0x00	; 0
    1816:	60 e8       	ldi	r22, 0x80	; 128
    1818:	80 e4       	ldi	r24, 0x40	; 64
    181a:	96 e0       	ldi	r25, 0x06	; 6
    181c:	15 df       	rcall	.-470    	; 0x1648 <ioport_configure_port_pin>
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	60 e4       	ldi	r22, 0x40	; 64
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	96 e0       	ldi	r25, 0x06	; 6
    1828:	0f df       	rcall	.-482    	; 0x1648 <ioport_configure_port_pin>
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	60 e8       	ldi	r22, 0x80	; 128
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	96 e0       	ldi	r25, 0x06	; 6
    1834:	09 df       	rcall	.-494    	; 0x1648 <ioport_configure_port_pin>
    1836:	40 e0       	ldi	r20, 0x00	; 0
    1838:	50 e0       	ldi	r21, 0x00	; 0
    183a:	62 e0       	ldi	r22, 0x02	; 2
    183c:	80 e6       	ldi	r24, 0x60	; 96
    183e:	96 e0       	ldi	r25, 0x06	; 6
    1840:	03 df       	rcall	.-506    	; 0x1648 <ioport_configure_port_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTD, 2), IOPORT_DIR_INPUT);
#endif

#ifdef CONF_BOARD_ENABLE_USARTD0_REMAP
	PORTD.REMAP |= PORT_USART0_bm;
    1842:	e0 e6       	ldi	r30, 0x60	; 96
    1844:	f6 e0       	ldi	r31, 0x06	; 6
    1846:	86 85       	ldd	r24, Z+14	; 0x0e
    1848:	80 61       	ori	r24, 0x10	; 16
    184a:	86 87       	std	Z+14, r24	; 0x0e
    184c:	43 e0       	ldi	r20, 0x03	; 3
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	60 e8       	ldi	r22, 0x80	; 128
    1852:	80 e6       	ldi	r24, 0x60	; 96
    1854:	96 e0       	ldi	r25, 0x06	; 6
    1856:	f8 de       	rcall	.-528    	; 0x1648 <ioport_configure_port_pin>
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	50 e0       	ldi	r21, 0x00	; 0
    185c:	60 e4       	ldi	r22, 0x40	; 64
    185e:	80 e6       	ldi	r24, 0x60	; 96
    1860:	96 e0       	ldi	r25, 0x06	; 6
    1862:	f2 ce       	rjmp	.-540    	; 0x1648 <ioport_configure_port_pin>
    1864:	08 95       	ret

00001866 <adc_set_callback>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1866:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    1868:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    186a:	81 15       	cp	r24, r1
    186c:	92 40       	sbci	r25, 0x02	; 2
    186e:	21 f4       	brne	.+8      	; 0x1878 <adc_set_callback+0x12>
		adca_callback = callback;
    1870:	60 93 73 23 	sts	0x2373, r22
    1874:	70 93 74 23 	sts	0x2374, r23
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1878:	2f bf       	out	0x3f, r18	; 63
    187a:	08 95       	ret

0000187c <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    187c:	81 15       	cp	r24, r1
    187e:	92 40       	sbci	r25, 0x02	; 2
    1880:	59 f4       	brne	.+22     	; 0x1898 <adc_enable_clock+0x1c>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    1882:	80 91 4a 23 	lds	r24, 0x234A
    1886:	91 e0       	ldi	r25, 0x01	; 1
    1888:	98 0f       	add	r25, r24
    188a:	90 93 4a 23 	sts	0x234A, r25
    188e:	81 11       	cpse	r24, r1
    1890:	03 c0       	rjmp	.+6      	; 0x1898 <adc_enable_clock+0x1c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1892:	62 e0       	ldi	r22, 0x02	; 2
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	54 ca       	rjmp	.-2904   	; 0xd40 <sysclk_enable_module>
    1898:	08 95       	ret

0000189a <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    189a:	81 15       	cp	r24, r1
    189c:	92 40       	sbci	r25, 0x02	; 2
    189e:	51 f4       	brne	.+20     	; 0x18b4 <adc_disable_clock+0x1a>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    18a0:	80 91 4a 23 	lds	r24, 0x234A
    18a4:	81 50       	subi	r24, 0x01	; 1
    18a6:	80 93 4a 23 	sts	0x234A, r24
    18aa:	81 11       	cpse	r24, r1
    18ac:	03 c0       	rjmp	.+6      	; 0x18b4 <adc_disable_clock+0x1a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    18ae:	62 e0       	ldi	r22, 0x02	; 2
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	52 ca       	rjmp	.-2908   	; 0xd58 <sysclk_disable_module>
    18b4:	08 95       	ret

000018b6 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    18be:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    18c0:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    18c2:	dc df       	rcall	.-72     	; 0x187c <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    18c4:	88 81       	ld	r24, Y
    18c6:	81 60       	ori	r24, 0x01	; 1
    18c8:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    18ca:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    18cc:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    18ce:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    18d0:	e8 e6       	ldi	r30, 0x68	; 104
    18d2:	f3 e2       	ldi	r31, 0x23	; 35
    18d4:	90 81       	ld	r25, Z
    18d6:	9f 5f       	subi	r25, 0xFF	; 255
    18d8:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    18da:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	08 95       	ret

000018e4 <__vector_34>:
 * \brief ISR for channel 0 on ADC A
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
    18e4:	1f 92       	push	r1
    18e6:	0f 92       	push	r0
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	0f 92       	push	r0
    18ec:	11 24       	eor	r1, r1
    18ee:	2f 93       	push	r18
    18f0:	3f 93       	push	r19
    18f2:	4f 93       	push	r20
    18f4:	5f 93       	push	r21
    18f6:	6f 93       	push	r22
    18f8:	7f 93       	push	r23
    18fa:	8f 93       	push	r24
    18fc:	9f 93       	push	r25
    18fe:	af 93       	push	r26
    1900:	bf 93       	push	r27
    1902:	ef 93       	push	r30
    1904:	ff 93       	push	r31
    1906:	0e 94 ac 02 	call	0x558	; 0x558 <app_cpu_load_exit_sleep>
{
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    190a:	e0 e0       	ldi	r30, 0x00	; 0
    190c:	f2 e0       	ldi	r31, 0x02	; 2
    190e:	44 a1       	ldd	r20, Z+36	; 0x24
    1910:	55 a1       	ldd	r21, Z+37	; 0x25
    1912:	e0 91 73 23 	lds	r30, 0x2373
    1916:	f0 91 74 23 	lds	r31, 0x2374
    191a:	61 e0       	ldi	r22, 0x01	; 1
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	92 e0       	ldi	r25, 0x02	; 2
    1920:	09 95       	icall
 * \brief ISR for channel 0 on ADC A
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
    1922:	ff 91       	pop	r31
    1924:	ef 91       	pop	r30
    1926:	bf 91       	pop	r27
    1928:	af 91       	pop	r26
    192a:	9f 91       	pop	r25
    192c:	8f 91       	pop	r24
    192e:	7f 91       	pop	r23
    1930:	6f 91       	pop	r22
    1932:	5f 91       	pop	r21
    1934:	4f 91       	pop	r20
    1936:	3f 91       	pop	r19
    1938:	2f 91       	pop	r18
    193a:	0f 90       	pop	r0
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	0f 90       	pop	r0
    1940:	1f 90       	pop	r1
    1942:	18 95       	reti

00001944 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    1944:	df 92       	push	r13
    1946:	ef 92       	push	r14
    1948:	ff 92       	push	r15
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	ec 01       	movw	r28, r24
    1954:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1956:	c1 15       	cp	r28, r1
    1958:	82 e0       	ldi	r24, 0x02	; 2
    195a:	d8 07       	cpc	r29, r24
    195c:	51 f5       	brne	.+84     	; 0x19b2 <adc_write_configuration+0x6e>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    195e:	61 e2       	ldi	r22, 0x21	; 33
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	a6 d0       	rcall	.+332    	; 0x1ab2 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1966:	e8 2e       	mov	r14, r24
    1968:	f1 2c       	mov	r15, r1
    196a:	60 e2       	ldi	r22, 0x20	; 32
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	a0 d0       	rcall	.+320    	; 0x1ab2 <nvm_read_byte>
		data <<= 8;
    1972:	fe 2c       	mov	r15, r14
    1974:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
    1976:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1978:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    197a:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    197c:	ce 01       	movw	r24, r28
    197e:	7e df       	rcall	.-260    	; 0x187c <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1980:	28 81       	ld	r18, Y
    1982:	21 70       	andi	r18, 0x01	; 1

	adc->CTRLA = ADC_FLUSH_bm;
    1984:	82 e0       	ldi	r24, 0x02	; 2
    1986:	88 83       	st	Y, r24
	adc->CAL = cal;
    1988:	ec 86       	std	Y+12, r14	; 0x0c
    198a:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    198c:	f8 01       	movw	r30, r16
    198e:	84 81       	ldd	r24, Z+4	; 0x04
    1990:	95 81       	ldd	r25, Z+5	; 0x05
    1992:	88 8f       	std	Y+24, r24	; 0x18
    1994:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
    1996:	81 81       	ldd	r24, Z+1	; 0x01
    1998:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
    199a:	83 81       	ldd	r24, Z+3	; 0x03
    199c:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
    199e:	82 81       	ldd	r24, Z+2	; 0x02
    19a0:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
    19a2:	80 81       	ld	r24, Z
    19a4:	89 83       	std	Y+1, r24	; 0x01
	adc->SAMPCTRL = conf->sampctrl;
    19a6:	86 81       	ldd	r24, Z+6	; 0x06
    19a8:	88 87       	std	Y+8, r24	; 0x08

	adc->CTRLA = enable;
    19aa:	28 83       	st	Y, r18

	adc_disable_clock(adc);
    19ac:	ce 01       	movw	r24, r28
    19ae:	75 df       	rcall	.-278    	; 0x189a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    19b0:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	1f 91       	pop	r17
    19b8:	0f 91       	pop	r16
    19ba:	ff 90       	pop	r15
    19bc:	ef 90       	pop	r14
    19be:	df 90       	pop	r13
    19c0:	08 95       	ret

000019c2 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    19c2:	ff 92       	push	r15
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	ec 01       	movw	r28, r24
    19ce:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    19d0:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    19d2:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    19d4:	53 df       	rcall	.-346    	; 0x187c <adc_enable_clock>

	conf->cmp = adc->CMP;
    19d6:	88 8d       	ldd	r24, Y+24	; 0x18
    19d8:	99 8d       	ldd	r25, Y+25	; 0x19
    19da:	f8 01       	movw	r30, r16
    19dc:	84 83       	std	Z+4, r24	; 0x04
    19de:	95 83       	std	Z+5, r25	; 0x05
	conf->refctrl = adc->REFCTRL;
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	81 83       	std	Z+1, r24	; 0x01
	conf->prescaler = adc->PRESCALER;
    19e4:	8c 81       	ldd	r24, Y+4	; 0x04
    19e6:	83 83       	std	Z+3, r24	; 0x03
	conf->evctrl = adc->EVCTRL;
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	82 83       	std	Z+2, r24	; 0x02
	conf->ctrlb = adc->CTRLB;
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	80 83       	st	Z, r24
	conf->sampctrl = adc->SAMPCTRL;
    19f0:	88 85       	ldd	r24, Y+8	; 0x08
    19f2:	86 83       	std	Z+6, r24	; 0x06

	adc_disable_clock(adc);
    19f4:	ce 01       	movw	r24, r28
    19f6:	51 df       	rcall	.-350    	; 0x189a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    19f8:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	1f 91       	pop	r17
    1a00:	0f 91       	pop	r16
    1a02:	ff 90       	pop	r15
    1a04:	08 95       	ret

00001a06 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1a06:	ff 92       	push	r15
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	ec 01       	movw	r28, r24
    1a12:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1a14:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    1a16:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1a18:	31 df       	rcall	.-414    	; 0x187c <adc_enable_clock>

	adc_ch->CTRL = ch_conf->ctrl;
    1a1a:	f8 01       	movw	r30, r16
    1a1c:	80 81       	ld	r24, Z
    1a1e:	88 a3       	std	Y+32, r24	; 0x20
	adc_ch->INTCTRL = ch_conf->intctrl;
    1a20:	82 81       	ldd	r24, Z+2	; 0x02
    1a22:	8a a3       	std	Y+34, r24	; 0x22
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1a24:	81 81       	ldd	r24, Z+1	; 0x01
    1a26:	89 a3       	std	Y+33, r24	; 0x21
	adc_ch->SCAN = ch_conf->scan;
    1a28:	83 81       	ldd	r24, Z+3	; 0x03
    1a2a:	8e a3       	std	Y+38, r24	; 0x26
	adc_ch->CORRCTRL = ch_conf->corrctrl;
    1a2c:	84 81       	ldd	r24, Z+4	; 0x04
    1a2e:	8f a3       	std	Y+39, r24	; 0x27
	adc_ch->OFFSETCORR0 = ch_conf->offsetcorr0;
    1a30:	85 81       	ldd	r24, Z+5	; 0x05
    1a32:	88 a7       	std	Y+40, r24	; 0x28
	adc_ch->OFFSETCORR1 = ch_conf->offsetcorr1;
    1a34:	86 81       	ldd	r24, Z+6	; 0x06
    1a36:	89 a7       	std	Y+41, r24	; 0x29
	adc_ch->GAINCORR0 = ch_conf->gaincorr0;
    1a38:	87 81       	ldd	r24, Z+7	; 0x07
    1a3a:	8a a7       	std	Y+42, r24	; 0x2a
	adc_ch->GAINCORR1 = ch_conf->gaincorr1;
    1a3c:	80 85       	ldd	r24, Z+8	; 0x08
    1a3e:	8b a7       	std	Y+43, r24	; 0x2b
	adc_ch->AVGCTRL = ch_conf->avgctrl;
    1a40:	81 85       	ldd	r24, Z+9	; 0x09
    1a42:	8c a7       	std	Y+44, r24	; 0x2c

	adc_disable_clock(adc);
    1a44:	ce 01       	movw	r24, r28
    1a46:	29 df       	rcall	.-430    	; 0x189a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a48:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	ff 90       	pop	r15
    1a54:	08 95       	ret

00001a56 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1a56:	ff 92       	push	r15
    1a58:	0f 93       	push	r16
    1a5a:	1f 93       	push	r17
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	ec 01       	movw	r28, r24
    1a62:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1a64:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    1a66:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    1a68:	09 df       	rcall	.-494    	; 0x187c <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    1a6a:	88 a1       	ldd	r24, Y+32	; 0x20
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    1a70:	8a a1       	ldd	r24, Y+34	; 0x22
    1a72:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    1a74:	89 a1       	ldd	r24, Y+33	; 0x21
    1a76:	81 83       	std	Z+1, r24	; 0x01
	ch_conf->scan = adc_ch->SCAN;
    1a78:	8e a1       	ldd	r24, Y+38	; 0x26
    1a7a:	83 83       	std	Z+3, r24	; 0x03
	ch_conf->corrctrl = adc_ch->CORRCTRL;
    1a7c:	8f a1       	ldd	r24, Y+39	; 0x27
    1a7e:	84 83       	std	Z+4, r24	; 0x04
	ch_conf->offsetcorr0 = adc_ch->OFFSETCORR0;
    1a80:	88 a5       	ldd	r24, Y+40	; 0x28
    1a82:	85 83       	std	Z+5, r24	; 0x05
	ch_conf->offsetcorr1 = adc_ch->OFFSETCORR1;
    1a84:	89 a5       	ldd	r24, Y+41	; 0x29
    1a86:	86 83       	std	Z+6, r24	; 0x06
	ch_conf->gaincorr0 = adc_ch->GAINCORR0;
    1a88:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a8a:	87 83       	std	Z+7, r24	; 0x07
	ch_conf->gaincorr1 = adc_ch->GAINCORR1;
    1a8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a8e:	80 87       	std	Z+8, r24	; 0x08
	ch_conf->avgctrl = adc_ch->AVGCTRL;
    1a90:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a92:	81 87       	std	Z+9, r24	; 0x09
	adc_disable_clock(adc);
    1a94:	ce 01       	movw	r24, r28
    1a96:	01 df       	rcall	.-510    	; 0x189a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a98:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	ff 90       	pop	r15
    1aa4:	08 95       	ret

00001aa6 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1aa6:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1aa8:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1aaa:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1aac:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1aae:	60 83       	st	Z, r22
	ret                             // Return to caller
    1ab0:	08 95       	ret

00001ab2 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1ab2:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1ab6:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1ab8:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1aba:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1abe:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1ac0:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1ac4:	08 95       	ret

00001ac6 <qdec_evsys_pin_2_chmux>:
static inline void tc45_write_count(volatile void *tc, uint16_t cnt_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CNT = cnt_value;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CNT = cnt_value;
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	fa 01       	movw	r30, r20
    1aca:	e0 58       	subi	r30, 0x80	; 128
    1acc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ace:	81 15       	cp	r24, r1
    1ad0:	26 e0       	ldi	r18, 0x06	; 6
    1ad2:	92 07       	cpc	r25, r18
    1ad4:	19 f4       	brne	.+6      	; 0x1adc <qdec_evsys_pin_2_chmux+0x16>
    1ad6:	60 65       	ori	r22, 0x50	; 80
    1ad8:	60 83       	st	Z, r22
    1ada:	08 95       	ret
    1adc:	80 34       	cpi	r24, 0x40	; 64
    1ade:	26 e0       	ldi	r18, 0x06	; 6
    1ae0:	92 07       	cpc	r25, r18
    1ae2:	19 f4       	brne	.+6      	; 0x1aea <qdec_evsys_pin_2_chmux+0x24>
    1ae4:	60 66       	ori	r22, 0x60	; 96
    1ae6:	60 83       	st	Z, r22
    1ae8:	08 95       	ret
    1aea:	80 36       	cpi	r24, 0x60	; 96
    1aec:	96 40       	sbci	r25, 0x06	; 6
    1aee:	11 f4       	brne	.+4      	; 0x1af4 <qdec_evsys_pin_2_chmux+0x2e>
    1af0:	68 66       	ori	r22, 0x68	; 104
    1af2:	60 83       	st	Z, r22
    1af4:	08 95       	ret

00001af6 <qdec_get_config_defaults>:
    1af6:	fc 01       	movw	r30, r24
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	96 e0       	ldi	r25, 0x06	; 6
    1afc:	80 83       	st	Z, r24
    1afe:	91 83       	std	Z+1, r25	; 0x01
    1b00:	12 82       	std	Z+2, r1	; 0x02
    1b02:	82 e0       	ldi	r24, 0x02	; 2
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	83 83       	std	Z+3, r24	; 0x03
    1b08:	94 83       	std	Z+4, r25	; 0x04
    1b0a:	15 82       	std	Z+5, r1	; 0x05
    1b0c:	16 82       	std	Z+6, r1	; 0x06
    1b0e:	11 86       	std	Z+9, r1	; 0x09
    1b10:	12 86       	std	Z+10, r1	; 0x0a
    1b12:	80 e4       	ldi	r24, 0x40	; 64
    1b14:	98 e0       	ldi	r25, 0x08	; 8
    1b16:	83 87       	std	Z+11, r24	; 0x0b
    1b18:	94 87       	std	Z+12, r25	; 0x0c
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	98 e0       	ldi	r25, 0x08	; 8
    1b1e:	81 8b       	std	Z+17, r24	; 0x11
    1b20:	92 8b       	std	Z+18, r25	; 0x12
    1b22:	17 86       	std	Z+15, r1	; 0x0f
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	80 8b       	std	Z+16, r24	; 0x10
    1b28:	48 ee       	ldi	r20, 0xE8	; 232
    1b2a:	53 e0       	ldi	r21, 0x03	; 3
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    1b30:	43 8b       	std	Z+19, r20	; 0x13
    1b32:	54 8b       	std	Z+20, r21	; 0x14
    1b34:	65 8b       	std	Z+21, r22	; 0x15
    1b36:	76 8b       	std	Z+22, r23	; 0x16
    1b38:	84 e0       	ldi	r24, 0x04	; 4
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	85 87       	std	Z+13, r24	; 0x0d
    1b3e:	96 87       	std	Z+14, r25	; 0x0e
    1b40:	08 95       	ret

00001b42 <qdec_config_phase_pins>:
    1b42:	0f 93       	push	r16
    1b44:	1f 93       	push	r17
    1b46:	fc 01       	movw	r30, r24
    1b48:	60 83       	st	Z, r22
    1b4a:	71 83       	std	Z+1, r23	; 0x01
    1b4c:	42 83       	std	Z+2, r20	; 0x02
    1b4e:	03 83       	std	Z+3, r16	; 0x03
    1b50:	14 83       	std	Z+4, r17	; 0x04
    1b52:	25 83       	std	Z+5, r18	; 0x05
    1b54:	1f 91       	pop	r17
    1b56:	0f 91       	pop	r16
    1b58:	08 95       	ret

00001b5a <qdec_config_enable_rotary>:
    1b5a:	21 e0       	ldi	r18, 0x01	; 1
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	21 87       	std	Z+9, r18	; 0x09
    1b60:	08 95       	ret

00001b62 <qdec_config_tc>:
    1b62:	fc 01       	movw	r30, r24
    1b64:	63 87       	std	Z+11, r22	; 0x0b
    1b66:	74 87       	std	Z+12, r23	; 0x0c
    1b68:	08 95       	ret

00001b6a <qdec_config_revolution>:
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	65 87       	std	Z+13, r22	; 0x0d
    1b6e:	76 87       	std	Z+14, r23	; 0x0e
    1b70:	08 95       	ret

00001b72 <qdec_enabled>:
    1b72:	2f 92       	push	r2
    1b74:	3f 92       	push	r3
    1b76:	4f 92       	push	r4
    1b78:	5f 92       	push	r5
    1b7a:	6f 92       	push	r6
    1b7c:	7f 92       	push	r7
    1b7e:	8f 92       	push	r8
    1b80:	9f 92       	push	r9
    1b82:	af 92       	push	r10
    1b84:	bf 92       	push	r11
    1b86:	cf 92       	push	r12
    1b88:	df 92       	push	r13
    1b8a:	ef 92       	push	r14
    1b8c:	ff 92       	push	r15
    1b8e:	0f 93       	push	r16
    1b90:	1f 93       	push	r17
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
    1b96:	ec 01       	movw	r28, r24
    1b98:	e8 81       	ld	r30, Y
    1b9a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9c 01       	movw	r18, r24
    1ba2:	0a 80       	ldd	r0, Y+2	; 0x02
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <qdec_enabled+0x38>
    1ba6:	22 0f       	add	r18, r18
    1ba8:	33 1f       	adc	r19, r19
    1baa:	0a 94       	dec	r0
    1bac:	e2 f7       	brpl	.-8      	; 0x1ba6 <qdec_enabled+0x34>
    1bae:	22 83       	std	Z+2, r18	; 0x02
    1bb0:	0a 80       	ldd	r0, Y+2	; 0x02
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <qdec_enabled+0x46>
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	0a 94       	dec	r0
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <qdec_enabled+0x42>
    1bbc:	80 93 b0 00 	sts	0x00B0, r24
    1bc0:	e8 81       	ld	r30, Y
    1bc2:	f9 81       	ldd	r31, Y+1	; 0x01
    1bc4:	80 89       	ldd	r24, Z+16	; 0x10
    1bc6:	88 7f       	andi	r24, 0xF8	; 248
    1bc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bca:	99 23       	and	r25, r25
    1bcc:	11 f0       	breq	.+4      	; 0x1bd2 <qdec_enabled+0x60>
    1bce:	90 e4       	ldi	r25, 0x40	; 64
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4 <qdec_enabled+0x62>
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	89 2b       	or	r24, r25
    1bd6:	80 8b       	std	Z+16, r24	; 0x10
    1bd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bda:	88 23       	and	r24, r24
    1bdc:	01 f1       	breq	.+64     	; 0x1c1e <qdec_enabled+0xac>
    1bde:	e8 81       	ld	r30, Y
    1be0:	f9 81       	ldd	r31, Y+1	; 0x01
    1be2:	84 e0       	ldi	r24, 0x04	; 4
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9c 01       	movw	r18, r24
    1be8:	0a 80       	ldd	r0, Y+2	; 0x02
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <qdec_enabled+0x7e>
    1bec:	22 0f       	add	r18, r18
    1bee:	33 1f       	adc	r19, r19
    1bf0:	0a 94       	dec	r0
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <qdec_enabled+0x7a>
    1bf4:	22 83       	std	Z+2, r18	; 0x02
    1bf6:	0a 80       	ldd	r0, Y+2	; 0x02
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <qdec_enabled+0x8c>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	0a 94       	dec	r0
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <qdec_enabled+0x88>
    1c02:	80 93 b0 00 	sts	0x00B0, r24
    1c06:	e8 81       	ld	r30, Y
    1c08:	f9 81       	ldd	r31, Y+1	; 0x01
    1c0a:	90 89       	ldd	r25, Z+16	; 0x10
    1c0c:	98 7f       	andi	r25, 0xF8	; 248
    1c0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c10:	88 23       	and	r24, r24
    1c12:	11 f0       	breq	.+4      	; 0x1c18 <qdec_enabled+0xa6>
    1c14:	80 e4       	ldi	r24, 0x40	; 64
    1c16:	01 c0       	rjmp	.+2      	; 0x1c1a <qdec_enabled+0xa8>
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	89 2b       	or	r24, r25
    1c1c:	80 8b       	std	Z+16, r24	; 0x10
    1c1e:	62 e0       	ldi	r22, 0x02	; 2
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	8e d8       	rcall	.-3812   	; 0xd40 <sysclk_enable_module>
    1c24:	4a 85       	ldd	r20, Y+10	; 0x0a
    1c26:	6a 81       	ldd	r22, Y+2	; 0x02
    1c28:	88 81       	ld	r24, Y
    1c2a:	99 81       	ldd	r25, Y+1	; 0x01
    1c2c:	4c df       	rcall	.-360    	; 0x1ac6 <qdec_evsys_pin_2_chmux>
    1c2e:	8a 84       	ldd	r8, Y+10	; 0x0a
    1c30:	91 2c       	mov	r9, r1
    1c32:	38 e7       	ldi	r19, 0x78	; 120
    1c34:	83 1a       	sub	r8, r19
    1c36:	3e ef       	ldi	r19, 0xFE	; 254
    1c38:	93 0a       	sbc	r9, r19
    1c3a:	4b 80       	ldd	r4, Y+3	; 0x03
    1c3c:	5c 80       	ldd	r5, Y+4	; 0x04
    1c3e:	89 ee       	ldi	r24, 0xE9	; 233
    1c40:	48 16       	cp	r4, r24
    1c42:	83 e0       	ldi	r24, 0x03	; 3
    1c44:	58 06       	cpc	r5, r24
    1c46:	c8 f0       	brcs	.+50     	; 0x1c7a <qdec_enabled+0x108>
    1c48:	92 01       	movw	r18, r4
    1c4a:	36 95       	lsr	r19
    1c4c:	27 95       	ror	r18
    1c4e:	36 95       	lsr	r19
    1c50:	27 95       	ror	r18
    1c52:	36 95       	lsr	r19
    1c54:	27 95       	ror	r18
    1c56:	a5 ec       	ldi	r26, 0xC5	; 197
    1c58:	b0 e2       	ldi	r27, 0x20	; 32
    1c5a:	0e 94 1e 19 	call	0x323c	; 0x323c <__umulhisi3>
    1c5e:	9c 01       	movw	r18, r24
    1c60:	32 95       	swap	r19
    1c62:	22 95       	swap	r18
    1c64:	2f 70       	andi	r18, 0x0F	; 15
    1c66:	23 27       	eor	r18, r19
    1c68:	3f 70       	andi	r19, 0x0F	; 15
    1c6a:	23 27       	eor	r18, r19
    1c6c:	a0 e0       	ldi	r26, 0x00	; 0
    1c6e:	bd e7       	ldi	r27, 0x7D	; 125
    1c70:	0e 94 1e 19 	call	0x323c	; 0x323c <__umulhisi3>
    1c74:	2b 01       	movw	r4, r22
    1c76:	3c 01       	movw	r6, r24
    1c78:	16 c0       	rjmp	.+44     	; 0x1ca6 <qdec_enabled+0x134>
    1c7a:	61 2c       	mov	r6, r1
    1c7c:	71 2c       	mov	r7, r1
    1c7e:	44 0c       	add	r4, r4
    1c80:	55 1c       	adc	r5, r5
    1c82:	66 1c       	adc	r6, r6
    1c84:	77 1c       	adc	r7, r7
    1c86:	44 0c       	add	r4, r4
    1c88:	55 1c       	adc	r5, r5
    1c8a:	66 1c       	adc	r6, r6
    1c8c:	77 1c       	adc	r7, r7
    1c8e:	44 0c       	add	r4, r4
    1c90:	55 1c       	adc	r5, r5
    1c92:	66 1c       	adc	r6, r6
    1c94:	77 1c       	adc	r7, r7
    1c96:	44 0c       	add	r4, r4
    1c98:	55 1c       	adc	r5, r5
    1c9a:	66 1c       	adc	r6, r6
    1c9c:	77 1c       	adc	r7, r7
    1c9e:	44 0c       	add	r4, r4
    1ca0:	55 1c       	adc	r5, r5
    1ca2:	66 1c       	adc	r6, r6
    1ca4:	77 1c       	adc	r7, r7
    1ca6:	e8 e0       	ldi	r30, 0x08	; 8
    1ca8:	4e 16       	cp	r4, r30
    1caa:	51 04       	cpc	r5, r1
    1cac:	61 04       	cpc	r6, r1
    1cae:	71 04       	cpc	r7, r1
    1cb0:	08 f4       	brcc	.+2      	; 0x1cb4 <qdec_enabled+0x142>
    1cb2:	57 c0       	rjmp	.+174    	; 0x1d62 <qdec_enabled+0x1f0>
    1cb4:	d3 01       	movw	r26, r6
    1cb6:	c2 01       	movw	r24, r4
    1cb8:	68 94       	set
    1cba:	12 f8       	bld	r1, 2
    1cbc:	b6 95       	lsr	r27
    1cbe:	a7 95       	ror	r26
    1cc0:	97 95       	ror	r25
    1cc2:	87 95       	ror	r24
    1cc4:	16 94       	lsr	r1
    1cc6:	d1 f7       	brne	.-12     	; 0x1cbc <qdec_enabled+0x14a>
    1cc8:	88 30       	cpi	r24, 0x08	; 8
    1cca:	91 05       	cpc	r25, r1
    1ccc:	a1 05       	cpc	r26, r1
    1cce:	b1 05       	cpc	r27, r1
    1cd0:	68 f1       	brcs	.+90     	; 0x1d2c <qdec_enabled+0x1ba>
    1cd2:	68 94       	set
    1cd4:	12 f8       	bld	r1, 2
    1cd6:	b6 95       	lsr	r27
    1cd8:	a7 95       	ror	r26
    1cda:	97 95       	ror	r25
    1cdc:	87 95       	ror	r24
    1cde:	16 94       	lsr	r1
    1ce0:	d1 f7       	brne	.-12     	; 0x1cd6 <qdec_enabled+0x164>
    1ce2:	88 30       	cpi	r24, 0x08	; 8
    1ce4:	91 05       	cpc	r25, r1
    1ce6:	a1 05       	cpc	r26, r1
    1ce8:	b1 05       	cpc	r27, r1
    1cea:	e0 f0       	brcs	.+56     	; 0x1d24 <qdec_enabled+0x1b2>
    1cec:	68 94       	set
    1cee:	12 f8       	bld	r1, 2
    1cf0:	b6 95       	lsr	r27
    1cf2:	a7 95       	ror	r26
    1cf4:	97 95       	ror	r25
    1cf6:	87 95       	ror	r24
    1cf8:	16 94       	lsr	r1
    1cfa:	d1 f7       	brne	.-12     	; 0x1cf0 <qdec_enabled+0x17e>
    1cfc:	88 30       	cpi	r24, 0x08	; 8
    1cfe:	91 05       	cpc	r25, r1
    1d00:	a1 05       	cpc	r26, r1
    1d02:	b1 05       	cpc	r27, r1
    1d04:	88 f0       	brcs	.+34     	; 0x1d28 <qdec_enabled+0x1b6>
    1d06:	68 94       	set
    1d08:	12 f8       	bld	r1, 2
    1d0a:	b6 95       	lsr	r27
    1d0c:	a7 95       	ror	r26
    1d0e:	97 95       	ror	r25
    1d10:	87 95       	ror	r24
    1d12:	16 94       	lsr	r1
    1d14:	d1 f7       	brne	.-12     	; 0x1d0a <qdec_enabled+0x198>
    1d16:	88 30       	cpi	r24, 0x08	; 8
    1d18:	91 05       	cpc	r25, r1
    1d1a:	a1 05       	cpc	r26, r1
    1d1c:	b1 05       	cpc	r27, r1
    1d1e:	40 f4       	brcc	.+16     	; 0x1d30 <qdec_enabled+0x1be>
    1d20:	23 e0       	ldi	r18, 0x03	; 3
    1d22:	07 c0       	rjmp	.+14     	; 0x1d32 <qdec_enabled+0x1c0>
    1d24:	21 e0       	ldi	r18, 0x01	; 1
    1d26:	05 c0       	rjmp	.+10     	; 0x1d32 <qdec_enabled+0x1c0>
    1d28:	22 e0       	ldi	r18, 0x02	; 2
    1d2a:	03 c0       	rjmp	.+6      	; 0x1d32 <qdec_enabled+0x1c0>
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	01 c0       	rjmp	.+2      	; 0x1d32 <qdec_enabled+0x1c0>
    1d30:	24 e0       	ldi	r18, 0x04	; 4
    1d32:	2c 01       	movw	r4, r24
    1d34:	3d 01       	movw	r6, r26
    1d36:	88 30       	cpi	r24, 0x08	; 8
    1d38:	91 05       	cpc	r25, r1
    1d3a:	a1 05       	cpc	r26, r1
    1d3c:	b1 05       	cpc	r27, r1
    1d3e:	38 f0       	brcs	.+14     	; 0x1d4e <qdec_enabled+0x1dc>
    1d40:	0f 2e       	mov	r0, r31
    1d42:	f7 e0       	ldi	r31, 0x07	; 7
    1d44:	4f 2e       	mov	r4, r31
    1d46:	51 2c       	mov	r5, r1
    1d48:	61 2c       	mov	r6, r1
    1d4a:	71 2c       	mov	r7, r1
    1d4c:	f0 2d       	mov	r31, r0
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	99 23       	and	r25, r25
    1d52:	11 f0       	breq	.+4      	; 0x1d58 <qdec_enabled+0x1e6>
    1d54:	80 e3       	ldi	r24, 0x30	; 48
    1d56:	01 c0       	rjmp	.+2      	; 0x1d5a <qdec_enabled+0x1e8>
    1d58:	80 e1       	ldi	r24, 0x10	; 16
    1d5a:	82 2b       	or	r24, r18
    1d5c:	e0 e8       	ldi	r30, 0x80	; 128
    1d5e:	f1 e0       	ldi	r31, 0x01	; 1
    1d60:	82 8b       	std	Z+18, r24	; 0x12
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	88 23       	and	r24, r24
    1d66:	11 f0       	breq	.+4      	; 0x1d6c <qdec_enabled+0x1fa>
    1d68:	80 e8       	ldi	r24, 0x80	; 128
    1d6a:	01 c0       	rjmp	.+2      	; 0x1d6e <qdec_enabled+0x1fc>
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	94 2d       	mov	r25, r4
    1d70:	98 60       	ori	r25, 0x08	; 8
    1d72:	89 2b       	or	r24, r25
    1d74:	f4 01       	movw	r30, r8
    1d76:	80 83       	st	Z, r24
    1d78:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7a:	88 23       	and	r24, r24
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <qdec_enabled+0x20e>
    1d7e:	bc c1       	rjmp	.+888    	; 0x20f8 <qdec_enabled+0x586>
    1d80:	20 81       	ld	r18, Z
    1d82:	88 85       	ldd	r24, Y+8	; 0x08
    1d84:	f0 e2       	ldi	r31, 0x20	; 32
    1d86:	8f 9f       	mul	r24, r31
    1d88:	c0 01       	movw	r24, r0
    1d8a:	11 24       	eor	r1, r1
    1d8c:	82 2b       	or	r24, r18
    1d8e:	80 61       	ori	r24, 0x10	; 16
    1d90:	f4 01       	movw	r30, r8
    1d92:	80 83       	st	Z, r24
    1d94:	4a 85       	ldd	r20, Y+10	; 0x0a
    1d96:	4f 5f       	subi	r20, 0xFF	; 255
    1d98:	6a 81       	ldd	r22, Y+2	; 0x02
    1d9a:	6e 5f       	subi	r22, 0xFE	; 254
    1d9c:	88 81       	ld	r24, Y
    1d9e:	99 81       	ldd	r25, Y+1	; 0x01
    1da0:	92 de       	rcall	.-732    	; 0x1ac6 <qdec_evsys_pin_2_chmux>
    1da2:	f4 01       	movw	r30, r8
    1da4:	41 82       	std	Z+1, r4	; 0x01
    1da6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1da8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1daa:	31 d5       	rcall	.+2658   	; 0x280e <tc45_enable>
    1dac:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dae:	88 5f       	subi	r24, 0xF8	; 248
    1db0:	eb 85       	ldd	r30, Y+11	; 0x0b
    1db2:	fc 85       	ldd	r31, Y+12	; 0x0c
    1db4:	e6 fd       	sbrc	r30, 6
    1db6:	08 c0       	rjmp	.+16     	; 0x1dc8 <qdec_enabled+0x256>
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	90 71       	andi	r25, 0x10	; 16
    1dbc:	93 83       	std	Z+3, r25	; 0x03
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	90 68       	ori	r25, 0x80	; 128
    1dc2:	89 2b       	or	r24, r25
    1dc4:	83 83       	std	Z+3, r24	; 0x03
    1dc6:	07 c0       	rjmp	.+14     	; 0x1dd6 <qdec_enabled+0x264>
    1dc8:	93 81       	ldd	r25, Z+3	; 0x03
    1dca:	90 71       	andi	r25, 0x10	; 16
    1dcc:	93 83       	std	Z+3, r25	; 0x03
    1dce:	93 81       	ldd	r25, Z+3	; 0x03
    1dd0:	90 68       	ori	r25, 0x80	; 128
    1dd2:	89 2b       	or	r24, r25
    1dd4:	83 83       	std	Z+3, r24	; 0x03
    1dd6:	eb 85       	ldd	r30, Y+11	; 0x0b
    1dd8:	fc 85       	ldd	r31, Y+12	; 0x0c
    1dda:	e6 fd       	sbrc	r30, 6
    1ddc:	03 c0       	rjmp	.+6      	; 0x1de4 <qdec_enabled+0x272>
    1dde:	10 a2       	std	Z+32, r1	; 0x20
    1de0:	11 a2       	std	Z+33, r1	; 0x21
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <qdec_enabled+0x276>
    1de4:	10 a2       	std	Z+32, r1	; 0x20
    1de6:	11 a2       	std	Z+33, r1	; 0x21
    1de8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	eb 85       	ldd	r30, Y+11	; 0x0b
    1df0:	fc 85       	ldd	r31, Y+12	; 0x0c
    1df2:	e6 fd       	sbrc	r30, 6
    1df4:	03 c0       	rjmp	.+6      	; 0x1dfc <qdec_enabled+0x28a>
    1df6:	86 a3       	std	Z+38, r24	; 0x26
    1df8:	97 a3       	std	Z+39, r25	; 0x27
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <qdec_enabled+0x28e>
    1dfc:	86 a3       	std	Z+38, r24	; 0x26
    1dfe:	97 a3       	std	Z+39, r25	; 0x27
    1e00:	eb 85       	ldd	r30, Y+11	; 0x0b
    1e02:	fc 85       	ldd	r31, Y+12	; 0x0c
    1e04:	e6 fd       	sbrc	r30, 6
    1e06:	05 c0       	rjmp	.+10     	; 0x1e12 <qdec_enabled+0x2a0>
    1e08:	80 81       	ld	r24, Z
    1e0a:	80 7f       	andi	r24, 0xF0	; 240
    1e0c:	81 60       	ori	r24, 0x01	; 1
    1e0e:	80 83       	st	Z, r24
    1e10:	04 c0       	rjmp	.+8      	; 0x1e1a <qdec_enabled+0x2a8>
    1e12:	80 81       	ld	r24, Z
    1e14:	80 7f       	andi	r24, 0xF0	; 240
    1e16:	81 60       	ori	r24, 0x01	; 1
    1e18:	80 83       	st	Z, r24
    1e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e1c:	88 23       	and	r24, r24
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <qdec_enabled+0x2b0>
    1e20:	75 c1       	rjmp	.+746    	; 0x210c <qdec_enabled+0x59a>
    1e22:	e0 e8       	ldi	r30, 0x80	; 128
    1e24:	f1 e0       	ldi	r31, 0x01	; 1
    1e26:	82 89       	ldd	r24, Z+18	; 0x12
    1e28:	84 ff       	sbrs	r24, 4
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <qdec_enabled+0x2e2>
    1e2c:	88 89       	ldd	r24, Y+16	; 0x10
    1e2e:	81 30       	cpi	r24, 0x01	; 1
    1e30:	21 f4       	brne	.+8      	; 0x1e3a <qdec_enabled+0x2c8>
    1e32:	82 89       	ldd	r24, Z+18	; 0x12
    1e34:	80 62       	ori	r24, 0x20	; 32
    1e36:	82 8b       	std	Z+18, r24	; 0x12
    1e38:	0d c0       	rjmp	.+26     	; 0x1e54 <qdec_enabled+0x2e2>
    1e3a:	82 30       	cpi	r24, 0x02	; 2
    1e3c:	31 f4       	brne	.+12     	; 0x1e4a <qdec_enabled+0x2d8>
    1e3e:	e0 e8       	ldi	r30, 0x80	; 128
    1e40:	f1 e0       	ldi	r31, 0x01	; 1
    1e42:	82 89       	ldd	r24, Z+18	; 0x12
    1e44:	80 64       	ori	r24, 0x40	; 64
    1e46:	82 8b       	std	Z+18, r24	; 0x12
    1e48:	05 c0       	rjmp	.+10     	; 0x1e54 <qdec_enabled+0x2e2>
    1e4a:	e0 e8       	ldi	r30, 0x80	; 128
    1e4c:	f1 e0       	ldi	r31, 0x01	; 1
    1e4e:	82 89       	ldd	r24, Z+18	; 0x12
    1e50:	80 68       	ori	r24, 0x80	; 128
    1e52:	82 8b       	std	Z+18, r24	; 0x12
    1e54:	e8 89       	ldd	r30, Y+16	; 0x10
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	e8 57       	subi	r30, 0x78	; 120
    1e5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e5c:	aa 85       	ldd	r26, Y+10	; 0x0a
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	a8 57       	subi	r26, 0x78	; 120
    1e62:	be 4f       	sbci	r27, 0xFE	; 254
    1e64:	8c 91       	ld	r24, X
    1e66:	87 70       	andi	r24, 0x07	; 7
    1e68:	80 83       	st	Z, r24
    1e6a:	48 89       	ldd	r20, Y+16	; 0x10
    1e6c:	6a 81       	ldd	r22, Y+2	; 0x02
    1e6e:	88 81       	ld	r24, Y
    1e70:	99 81       	ldd	r25, Y+1	; 0x01
    1e72:	29 de       	rcall	.-942    	; 0x1ac6 <qdec_evsys_pin_2_chmux>
    1e74:	89 89       	ldd	r24, Y+17	; 0x11
    1e76:	9a 89       	ldd	r25, Y+18	; 0x12
    1e78:	ca d4       	rcall	.+2452   	; 0x280e <tc45_enable>
    1e7a:	88 89       	ldd	r24, Y+16	; 0x10
    1e7c:	88 5f       	subi	r24, 0xF8	; 248
    1e7e:	e9 89       	ldd	r30, Y+17	; 0x11
    1e80:	fa 89       	ldd	r31, Y+18	; 0x12
    1e82:	e6 fd       	sbrc	r30, 6
    1e84:	08 c0       	rjmp	.+16     	; 0x1e96 <qdec_enabled+0x324>
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	90 71       	andi	r25, 0x10	; 16
    1e8a:	93 83       	std	Z+3, r25	; 0x03
    1e8c:	93 81       	ldd	r25, Z+3	; 0x03
    1e8e:	90 6c       	ori	r25, 0xC0	; 192
    1e90:	89 2b       	or	r24, r25
    1e92:	83 83       	std	Z+3, r24	; 0x03
    1e94:	07 c0       	rjmp	.+14     	; 0x1ea4 <qdec_enabled+0x332>
    1e96:	93 81       	ldd	r25, Z+3	; 0x03
    1e98:	90 71       	andi	r25, 0x10	; 16
    1e9a:	93 83       	std	Z+3, r25	; 0x03
    1e9c:	93 81       	ldd	r25, Z+3	; 0x03
    1e9e:	90 6c       	ori	r25, 0xC0	; 192
    1ea0:	89 2b       	or	r24, r25
    1ea2:	83 83       	std	Z+3, r24	; 0x03
    1ea4:	e9 89       	ldd	r30, Y+17	; 0x11
    1ea6:	fa 89       	ldd	r31, Y+18	; 0x12
    1ea8:	e6 fd       	sbrc	r30, 6
    1eaa:	03 c0       	rjmp	.+6      	; 0x1eb2 <qdec_enabled+0x340>
    1eac:	10 a2       	std	Z+32, r1	; 0x20
    1eae:	11 a2       	std	Z+33, r1	; 0x21
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <qdec_enabled+0x344>
    1eb2:	10 a2       	std	Z+32, r1	; 0x20
    1eb4:	11 a2       	std	Z+33, r1	; 0x21
    1eb6:	e9 89       	ldd	r30, Y+17	; 0x11
    1eb8:	fa 89       	ldd	r31, Y+18	; 0x12
    1eba:	e6 fd       	sbrc	r30, 6
    1ebc:	05 c0       	rjmp	.+10     	; 0x1ec8 <qdec_enabled+0x356>
    1ebe:	8f ef       	ldi	r24, 0xFF	; 255
    1ec0:	9f ef       	ldi	r25, 0xFF	; 255
    1ec2:	86 a3       	std	Z+38, r24	; 0x26
    1ec4:	97 a3       	std	Z+39, r25	; 0x27
    1ec6:	04 c0       	rjmp	.+8      	; 0x1ed0 <qdec_enabled+0x35e>
    1ec8:	8f ef       	ldi	r24, 0xFF	; 255
    1eca:	9f ef       	ldi	r25, 0xFF	; 255
    1ecc:	86 a3       	std	Z+38, r24	; 0x26
    1ece:	97 a3       	std	Z+39, r25	; 0x27
    1ed0:	e9 89       	ldd	r30, Y+17	; 0x11
    1ed2:	fa 89       	ldd	r31, Y+18	; 0x12
    1ed4:	e6 fd       	sbrc	r30, 6
    1ed6:	04 c0       	rjmp	.+8      	; 0x1ee0 <qdec_enabled+0x36e>
    1ed8:	84 81       	ldd	r24, Z+4	; 0x04
    1eda:	82 60       	ori	r24, 0x02	; 2
    1edc:	84 83       	std	Z+4, r24	; 0x04
    1ede:	03 c0       	rjmp	.+6      	; 0x1ee6 <qdec_enabled+0x374>
    1ee0:	84 81       	ldd	r24, Z+4	; 0x04
    1ee2:	82 60       	ori	r24, 0x02	; 2
    1ee4:	84 83       	std	Z+4, r24	; 0x04
    1ee6:	6b 89       	ldd	r22, Y+19	; 0x13
    1ee8:	7c 89       	ldd	r23, Y+20	; 0x14
    1eea:	8d 89       	ldd	r24, Y+21	; 0x15
    1eec:	9e 89       	ldd	r25, Y+22	; 0x16
    1eee:	28 ee       	ldi	r18, 0xE8	; 232
    1ef0:	33 e0       	ldi	r19, 0x03	; 3
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	50 e0       	ldi	r21, 0x00	; 0
    1ef6:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__udivmodsi4>
    1efa:	ca 01       	movw	r24, r20
    1efc:	b9 01       	movw	r22, r18
    1efe:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f00:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	50 e0       	ldi	r21, 0x00	; 0
    1f06:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__udivmodsi4>
    1f0a:	e9 89       	ldd	r30, Y+17	; 0x11
    1f0c:	fa 89       	ldd	r31, Y+18	; 0x12
    1f0e:	23 31       	cpi	r18, 0x13	; 19
    1f10:	8a e7       	ldi	r24, 0x7A	; 122
    1f12:	38 07       	cpc	r19, r24
    1f14:	41 05       	cpc	r20, r1
    1f16:	51 05       	cpc	r21, r1
    1f18:	60 f4       	brcc	.+24     	; 0x1f32 <qdec_enabled+0x3c0>
    1f1a:	e6 fd       	sbrc	r30, 6
    1f1c:	05 c0       	rjmp	.+10     	; 0x1f28 <qdec_enabled+0x3b6>
    1f1e:	80 81       	ld	r24, Z
    1f20:	80 7f       	andi	r24, 0xF0	; 240
    1f22:	87 60       	ori	r24, 0x07	; 7
    1f24:	80 83       	st	Z, r24
    1f26:	6d c0       	rjmp	.+218    	; 0x2002 <qdec_enabled+0x490>
    1f28:	80 81       	ld	r24, Z
    1f2a:	80 7f       	andi	r24, 0xF0	; 240
    1f2c:	87 60       	ori	r24, 0x07	; 7
    1f2e:	80 83       	st	Z, r24
    1f30:	68 c0       	rjmp	.+208    	; 0x2002 <qdec_enabled+0x490>
    1f32:	29 34       	cpi	r18, 0x49	; 73
    1f34:	88 ee       	ldi	r24, 0xE8	; 232
    1f36:	38 07       	cpc	r19, r24
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	48 07       	cpc	r20, r24
    1f3c:	51 05       	cpc	r21, r1
    1f3e:	60 f4       	brcc	.+24     	; 0x1f58 <qdec_enabled+0x3e6>
    1f40:	e6 fd       	sbrc	r30, 6
    1f42:	05 c0       	rjmp	.+10     	; 0x1f4e <qdec_enabled+0x3dc>
    1f44:	80 81       	ld	r24, Z
    1f46:	80 7f       	andi	r24, 0xF0	; 240
    1f48:	86 60       	ori	r24, 0x06	; 6
    1f4a:	80 83       	st	Z, r24
    1f4c:	5a c0       	rjmp	.+180    	; 0x2002 <qdec_enabled+0x490>
    1f4e:	80 81       	ld	r24, Z
    1f50:	80 7f       	andi	r24, 0xF0	; 240
    1f52:	86 60       	ori	r24, 0x06	; 6
    1f54:	80 83       	st	Z, r24
    1f56:	55 c0       	rjmp	.+170    	; 0x2002 <qdec_enabled+0x490>
    1f58:	21 32       	cpi	r18, 0x21	; 33
    1f5a:	81 ea       	ldi	r24, 0xA1	; 161
    1f5c:	38 07       	cpc	r19, r24
    1f5e:	87 e0       	ldi	r24, 0x07	; 7
    1f60:	48 07       	cpc	r20, r24
    1f62:	51 05       	cpc	r21, r1
    1f64:	60 f4       	brcc	.+24     	; 0x1f7e <qdec_enabled+0x40c>
    1f66:	e6 fd       	sbrc	r30, 6
    1f68:	05 c0       	rjmp	.+10     	; 0x1f74 <qdec_enabled+0x402>
    1f6a:	80 81       	ld	r24, Z
    1f6c:	80 7f       	andi	r24, 0xF0	; 240
    1f6e:	85 60       	ori	r24, 0x05	; 5
    1f70:	80 83       	st	Z, r24
    1f72:	47 c0       	rjmp	.+142    	; 0x2002 <qdec_enabled+0x490>
    1f74:	80 81       	ld	r24, Z
    1f76:	80 7f       	andi	r24, 0xF0	; 240
    1f78:	85 60       	ori	r24, 0x05	; 5
    1f7a:	80 83       	st	Z, r24
    1f7c:	42 c0       	rjmp	.+132    	; 0x2002 <qdec_enabled+0x490>
    1f7e:	21 30       	cpi	r18, 0x01	; 1
    1f80:	89 e0       	ldi	r24, 0x09	; 9
    1f82:	38 07       	cpc	r19, r24
    1f84:	8d e3       	ldi	r24, 0x3D	; 61
    1f86:	48 07       	cpc	r20, r24
    1f88:	51 05       	cpc	r21, r1
    1f8a:	60 f4       	brcc	.+24     	; 0x1fa4 <qdec_enabled+0x432>
    1f8c:	e6 fd       	sbrc	r30, 6
    1f8e:	05 c0       	rjmp	.+10     	; 0x1f9a <qdec_enabled+0x428>
    1f90:	80 81       	ld	r24, Z
    1f92:	80 7f       	andi	r24, 0xF0	; 240
    1f94:	84 60       	ori	r24, 0x04	; 4
    1f96:	80 83       	st	Z, r24
    1f98:	34 c0       	rjmp	.+104    	; 0x2002 <qdec_enabled+0x490>
    1f9a:	80 81       	ld	r24, Z
    1f9c:	80 7f       	andi	r24, 0xF0	; 240
    1f9e:	84 60       	ori	r24, 0x04	; 4
    1fa0:	80 83       	st	Z, r24
    1fa2:	2f c0       	rjmp	.+94     	; 0x2002 <qdec_enabled+0x490>
    1fa4:	21 30       	cpi	r18, 0x01	; 1
    1fa6:	82 e1       	ldi	r24, 0x12	; 18
    1fa8:	38 07       	cpc	r19, r24
    1faa:	8a e7       	ldi	r24, 0x7A	; 122
    1fac:	48 07       	cpc	r20, r24
    1fae:	51 05       	cpc	r21, r1
    1fb0:	60 f4       	brcc	.+24     	; 0x1fca <qdec_enabled+0x458>
    1fb2:	e6 fd       	sbrc	r30, 6
    1fb4:	05 c0       	rjmp	.+10     	; 0x1fc0 <qdec_enabled+0x44e>
    1fb6:	80 81       	ld	r24, Z
    1fb8:	80 7f       	andi	r24, 0xF0	; 240
    1fba:	83 60       	ori	r24, 0x03	; 3
    1fbc:	80 83       	st	Z, r24
    1fbe:	21 c0       	rjmp	.+66     	; 0x2002 <qdec_enabled+0x490>
    1fc0:	80 81       	ld	r24, Z
    1fc2:	80 7f       	andi	r24, 0xF0	; 240
    1fc4:	83 60       	ori	r24, 0x03	; 3
    1fc6:	80 83       	st	Z, r24
    1fc8:	1c c0       	rjmp	.+56     	; 0x2002 <qdec_enabled+0x490>
    1fca:	21 30       	cpi	r18, 0x01	; 1
    1fcc:	34 42       	sbci	r19, 0x24	; 36
    1fce:	44 4f       	sbci	r20, 0xF4	; 244
    1fd0:	51 05       	cpc	r21, r1
    1fd2:	60 f4       	brcc	.+24     	; 0x1fec <qdec_enabled+0x47a>
    1fd4:	e6 fd       	sbrc	r30, 6
    1fd6:	05 c0       	rjmp	.+10     	; 0x1fe2 <qdec_enabled+0x470>
    1fd8:	80 81       	ld	r24, Z
    1fda:	80 7f       	andi	r24, 0xF0	; 240
    1fdc:	82 60       	ori	r24, 0x02	; 2
    1fde:	80 83       	st	Z, r24
    1fe0:	10 c0       	rjmp	.+32     	; 0x2002 <qdec_enabled+0x490>
    1fe2:	80 81       	ld	r24, Z
    1fe4:	80 7f       	andi	r24, 0xF0	; 240
    1fe6:	82 60       	ori	r24, 0x02	; 2
    1fe8:	80 83       	st	Z, r24
    1fea:	0b c0       	rjmp	.+22     	; 0x2002 <qdec_enabled+0x490>
    1fec:	e6 fd       	sbrc	r30, 6
    1fee:	05 c0       	rjmp	.+10     	; 0x1ffa <qdec_enabled+0x488>
    1ff0:	80 81       	ld	r24, Z
    1ff2:	80 7f       	andi	r24, 0xF0	; 240
    1ff4:	81 60       	ori	r24, 0x01	; 1
    1ff6:	80 83       	st	Z, r24
    1ff8:	04 c0       	rjmp	.+8      	; 0x2002 <qdec_enabled+0x490>
    1ffa:	80 81       	ld	r24, Z
    1ffc:	80 7f       	andi	r24, 0xF0	; 240
    1ffe:	81 60       	ori	r24, 0x01	; 1
    2000:	80 83       	st	Z, r24
    2002:	e9 89       	ldd	r30, Y+17	; 0x11
    2004:	fa 89       	ldd	r31, Y+18	; 0x12
    2006:	e6 fd       	sbrc	r30, 6
    2008:	03 c0       	rjmp	.+6      	; 0x2010 <qdec_enabled+0x49e>
    200a:	80 81       	ld	r24, Z
    200c:	8f 70       	andi	r24, 0x0F	; 15
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <qdec_enabled+0x4a2>
    2010:	80 81       	ld	r24, Z
    2012:	8f 70       	andi	r24, 0x0F	; 15
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	fc 01       	movw	r30, r24
    2018:	31 97       	sbiw	r30, 0x01	; 1
    201a:	e7 30       	cpi	r30, 0x07	; 7
    201c:	f1 05       	cpc	r31, r1
    201e:	38 f5       	brcc	.+78     	; 0x206e <qdec_enabled+0x4fc>
    2020:	ea 5a       	subi	r30, 0xAA	; 170
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__tablejump2__>
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	98 e4       	ldi	r25, 0x48	; 72
    202c:	a8 ee       	ldi	r26, 0xE8	; 232
    202e:	b1 e0       	ldi	r27, 0x01	; 1
    2030:	21 c0       	rjmp	.+66     	; 0x2074 <qdec_enabled+0x502>
    2032:	82 e1       	ldi	r24, 0x12	; 18
    2034:	9a e7       	ldi	r25, 0x7A	; 122
    2036:	a0 e0       	ldi	r26, 0x00	; 0
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	1c c0       	rjmp	.+56     	; 0x2074 <qdec_enabled+0x502>
    203c:	88 e4       	ldi	r24, 0x48	; 72
    203e:	98 ee       	ldi	r25, 0xE8	; 232
    2040:	a1 e0       	ldi	r26, 0x01	; 1
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	17 c0       	rjmp	.+46     	; 0x2074 <qdec_enabled+0x502>
    2046:	80 e2       	ldi	r24, 0x20	; 32
    2048:	91 ea       	ldi	r25, 0xA1	; 161
    204a:	a7 e0       	ldi	r26, 0x07	; 7
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	12 c0       	rjmp	.+36     	; 0x2074 <qdec_enabled+0x502>
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	99 e0       	ldi	r25, 0x09	; 9
    2054:	ad e3       	ldi	r26, 0x3D	; 61
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	0d c0       	rjmp	.+26     	; 0x2074 <qdec_enabled+0x502>
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	92 e1       	ldi	r25, 0x12	; 18
    205e:	aa e7       	ldi	r26, 0x7A	; 122
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	08 c0       	rjmp	.+16     	; 0x2074 <qdec_enabled+0x502>
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	94 e2       	ldi	r25, 0x24	; 36
    2068:	a4 ef       	ldi	r26, 0xF4	; 244
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	03 c0       	rjmp	.+6      	; 0x2074 <qdec_enabled+0x502>
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	dc 01       	movw	r26, r24
    2074:	1c 01       	movw	r2, r24
    2076:	2d 01       	movw	r4, r26
    2078:	28 2f       	mov	r18, r24
    207a:	33 2d       	mov	r19, r3
    207c:	44 2d       	mov	r20, r4
    207e:	55 2d       	mov	r21, r5
    2080:	60 e0       	ldi	r22, 0x00	; 0
    2082:	70 e0       	ldi	r23, 0x00	; 0
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	06 e0       	ldi	r16, 0x06	; 6
    208a:	0e 94 8b 19 	call	0x3316	; 0x3316 <__ashldi3>
    208e:	a2 2c       	mov	r10, r2
    2090:	b3 2c       	mov	r11, r3
    2092:	c4 2c       	mov	r12, r4
    2094:	d5 2c       	mov	r13, r5
    2096:	e1 2c       	mov	r14, r1
    2098:	f1 2c       	mov	r15, r1
    209a:	00 e0       	ldi	r16, 0x00	; 0
    209c:	10 e0       	ldi	r17, 0x00	; 0
    209e:	0e 94 a4 19 	call	0x3348	; 0x3348 <__subdi3>
    20a2:	01 e0       	ldi	r16, 0x01	; 1
    20a4:	0e 94 8b 19 	call	0x3316	; 0x3316 <__ashldi3>
    20a8:	00 e0       	ldi	r16, 0x00	; 0
    20aa:	0e 94 a4 19 	call	0x3348	; 0x3348 <__subdi3>
    20ae:	03 e0       	ldi	r16, 0x03	; 3
    20b0:	0e 94 8b 19 	call	0x3316	; 0x3316 <__ashldi3>
    20b4:	cb 88       	ldd	r12, Y+19	; 0x13
    20b6:	dc 88       	ldd	r13, Y+20	; 0x14
    20b8:	ed 88       	ldd	r14, Y+21	; 0x15
    20ba:	fe 88       	ldd	r15, Y+22	; 0x16
    20bc:	16 01       	movw	r2, r12
    20be:	27 01       	movw	r4, r14
    20c0:	ac 2c       	mov	r10, r12
    20c2:	b3 2c       	mov	r11, r3
    20c4:	c4 2c       	mov	r12, r4
    20c6:	d5 2c       	mov	r13, r5
    20c8:	e1 2c       	mov	r14, r1
    20ca:	f1 2c       	mov	r15, r1
    20cc:	00 e0       	ldi	r16, 0x00	; 0
    20ce:	0e 94 2f 19 	call	0x325e	; 0x325e <__udivdi3>
    20d2:	02 e0       	ldi	r16, 0x02	; 2
    20d4:	0e 94 8b 19 	call	0x3316	; 0x3316 <__ashldi3>
    20d8:	2d 84       	ldd	r2, Y+13	; 0x0d
    20da:	3e 84       	ldd	r3, Y+14	; 0x0e
    20dc:	a2 2c       	mov	r10, r2
    20de:	b3 2c       	mov	r11, r3
    20e0:	c1 2c       	mov	r12, r1
    20e2:	d1 2c       	mov	r13, r1
    20e4:	00 e0       	ldi	r16, 0x00	; 0
    20e6:	0e 94 2f 19 	call	0x325e	; 0x325e <__udivdi3>
    20ea:	2f 8b       	std	Y+23, r18	; 0x17
    20ec:	38 8f       	std	Y+24, r19	; 0x18
    20ee:	49 8f       	std	Y+25, r20	; 0x19
    20f0:	5a 8f       	std	Y+26, r21	; 0x1a
    20f2:	1b 8e       	std	Y+27, r1	; 0x1b
    20f4:	1c 8e       	std	Y+28, r1	; 0x1c
    20f6:	0a c0       	rjmp	.+20     	; 0x210c <qdec_enabled+0x59a>
    20f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    20fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    20fc:	88 d3       	rcall	.+1808   	; 0x280e <tc45_enable>
    20fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2100:	88 5f       	subi	r24, 0xF8	; 248
    2102:	eb 85       	ldd	r30, Y+11	; 0x0b
    2104:	fc 85       	ldd	r31, Y+12	; 0x0c
    2106:	e6 fd       	sbrc	r30, 6
    2108:	5f ce       	rjmp	.-834    	; 0x1dc8 <qdec_enabled+0x256>
    210a:	56 ce       	rjmp	.-852    	; 0x1db8 <qdec_enabled+0x246>
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	1f 91       	pop	r17
    2112:	0f 91       	pop	r16
    2114:	ff 90       	pop	r15
    2116:	ef 90       	pop	r14
    2118:	df 90       	pop	r13
    211a:	cf 90       	pop	r12
    211c:	bf 90       	pop	r11
    211e:	af 90       	pop	r10
    2120:	9f 90       	pop	r9
    2122:	8f 90       	pop	r8
    2124:	7f 90       	pop	r7
    2126:	6f 90       	pop	r6
    2128:	5f 90       	pop	r5
    212a:	4f 90       	pop	r4
    212c:	3f 90       	pop	r3
    212e:	2f 90       	pop	r2
    2130:	08 95       	ret

00002132 <qdec_get_position>:
	tc_write_count(config->timer, 0);
}

uint16_t qdec_get_position(qdec_config_t *config)
{
	return tc_read_count(config->timer);
    2132:	dc 01       	movw	r26, r24
    2134:	1b 96       	adiw	r26, 0x0b	; 11
    2136:	ed 91       	ld	r30, X+
    2138:	fc 91       	ld	r31, X
    213a:	1c 97       	sbiw	r26, 0x0c	; 12
 *
 * \return The counter (CNT) value of a tc.
 */
static inline uint16_t tc45_read_count(volatile void *tc)
{
	if (tc45_is_TC4(void *tc)) {
    213c:	e6 fd       	sbrc	r30, 6
    213e:	03 c0       	rjmp	.+6      	; 0x2146 <qdec_get_position+0x14>
		return (((TC4_t *)tc)->CNT);
    2140:	80 a1       	ldd	r24, Z+32	; 0x20
    2142:	91 a1       	ldd	r25, Z+33	; 0x21
    2144:	08 95       	ret
	} else if (tc45_is_TC5(void *tc)) {
		return (((TC5_t *)tc)->CNT);
    2146:	80 a1       	ldd	r24, Z+32	; 0x20
    2148:	91 a1       	ldd	r25, Z+33	; 0x21
}
    214a:	08 95       	ret

0000214c <rtc_get_time>:
 */
void rtc_load_calibration(uint8_t error_value, uint8_t sign)
{
	/* Error, if sign flag not either 0 or 1*/
	Assert( sign <= 0x01);
	RTC.CALIB = sign | error_value;
    214c:	0f 93       	push	r16
    214e:	1f 93       	push	r17
    2150:	e0 e0       	ldi	r30, 0x00	; 0
    2152:	f4 e0       	ldi	r31, 0x04	; 4
    2154:	81 81       	ldd	r24, Z+1	; 0x01
    2156:	80 fd       	sbrc	r24, 0
    2158:	fd cf       	rjmp	.-6      	; 0x2154 <rtc_get_time+0x8>
    215a:	2f b7       	in	r18, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	40 91 75 23 	lds	r20, 0x2375
    2162:	50 91 76 23 	lds	r21, 0x2376
    2166:	e0 e0       	ldi	r30, 0x00	; 0
    2168:	f4 e0       	ldi	r31, 0x04	; 4
    216a:	80 85       	ldd	r24, Z+8	; 0x08
    216c:	91 85       	ldd	r25, Z+9	; 0x09
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	29 f4       	brne	.+10     	; 0x217c <rtc_get_time+0x30>
    2172:	33 81       	ldd	r19, Z+3	; 0x03
    2174:	30 ff       	sbrs	r19, 0
    2176:	02 c0       	rjmp	.+4      	; 0x217c <rtc_get_time+0x30>
    2178:	4f 5f       	subi	r20, 0xFF	; 255
    217a:	5f 4f       	sbci	r21, 0xFF	; 255
    217c:	2f bf       	out	0x3f, r18	; 63
    217e:	60 e0       	ldi	r22, 0x00	; 0
    2180:	70 e0       	ldi	r23, 0x00	; 0
    2182:	ba 01       	movw	r22, r20
    2184:	55 27       	eor	r21, r21
    2186:	44 27       	eor	r20, r20
    2188:	a0 e0       	ldi	r26, 0x00	; 0
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	8a 01       	movw	r16, r20
    218e:	9b 01       	movw	r18, r22
    2190:	08 2b       	or	r16, r24
    2192:	19 2b       	or	r17, r25
    2194:	2a 2b       	or	r18, r26
    2196:	3b 2b       	or	r19, r27
    2198:	c9 01       	movw	r24, r18
    219a:	b8 01       	movw	r22, r16
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	08 95       	ret

000021a2 <rtc_set_alarm>:
    21a2:	e0 e0       	ldi	r30, 0x00	; 0
    21a4:	f4 e0       	ldi	r31, 0x04	; 4
    21a6:	21 e0       	ldi	r18, 0x01	; 1
    21a8:	22 83       	std	Z+2, r18	; 0x02
    21aa:	64 87       	std	Z+12, r22	; 0x0c
    21ac:	75 87       	std	Z+13, r23	; 0x0d
    21ae:	60 93 79 23 	sts	0x2379, r22
    21b2:	70 93 7a 23 	sts	0x237A, r23
    21b6:	80 93 77 23 	sts	0x2377, r24
    21ba:	90 93 78 23 	sts	0x2378, r25
    21be:	81 81       	ldd	r24, Z+1	; 0x01
    21c0:	80 fd       	sbrc	r24, 0
    21c2:	fd cf       	rjmp	.-6      	; 0x21be <rtc_set_alarm+0x1c>
    21c4:	e0 e0       	ldi	r30, 0x00	; 0
    21c6:	f4 e0       	ldi	r31, 0x04	; 4
    21c8:	82 e0       	ldi	r24, 0x02	; 2
    21ca:	83 83       	std	Z+3, r24	; 0x03
    21cc:	85 e0       	ldi	r24, 0x05	; 5
    21ce:	82 83       	std	Z+2, r24	; 0x02
    21d0:	08 95       	ret

000021d2 <rtc_set_callback>:
    21d2:	80 93 7b 23 	sts	0x237B, r24
    21d6:	90 93 7c 23 	sts	0x237C, r25
    21da:	08 95       	ret

000021dc <rtc_init>:
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    21dc:	64 e0       	ldi	r22, 0x04	; 4
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
	RTC.PER = 0xffff;
    21e4:	e0 e0       	ldi	r30, 0x00	; 0
    21e6:	f4 e0       	ldi	r31, 0x04	; 4
    21e8:	8f ef       	ldi	r24, 0xFF	; 255
    21ea:	9f ef       	ldi	r25, 0xFF	; 255
    21ec:	82 87       	std	Z+10, r24	; 0x0a
    21ee:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
    21f0:	10 86       	std	Z+8, r1	; 0x08
    21f2:	11 86       	std	Z+9, r1	; 0x09

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    21f4:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    21f6:	f8 94       	cli
    21f8:	ea e6       	ldi	r30, 0x6A	; 106
    21fa:	f3 e2       	ldi	r31, 0x23	; 35
    21fc:	90 81       	ld	r25, Z
    21fe:	9f 5f       	subi	r25, 0xFF	; 255
    2200:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2202:	8f bf       	out	0x3f, r24	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    2204:	e0 e0       	ldi	r30, 0x00	; 0
    2206:	f4 e0       	ldi	r31, 0x04	; 4
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
    220c:	86 e0       	ldi	r24, 0x06	; 6
    220e:	80 83       	st	Z, r24
    2210:	08 95       	ret

00002212 <__vector_7>:

/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
    2212:	1f 92       	push	r1
    2214:	0f 92       	push	r0
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	0f 92       	push	r0
    221a:	11 24       	eor	r1, r1
    221c:	2f 93       	push	r18
    221e:	3f 93       	push	r19
    2220:	4f 93       	push	r20
    2222:	5f 93       	push	r21
    2224:	6f 93       	push	r22
    2226:	7f 93       	push	r23
    2228:	8f 93       	push	r24
    222a:	9f 93       	push	r25
    222c:	af 93       	push	r26
    222e:	bf 93       	push	r27
    2230:	ef 93       	push	r30
    2232:	ff 93       	push	r31
    2234:	0e 94 ac 02 	call	0x558	; 0x558 <app_cpu_load_exit_sleep>
{
	rtc_data.counter_high++;
    2238:	e5 e7       	ldi	r30, 0x75	; 117
    223a:	f3 e2       	ldi	r31, 0x23	; 35
    223c:	80 81       	ld	r24, Z
    223e:	91 81       	ldd	r25, Z+1	; 0x01
    2240:	01 96       	adiw	r24, 0x01	; 1
    2242:	80 83       	st	Z, r24
    2244:	91 83       	std	Z+1, r25	; 0x01

/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
    2246:	ff 91       	pop	r31
    2248:	ef 91       	pop	r30
    224a:	bf 91       	pop	r27
    224c:	af 91       	pop	r26
    224e:	9f 91       	pop	r25
    2250:	8f 91       	pop	r24
    2252:	7f 91       	pop	r23
    2254:	6f 91       	pop	r22
    2256:	5f 91       	pop	r21
    2258:	4f 91       	pop	r20
    225a:	3f 91       	pop	r19
    225c:	2f 91       	pop	r18
    225e:	0f 90       	pop	r0
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	0f 90       	pop	r0
    2264:	1f 90       	pop	r1
    2266:	18 95       	reti

00002268 <__vector_8>:

/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
    2268:	1f 92       	push	r1
    226a:	0f 92       	push	r0
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	0f 92       	push	r0
    2270:	11 24       	eor	r1, r1
    2272:	cf 92       	push	r12
    2274:	df 92       	push	r13
    2276:	ef 92       	push	r14
    2278:	ff 92       	push	r15
    227a:	0f 93       	push	r16
    227c:	1f 93       	push	r17
    227e:	2f 93       	push	r18
    2280:	3f 93       	push	r19
    2282:	4f 93       	push	r20
    2284:	5f 93       	push	r21
    2286:	6f 93       	push	r22
    2288:	7f 93       	push	r23
    228a:	8f 93       	push	r24
    228c:	9f 93       	push	r25
    228e:	af 93       	push	r26
    2290:	bf 93       	push	r27
    2292:	ef 93       	push	r30
    2294:	ff 93       	push	r31
    2296:	0e 94 ac 02 	call	0x558	; 0x558 <app_cpu_load_exit_sleep>
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    229a:	40 91 75 23 	lds	r20, 0x2375
    229e:	50 91 76 23 	lds	r21, 0x2376
    22a2:	80 91 77 23 	lds	r24, 0x2377
    22a6:	90 91 78 23 	lds	r25, 0x2378
    22aa:	48 17       	cp	r20, r24
    22ac:	59 07       	cpc	r21, r25
    22ae:	f0 f1       	brcs	.+124    	; 0x232c <__vector_8+0xc4>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	e0 e0       	ldi	r30, 0x00	; 0
    22b4:	f4 e0       	ldi	r31, 0x04	; 4
    22b6:	82 83       	std	Z+2, r24	; 0x02
		if (rtc_data.callback) {
    22b8:	e0 91 7b 23 	lds	r30, 0x237B
    22bc:	f0 91 7c 23 	lds	r31, 0x237C
    22c0:	30 97       	sbiw	r30, 0x00	; 0
    22c2:	a1 f1       	breq	.+104    	; 0x232c <__vector_8+0xc4>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
    22c4:	a0 e0       	ldi	r26, 0x00	; 0
    22c6:	b4 e0       	ldi	r27, 0x04	; 4
    22c8:	18 96       	adiw	r26, 0x08	; 8
    22ca:	8d 91       	ld	r24, X+
    22cc:	9c 91       	ld	r25, X
    22ce:	19 97       	sbiw	r26, 0x09	; 9
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	70 e0       	ldi	r23, 0x00	; 0
    22d4:	ba 01       	movw	r22, r20
    22d6:	55 27       	eor	r21, r21
    22d8:	44 27       	eor	r20, r20
					| RTC.CNT;
    22da:	a0 e0       	ldi	r26, 0x00	; 0
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    22de:	8a 01       	movw	r16, r20
    22e0:	9b 01       	movw	r18, r22
    22e2:	08 2b       	or	r16, r24
    22e4:	19 2b       	or	r17, r25
    22e6:	2a 2b       	or	r18, r26
    22e8:	3b 2b       	or	r19, r27
    22ea:	c9 01       	movw	r24, r18
    22ec:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    22ee:	00 91 77 23 	lds	r16, 0x2377
    22f2:	10 91 78 23 	lds	r17, 0x2378
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	98 01       	movw	r18, r16
    22fc:	11 27       	eor	r17, r17
    22fe:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
    2300:	c0 90 79 23 	lds	r12, 0x2379
    2304:	d0 90 7a 23 	lds	r13, 0x237A
    2308:	e1 2c       	mov	r14, r1
    230a:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    230c:	0c 29       	or	r16, r12
    230e:	1d 29       	or	r17, r13
    2310:	2e 29       	or	r18, r14
    2312:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    2314:	06 17       	cp	r16, r22
    2316:	17 07       	cpc	r17, r23
    2318:	28 07       	cpc	r18, r24
    231a:	39 07       	cpc	r19, r25
    231c:	30 f0       	brcs	.+12     	; 0x232a <__vector_8+0xc2>
				count = alarm + 1;
    231e:	c9 01       	movw	r24, r18
    2320:	b8 01       	movw	r22, r16
    2322:	6f 5f       	subi	r22, 0xFF	; 255
    2324:	7f 4f       	sbci	r23, 0xFF	; 255
    2326:	8f 4f       	sbci	r24, 0xFF	; 255
    2328:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
    232a:	09 95       	icall

/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
    232c:	ff 91       	pop	r31
    232e:	ef 91       	pop	r30
    2330:	bf 91       	pop	r27
    2332:	af 91       	pop	r26
    2334:	9f 91       	pop	r25
    2336:	8f 91       	pop	r24
    2338:	7f 91       	pop	r23
    233a:	6f 91       	pop	r22
    233c:	5f 91       	pop	r21
    233e:	4f 91       	pop	r20
    2340:	3f 91       	pop	r19
    2342:	2f 91       	pop	r18
    2344:	1f 91       	pop	r17
    2346:	0f 91       	pop	r16
    2348:	ff 90       	pop	r15
    234a:	ef 90       	pop	r14
    234c:	df 90       	pop	r13
    234e:	cf 90       	pop	r12
    2350:	0f 90       	pop	r0
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	0f 90       	pop	r0
    2356:	1f 90       	pop	r1
    2358:	18 95       	reti

0000235a <__vector_12>:
 * \brief Interrupt handler for Timer Counter C4 overflow
 *
 * This function will handle interrupt on Timer Counter C4 overflow and
 * call the callback function.
 */
ISR(TCC4_OVF_vect)
    235a:	1f 92       	push	r1
    235c:	0f 92       	push	r0
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	0f 92       	push	r0
    2362:	11 24       	eor	r1, r1
    2364:	2f 93       	push	r18
    2366:	3f 93       	push	r19
    2368:	4f 93       	push	r20
    236a:	5f 93       	push	r21
    236c:	6f 93       	push	r22
    236e:	7f 93       	push	r23
    2370:	8f 93       	push	r24
    2372:	9f 93       	push	r25
    2374:	af 93       	push	r26
    2376:	bf 93       	push	r27
    2378:	ef 93       	push	r30
    237a:	ff 93       	push	r31
    237c:	0e 94 ac 02 	call	0x558	; 0x558 <app_cpu_load_exit_sleep>
{
	if (tc45_tcc4_ovf_callback) {
    2380:	e0 91 65 23 	lds	r30, 0x2365
    2384:	f0 91 66 23 	lds	r31, 0x2366
    2388:	30 97       	sbiw	r30, 0x00	; 0
    238a:	09 f0       	breq	.+2      	; 0x238e <__vector_12+0x34>
		tc45_tcc4_ovf_callback();
    238c:	09 95       	icall
 * \brief Interrupt handler for Timer Counter C4 overflow
 *
 * This function will handle interrupt on Timer Counter C4 overflow and
 * call the callback function.
 */
ISR(TCC4_OVF_vect)
    238e:	ff 91       	pop	r31
    2390:	ef 91       	pop	r30
    2392:	bf 91       	pop	r27
    2394:	af 91       	pop	r26
    2396:	9f 91       	pop	r25
    2398:	8f 91       	pop	r24
    239a:	7f 91       	pop	r23
    239c:	6f 91       	pop	r22
    239e:	5f 91       	pop	r21
    23a0:	4f 91       	pop	r20
    23a2:	3f 91       	pop	r19
    23a4:	2f 91       	pop	r18
    23a6:	0f 90       	pop	r0
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	0f 90       	pop	r0
    23ac:	1f 90       	pop	r1
    23ae:	18 95       	reti

000023b0 <__vector_13>:
 * \brief Interrupt handler for Timer Counter C4 error
 *
 * This function will handle interrupt on Timer Counter C4 error and
 * call the callback function.
 */
ISR(TCC4_ERR_vect)
    23b0:	1f 92       	push	r1
    23b2:	0f 92       	push	r0
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	0f 92       	push	r0
    23b8:	11 24       	eor	r1, r1
    23ba:	2f 93       	push	r18
    23bc:	3f 93       	push	r19
    23be:	4f 93       	push	r20
    23c0:	5f 93       	push	r21
    23c2:	6f 93       	push	r22
    23c4:	7f 93       	push	r23
    23c6:	8f 93       	push	r24
    23c8:	9f 93       	push	r25
    23ca:	af 93       	push	r26
    23cc:	bf 93       	push	r27
    23ce:	ef 93       	push	r30
    23d0:	ff 93       	push	r31
    23d2:	0e 94 ac 02 	call	0x558	; 0x558 <app_cpu_load_exit_sleep>
{
	if (tc45_tcc4_err_callback) {
    23d6:	e0 91 63 23 	lds	r30, 0x2363
    23da:	f0 91 64 23 	lds	r31, 0x2364
    23de:	30 97       	sbiw	r30, 0x00	; 0
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <__vector_13+0x34>
		tc45_tcc4_err_callback();
    23e2:	09 95       	icall
 * \brief Interrupt handler for Timer Counter C4 error
 *
 * This function will handle interrupt on Timer Counter C4 error and
 * call the callback function.
 */
ISR(TCC4_ERR_vect)
    23e4:	ff 91       	pop	r31
    23e6:	ef 91       	pop	r30
    23e8:	bf 91       	pop	r27
    23ea:	af 91       	pop	r26
    23ec:	9f 91       	pop	r25
    23ee:	8f 91       	pop	r24
    23f0:	7f 91       	pop	r23
    23f2:	6f 91       	pop	r22
    23f4:	5f 91       	pop	r21
    23f6:	4f 91       	pop	r20
    23f8:	3f 91       	pop	r19
    23fa:	2f 91       	pop	r18
    23fc:	0f 90       	pop	r0
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	0f 90       	pop	r0
    2402:	1f 90       	pop	r1
    2404:	18 95       	reti

00002406 <__vector_14>:
 * \brief Interrupt handler for Timer Counter C4 Compare/CaptureA
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC4_CCA_vect)
    2406:	1f 92       	push	r1
    2408:	0f 92       	push	r0
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	0f 92       	push	r0
    240e:	11 24       	eor	r1, r1
    2410:	2f 93       	push	r18
    2412:	3f 93       	push	r19
    2414:	4f 93       	push	r20
    2416:	5f 93       	push	r21
    2418:	6f 93       	push	r22
    241a:	7f 93       	push	r23
    241c:	8f 93       	push	r24
    241e:	9f 93       	push	r25
    2420:	af 93       	push	r26
    2422:	bf 93       	push	r27
    2424:	ef 93       	push	r30
    2426:	ff 93       	push	r31
    2428:	0e 94 ac 02 	call	0x558	; 0x558 <app_cpu_load_exit_sleep>
{
	if (tc45_tcc4_cca_callback) {
    242c:	e0 91 61 23 	lds	r30, 0x2361
    2430:	f0 91 62 23 	lds	r31, 0x2362
    2434:	30 97       	sbiw	r30, 0x00	; 0
    2436:	09 f0       	breq	.+2      	; 0x243a <__vector_14+0x34>
		tc45_tcc4_cca_callback();
    2438:	09 95       	icall
 * \brief Interrupt handler for Timer Counter C4 Compare/CaptureA
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC4_CCA_vect)
    243a:	ff 91       	pop	r31
    243c:	ef 91       	pop	r30
    243e:	bf 91       	pop	r27
    2440:	af 91       	pop	r26
    2442:	9f 91       	pop	r25
    2444:	8f 91       	pop	r24
    2446:	7f 91       	pop	r23
    2448:	6f 91       	pop	r22
    244a:	5f 91       	pop	r21
    244c:	4f 91       	pop	r20
    244e:	3f 91       	pop	r19
    2450:	2f 91       	pop	r18
    2452:	0f 90       	pop	r0
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	0f 90       	pop	r0
    2458:	1f 90       	pop	r1
    245a:	18 95       	reti

0000245c <__vector_15>:
 * \brief Interrupt handler for Timer Counter C4 Compare/CaptureB
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC4_CCB_vect)
    245c:	1f 92       	push	r1
    245e:	0f 92       	push	r0
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	0f 92       	push	r0
    2464:	11 24       	eor	r1, r1
    2466:	2f 93       	push	r18
    2468:	3f 93       	push	r19
    246a:	4f 93       	push	r20
    246c:	5f 93       	push	r21
    246e:	6f 93       	push	r22
    2470:	7f 93       	push	r23
    2472:	8f 93       	push	r24
    2474:	9f 93       	push	r25
    2476:	af 93       	push	r26
    2478:	bf 93       	push	r27
    247a:	ef 93       	push	r30
    247c:	ff 93       	push	r31
    247e:	0e 94 ac 02 	call	0x558	; 0x558 <app_cpu_load_exit_sleep>
{
	if (tc45_tcc4_ccb_callback) {
    2482:	e0 91 5f 23 	lds	r30, 0x235F
    2486:	f0 91 60 23 	lds	r31, 0x2360
    248a:	30 97       	sbiw	r30, 0x00	; 0
    248c:	09 f0       	breq	.+2      	; 0x2490 <__vector_15+0x34>
		tc45_tcc4_ccb_callback();
    248e:	09 95       	icall
 * \brief Interrupt handler for Timer Counter C4 Compare/CaptureB
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC4_CCB_vect)
    2490:	ff 91       	pop	r31
    2492:	ef 91       	pop	r30
    2494:	bf 91       	pop	r27
    2496:	af 91       	pop	r26
    2498:	9f 91       	pop	r25
    249a:	8f 91       	pop	r24
    249c:	7f 91       	pop	r23
    249e:	6f 91       	pop	r22
    24a0:	5f 91       	pop	r21
    24a2:	4f 91       	pop	r20
    24a4:	3f 91       	pop	r19
    24a6:	2f 91       	pop	r18
    24a8:	0f 90       	pop	r0
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	0f 90       	pop	r0
    24ae:	1f 90       	pop	r1
    24b0:	18 95       	reti

000024b2 <__vector_16>:
 * \brief Interrupt handler for Timer Counter C4 Compare/CaptureC
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC4_CCC_vect)
    24b2:	1f 92       	push	r1
    24b4:	0f 92       	push	r0
    24b6:	0f b6       	in	r0, 0x3f	; 63
    24b8:	0f 92       	push	r0
    24ba:	11 24       	eor	r1, r1
    24bc:	2f 93       	push	r18
    24be:	3f 93       	push	r19
    24c0:	4f 93       	push	r20
    24c2:	5f 93       	push	r21
    24c4:	6f 93       	push	r22
    24c6:	7f 93       	push	r23
    24c8:	8f 93       	push	r24
    24ca:	9f 93       	push	r25
    24cc:	af 93       	push	r26
    24ce:	bf 93       	push	r27
    24d0:	ef 93       	push	r30
    24d2:	ff 93       	push	r31
    24d4:	0e 94 ac 02 	call	0x558	; 0x558 <app_cpu_load_exit_sleep>
{
	if (tc45_tcc4_ccc_callback) {
    24d8:	e0 91 5d 23 	lds	r30, 0x235D
    24dc:	f0 91 5e 23 	lds	r31, 0x235E
    24e0:	30 97       	sbiw	r30, 0x00	; 0
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <__vector_16+0x34>
		tc45_tcc4_ccc_callback();
    24e4:	09 95       	icall
 * \brief Interrupt handler for Timer Counter C4 Compare/CaptureC
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC4_CCC_vect)
    24e6:	ff 91       	pop	r31
    24e8:	ef 91       	pop	r30
    24ea:	bf 91       	pop	r27
    24ec:	af 91       	pop	r26
    24ee:	9f 91       	pop	r25
    24f0:	8f 91       	pop	r24
    24f2:	7f 91       	pop	r23
    24f4:	6f 91       	pop	r22
    24f6:	5f 91       	pop	r21
    24f8:	4f 91       	pop	r20
    24fa:	3f 91       	pop	r19
    24fc:	2f 91       	pop	r18
    24fe:	0f 90       	pop	r0
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	0f 90       	pop	r0
    2504:	1f 90       	pop	r1
    2506:	18 95       	reti

00002508 <__vector_17>:
 * \brief Interrupt handler for Timer Counter C4 Compare/CaptureD
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC4_CCD_vect)
    2508:	1f 92       	push	r1
    250a:	0f 92       	push	r0
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	0f 92       	push	r0
    2510:	11 24       	eor	r1, r1
    2512:	2f 93       	push	r18
    2514:	3f 93       	push	r19
    2516:	4f 93       	push	r20
    2518:	5f 93       	push	r21
    251a:	6f 93       	push	r22
    251c:	7f 93       	push	r23
    251e:	8f 93       	push	r24
    2520:	9f 93       	push	r25
    2522:	af 93       	push	r26
    2524:	bf 93       	push	r27
    2526:	ef 93       	push	r30
    2528:	ff 93       	push	r31
    252a:	0e 94 ac 02 	call	0x558	; 0x558 <app_cpu_load_exit_sleep>
{
	if (tc45_tcc4_ccd_callback) {
    252e:	e0 91 5b 23 	lds	r30, 0x235B
    2532:	f0 91 5c 23 	lds	r31, 0x235C
    2536:	30 97       	sbiw	r30, 0x00	; 0
    2538:	09 f0       	breq	.+2      	; 0x253c <__vector_17+0x34>
		tc45_tcc4_ccd_callback();
    253a:	09 95       	icall
 * \brief Interrupt handler for Timer Counter C4 Compare/CaptureD
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC4_CCD_vect)
    253c:	ff 91       	pop	r31
    253e:	ef 91       	pop	r30
    2540:	bf 91       	pop	r27
    2542:	af 91       	pop	r26
    2544:	9f 91       	pop	r25
    2546:	8f 91       	pop	r24
    2548:	7f 91       	pop	r23
    254a:	6f 91       	pop	r22
    254c:	5f 91       	pop	r21
    254e:	4f 91       	pop	r20
    2550:	3f 91       	pop	r19
    2552:	2f 91       	pop	r18
    2554:	0f 90       	pop	r0
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	0f 90       	pop	r0
    255a:	1f 90       	pop	r1
    255c:	18 95       	reti

0000255e <__vector_18>:
 * \brief Interrupt handler for Timer Counter C5 overflow
 *
 * This function will handle interrupt on Timer Counter C5 overflow and
 * call the callback function.
 */
ISR(TCC5_OVF_vect)
    255e:	1f 92       	push	r1
    2560:	0f 92       	push	r0
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	0f 92       	push	r0
    2566:	11 24       	eor	r1, r1
    2568:	2f 93       	push	r18
    256a:	3f 93       	push	r19
    256c:	4f 93       	push	r20
    256e:	5f 93       	push	r21
    2570:	6f 93       	push	r22
    2572:	7f 93       	push	r23
    2574:	8f 93       	push	r24
    2576:	9f 93       	push	r25
    2578:	af 93       	push	r26
    257a:	bf 93       	push	r27
    257c:	ef 93       	push	r30
    257e:	ff 93       	push	r31
    2580:	0e 94 ac 02 	call	0x558	; 0x558 <app_cpu_load_exit_sleep>
{
	if (tc45_tcc5_ovf_callback) {
    2584:	e0 91 59 23 	lds	r30, 0x2359
    2588:	f0 91 5a 23 	lds	r31, 0x235A
    258c:	30 97       	sbiw	r30, 0x00	; 0
    258e:	09 f0       	breq	.+2      	; 0x2592 <__vector_18+0x34>
		tc45_tcc5_ovf_callback();
    2590:	09 95       	icall
 * \brief Interrupt handler for Timer Counter C5 overflow
 *
 * This function will handle interrupt on Timer Counter C5 overflow and
 * call the callback function.
 */
ISR(TCC5_OVF_vect)
    2592:	ff 91       	pop	r31
    2594:	ef 91       	pop	r30
    2596:	bf 91       	pop	r27
    2598:	af 91       	pop	r26
    259a:	9f 91       	pop	r25
    259c:	8f 91       	pop	r24
    259e:	7f 91       	pop	r23
    25a0:	6f 91       	pop	r22
    25a2:	5f 91       	pop	r21
    25a4:	4f 91       	pop	r20
    25a6:	3f 91       	pop	r19
    25a8:	2f 91       	pop	r18
    25aa:	0f 90       	pop	r0
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	0f 90       	pop	r0
    25b0:	1f 90       	pop	r1
    25b2:	18 95       	reti

000025b4 <__vector_19>:
 * \brief Interrupt handler for Timer Counter C5 error
 *
 * This function will handle interrupt on Timer Counter C5 error and
 * call the callback function.
 */
ISR(TCC5_ERR_vect)
    25b4:	1f 92       	push	r1
    25b6:	0f 92       	push	r0
    25b8:	0f b6       	in	r0, 0x3f	; 63
    25ba:	0f 92       	push	r0
    25bc:	11 24       	eor	r1, r1
    25be:	2f 93       	push	r18
    25c0:	3f 93       	push	r19
    25c2:	4f 93       	push	r20
    25c4:	5f 93       	push	r21
    25c6:	6f 93       	push	r22
    25c8:	7f 93       	push	r23
    25ca:	8f 93       	push	r24
    25cc:	9f 93       	push	r25
    25ce:	af 93       	push	r26
    25d0:	bf 93       	push	r27
    25d2:	ef 93       	push	r30
    25d4:	ff 93       	push	r31
    25d6:	0e 94 ac 02 	call	0x558	; 0x558 <app_cpu_load_exit_sleep>
{
	if (tc45_tcc5_err_callback) {
    25da:	e0 91 57 23 	lds	r30, 0x2357
    25de:	f0 91 58 23 	lds	r31, 0x2358
    25e2:	30 97       	sbiw	r30, 0x00	; 0
    25e4:	09 f0       	breq	.+2      	; 0x25e8 <__vector_19+0x34>
		tc45_tcc5_err_callback();
    25e6:	09 95       	icall
 * \brief Interrupt handler for Timer Counter C5 error
 *
 * This function will handle interrupt on Timer Counter C5 error and
 * call the callback function.
 */
ISR(TCC5_ERR_vect)
    25e8:	ff 91       	pop	r31
    25ea:	ef 91       	pop	r30
    25ec:	bf 91       	pop	r27
    25ee:	af 91       	pop	r26
    25f0:	9f 91       	pop	r25
    25f2:	8f 91       	pop	r24
    25f4:	7f 91       	pop	r23
    25f6:	6f 91       	pop	r22
    25f8:	5f 91       	pop	r21
    25fa:	4f 91       	pop	r20
    25fc:	3f 91       	pop	r19
    25fe:	2f 91       	pop	r18
    2600:	0f 90       	pop	r0
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	0f 90       	pop	r0
    2606:	1f 90       	pop	r1
    2608:	18 95       	reti

0000260a <__vector_20>:
 * \brief Interrupt handler for Timer Counter C5 Compare/CaptureA
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC5_CCA_vect)
    260a:	1f 92       	push	r1
    260c:	0f 92       	push	r0
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	0f 92       	push	r0
    2612:	11 24       	eor	r1, r1
    2614:	2f 93       	push	r18
    2616:	3f 93       	push	r19
    2618:	4f 93       	push	r20
    261a:	5f 93       	push	r21
    261c:	6f 93       	push	r22
    261e:	7f 93       	push	r23
    2620:	8f 93       	push	r24
    2622:	9f 93       	push	r25
    2624:	af 93       	push	r26
    2626:	bf 93       	push	r27
    2628:	ef 93       	push	r30
    262a:	ff 93       	push	r31
    262c:	0e 94 ac 02 	call	0x558	; 0x558 <app_cpu_load_exit_sleep>
{
	if (tc45_tcc5_cca_callback) {
    2630:	e0 91 55 23 	lds	r30, 0x2355
    2634:	f0 91 56 23 	lds	r31, 0x2356
    2638:	30 97       	sbiw	r30, 0x00	; 0
    263a:	09 f0       	breq	.+2      	; 0x263e <__vector_20+0x34>
		tc45_tcc5_cca_callback();
    263c:	09 95       	icall
 * \brief Interrupt handler for Timer Counter C5 Compare/CaptureA
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC5_CCA_vect)
    263e:	ff 91       	pop	r31
    2640:	ef 91       	pop	r30
    2642:	bf 91       	pop	r27
    2644:	af 91       	pop	r26
    2646:	9f 91       	pop	r25
    2648:	8f 91       	pop	r24
    264a:	7f 91       	pop	r23
    264c:	6f 91       	pop	r22
    264e:	5f 91       	pop	r21
    2650:	4f 91       	pop	r20
    2652:	3f 91       	pop	r19
    2654:	2f 91       	pop	r18
    2656:	0f 90       	pop	r0
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	0f 90       	pop	r0
    265c:	1f 90       	pop	r1
    265e:	18 95       	reti

00002660 <__vector_21>:
 * \brief Interrupt handler for Timer Counter C5 Compare/CaptureB
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC5_CCB_vect)
    2660:	1f 92       	push	r1
    2662:	0f 92       	push	r0
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	0f 92       	push	r0
    2668:	11 24       	eor	r1, r1
    266a:	2f 93       	push	r18
    266c:	3f 93       	push	r19
    266e:	4f 93       	push	r20
    2670:	5f 93       	push	r21
    2672:	6f 93       	push	r22
    2674:	7f 93       	push	r23
    2676:	8f 93       	push	r24
    2678:	9f 93       	push	r25
    267a:	af 93       	push	r26
    267c:	bf 93       	push	r27
    267e:	ef 93       	push	r30
    2680:	ff 93       	push	r31
    2682:	0e 94 ac 02 	call	0x558	; 0x558 <app_cpu_load_exit_sleep>
{
	if (tc45_tcc5_ccb_callback) {
    2686:	e0 91 53 23 	lds	r30, 0x2353
    268a:	f0 91 54 23 	lds	r31, 0x2354
    268e:	30 97       	sbiw	r30, 0x00	; 0
    2690:	09 f0       	breq	.+2      	; 0x2694 <__vector_21+0x34>
		tc45_tcc5_ccb_callback();
    2692:	09 95       	icall
 * \brief Interrupt handler for Timer Counter C5 Compare/CaptureB
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC5_CCB_vect)
    2694:	ff 91       	pop	r31
    2696:	ef 91       	pop	r30
    2698:	bf 91       	pop	r27
    269a:	af 91       	pop	r26
    269c:	9f 91       	pop	r25
    269e:	8f 91       	pop	r24
    26a0:	7f 91       	pop	r23
    26a2:	6f 91       	pop	r22
    26a4:	5f 91       	pop	r21
    26a6:	4f 91       	pop	r20
    26a8:	3f 91       	pop	r19
    26aa:	2f 91       	pop	r18
    26ac:	0f 90       	pop	r0
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	0f 90       	pop	r0
    26b2:	1f 90       	pop	r1
    26b4:	18 95       	reti

000026b6 <__vector_36>:
 * \brief Interrupt handler for Timer Counter D5 overflow
 *
 * This function will handle interrupt on Timer Counter D5 overflow and
 * call the callback function.
 */
ISR(TCD5_OVF_vect)
    26b6:	1f 92       	push	r1
    26b8:	0f 92       	push	r0
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	0f 92       	push	r0
    26be:	11 24       	eor	r1, r1
    26c0:	2f 93       	push	r18
    26c2:	3f 93       	push	r19
    26c4:	4f 93       	push	r20
    26c6:	5f 93       	push	r21
    26c8:	6f 93       	push	r22
    26ca:	7f 93       	push	r23
    26cc:	8f 93       	push	r24
    26ce:	9f 93       	push	r25
    26d0:	af 93       	push	r26
    26d2:	bf 93       	push	r27
    26d4:	ef 93       	push	r30
    26d6:	ff 93       	push	r31
    26d8:	0e 94 ac 02 	call	0x558	; 0x558 <app_cpu_load_exit_sleep>
{
	if (tc45_tcd5_ovf_callback) {
    26dc:	e0 91 51 23 	lds	r30, 0x2351
    26e0:	f0 91 52 23 	lds	r31, 0x2352
    26e4:	30 97       	sbiw	r30, 0x00	; 0
    26e6:	09 f0       	breq	.+2      	; 0x26ea <__vector_36+0x34>
		tc45_tcd5_ovf_callback();
    26e8:	09 95       	icall
 * \brief Interrupt handler for Timer Counter D5 overflow
 *
 * This function will handle interrupt on Timer Counter D5 overflow and
 * call the callback function.
 */
ISR(TCD5_OVF_vect)
    26ea:	ff 91       	pop	r31
    26ec:	ef 91       	pop	r30
    26ee:	bf 91       	pop	r27
    26f0:	af 91       	pop	r26
    26f2:	9f 91       	pop	r25
    26f4:	8f 91       	pop	r24
    26f6:	7f 91       	pop	r23
    26f8:	6f 91       	pop	r22
    26fa:	5f 91       	pop	r21
    26fc:	4f 91       	pop	r20
    26fe:	3f 91       	pop	r19
    2700:	2f 91       	pop	r18
    2702:	0f 90       	pop	r0
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	0f 90       	pop	r0
    2708:	1f 90       	pop	r1
    270a:	18 95       	reti

0000270c <__vector_37>:
 * \brief Interrupt handler for Timer Counter D5 error
 *
 * This function will handle interrupt on Timer Counter D5 error and
 * call the callback function.
 */
ISR(TCD5_ERR_vect)
    270c:	1f 92       	push	r1
    270e:	0f 92       	push	r0
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	0f 92       	push	r0
    2714:	11 24       	eor	r1, r1
    2716:	2f 93       	push	r18
    2718:	3f 93       	push	r19
    271a:	4f 93       	push	r20
    271c:	5f 93       	push	r21
    271e:	6f 93       	push	r22
    2720:	7f 93       	push	r23
    2722:	8f 93       	push	r24
    2724:	9f 93       	push	r25
    2726:	af 93       	push	r26
    2728:	bf 93       	push	r27
    272a:	ef 93       	push	r30
    272c:	ff 93       	push	r31
    272e:	0e 94 ac 02 	call	0x558	; 0x558 <app_cpu_load_exit_sleep>
{
	if (tc45_tcd5_err_callback) {
    2732:	e0 91 4f 23 	lds	r30, 0x234F
    2736:	f0 91 50 23 	lds	r31, 0x2350
    273a:	30 97       	sbiw	r30, 0x00	; 0
    273c:	09 f0       	breq	.+2      	; 0x2740 <__vector_37+0x34>
		tc45_tcd5_err_callback();
    273e:	09 95       	icall
 * \brief Interrupt handler for Timer Counter D5 error
 *
 * This function will handle interrupt on Timer Counter D5 error and
 * call the callback function.
 */
ISR(TCD5_ERR_vect)
    2740:	ff 91       	pop	r31
    2742:	ef 91       	pop	r30
    2744:	bf 91       	pop	r27
    2746:	af 91       	pop	r26
    2748:	9f 91       	pop	r25
    274a:	8f 91       	pop	r24
    274c:	7f 91       	pop	r23
    274e:	6f 91       	pop	r22
    2750:	5f 91       	pop	r21
    2752:	4f 91       	pop	r20
    2754:	3f 91       	pop	r19
    2756:	2f 91       	pop	r18
    2758:	0f 90       	pop	r0
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	0f 90       	pop	r0
    275e:	1f 90       	pop	r1
    2760:	18 95       	reti

00002762 <__vector_38>:
 * \brief Interrupt handler for Timer Counter D5 Compare/CaptureA
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD5_CCA_vect)
    2762:	1f 92       	push	r1
    2764:	0f 92       	push	r0
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	0f 92       	push	r0
    276a:	11 24       	eor	r1, r1
    276c:	2f 93       	push	r18
    276e:	3f 93       	push	r19
    2770:	4f 93       	push	r20
    2772:	5f 93       	push	r21
    2774:	6f 93       	push	r22
    2776:	7f 93       	push	r23
    2778:	8f 93       	push	r24
    277a:	9f 93       	push	r25
    277c:	af 93       	push	r26
    277e:	bf 93       	push	r27
    2780:	ef 93       	push	r30
    2782:	ff 93       	push	r31
    2784:	0e 94 ac 02 	call	0x558	; 0x558 <app_cpu_load_exit_sleep>
{
	if (tc45_tcd5_cca_callback) {
    2788:	e0 91 4d 23 	lds	r30, 0x234D
    278c:	f0 91 4e 23 	lds	r31, 0x234E
    2790:	30 97       	sbiw	r30, 0x00	; 0
    2792:	09 f0       	breq	.+2      	; 0x2796 <__vector_38+0x34>
		tc45_tcd5_cca_callback();
    2794:	09 95       	icall
 * \brief Interrupt handler for Timer Counter D5 Compare/CaptureA
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD5_CCA_vect)
    2796:	ff 91       	pop	r31
    2798:	ef 91       	pop	r30
    279a:	bf 91       	pop	r27
    279c:	af 91       	pop	r26
    279e:	9f 91       	pop	r25
    27a0:	8f 91       	pop	r24
    27a2:	7f 91       	pop	r23
    27a4:	6f 91       	pop	r22
    27a6:	5f 91       	pop	r21
    27a8:	4f 91       	pop	r20
    27aa:	3f 91       	pop	r19
    27ac:	2f 91       	pop	r18
    27ae:	0f 90       	pop	r0
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	0f 90       	pop	r0
    27b4:	1f 90       	pop	r1
    27b6:	18 95       	reti

000027b8 <__vector_39>:
 * \brief Interrupt handler for Timer Counter D5 Compare/CaptureB
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD5_CCB_vect)
    27b8:	1f 92       	push	r1
    27ba:	0f 92       	push	r0
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	0f 92       	push	r0
    27c0:	11 24       	eor	r1, r1
    27c2:	2f 93       	push	r18
    27c4:	3f 93       	push	r19
    27c6:	4f 93       	push	r20
    27c8:	5f 93       	push	r21
    27ca:	6f 93       	push	r22
    27cc:	7f 93       	push	r23
    27ce:	8f 93       	push	r24
    27d0:	9f 93       	push	r25
    27d2:	af 93       	push	r26
    27d4:	bf 93       	push	r27
    27d6:	ef 93       	push	r30
    27d8:	ff 93       	push	r31
    27da:	0e 94 ac 02 	call	0x558	; 0x558 <app_cpu_load_exit_sleep>
{
	if (tc45_tcd5_ccb_callback) {
    27de:	e0 91 4b 23 	lds	r30, 0x234B
    27e2:	f0 91 4c 23 	lds	r31, 0x234C
    27e6:	30 97       	sbiw	r30, 0x00	; 0
    27e8:	09 f0       	breq	.+2      	; 0x27ec <__vector_39+0x34>
		tc45_tcd5_ccb_callback();
    27ea:	09 95       	icall
 * \brief Interrupt handler for Timer Counter D5 Compare/CaptureB
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD5_CCB_vect)
    27ec:	ff 91       	pop	r31
    27ee:	ef 91       	pop	r30
    27f0:	bf 91       	pop	r27
    27f2:	af 91       	pop	r26
    27f4:	9f 91       	pop	r25
    27f6:	8f 91       	pop	r24
    27f8:	7f 91       	pop	r23
    27fa:	6f 91       	pop	r22
    27fc:	5f 91       	pop	r21
    27fe:	4f 91       	pop	r20
    2800:	3f 91       	pop	r19
    2802:	2f 91       	pop	r18
    2804:	0f 90       	pop	r0
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	0f 90       	pop	r0
    280a:	1f 90       	pop	r1
    280c:	18 95       	reti

0000280e <tc45_enable>:
 *
 * \note
 * unmask TC45 clock (sysclk), but does not configure the TC45 clock source.
 */
void tc45_enable(volatile void *tc)
{
    280e:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2810:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    2812:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    2814:	28 2f       	mov	r18, r24
    2816:	39 2f       	mov	r19, r25
    2818:	21 15       	cp	r18, r1
    281a:	88 e0       	ldi	r24, 0x08	; 8
    281c:	38 07       	cpc	r19, r24
    281e:	49 f4       	brne	.+18     	; 0x2832 <tc45_enable+0x24>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    2820:	61 e0       	ldi	r22, 0x01	; 1
    2822:	83 e0       	ldi	r24, 0x03	; 3
    2824:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2828:	64 e0       	ldi	r22, 0x04	; 4
    282a:	83 e0       	ldi	r24, 0x03	; 3
    282c:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2830:	1b c0       	rjmp	.+54     	; 0x2868 <tc45_enable+0x5a>
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    2832:	20 34       	cpi	r18, 0x40	; 64
    2834:	88 e0       	ldi	r24, 0x08	; 8
    2836:	38 07       	cpc	r19, r24
    2838:	49 f4       	brne	.+18     	; 0x284c <tc45_enable+0x3e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    283a:	62 e0       	ldi	r22, 0x02	; 2
    283c:	83 e0       	ldi	r24, 0x03	; 3
    283e:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2842:	64 e0       	ldi	r22, 0x04	; 4
    2844:	83 e0       	ldi	r24, 0x03	; 3
    2846:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    284a:	0e c0       	rjmp	.+28     	; 0x2868 <tc45_enable+0x5a>
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    284c:	20 34       	cpi	r18, 0x40	; 64
    284e:	39 40       	sbci	r19, 0x09	; 9
    2850:	49 f4       	brne	.+18     	; 0x2864 <tc45_enable+0x56>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
    2852:	62 e0       	ldi	r22, 0x02	; 2
    2854:	84 e0       	ldi	r24, 0x04	; 4
    2856:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    285a:	64 e0       	ldi	r22, 0x04	; 4
    285c:	84 e0       	ldi	r24, 0x04	; 4
    285e:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2862:	02 c0       	rjmp	.+4      	; 0x2868 <tc45_enable+0x5a>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2864:	cf bf       	out	0x3f, r28	; 63
    2866:	09 c0       	rjmp	.+18     	; 0x287a <tc45_enable+0x6c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2868:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    286a:	f8 94       	cli
    286c:	e8 e6       	ldi	r30, 0x68	; 104
    286e:	f3 e2       	ldi	r31, 0x23	; 35
    2870:	90 81       	ld	r25, Z
    2872:	9f 5f       	subi	r25, 0xFF	; 255
    2874:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2876:	8f bf       	out	0x3f, r24	; 63
    2878:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    287a:	cf 91       	pop	r28
    287c:	08 95       	ret

0000287e <tc45_disable>:
 *
 * \note
 * mask TC45 clock (sysclk).
 */
void tc45_disable(volatile void *tc)
{
    287e:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2880:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    2882:	f8 94       	cli

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2884:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    2886:	f8 94       	cli
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    2888:	e8 e6       	ldi	r30, 0x68	; 104
    288a:	f3 e2       	ldi	r31, 0x23	; 35
    288c:	30 81       	ld	r19, Z
    288e:	31 50       	subi	r19, 0x01	; 1
    2890:	30 83       	st	Z, r19
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2892:	2f bf       	out	0x3f, r18	; 63
	irqflags_t iflags = cpu_irq_save();

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);

#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    2894:	28 2f       	mov	r18, r24
    2896:	39 2f       	mov	r19, r25
    2898:	21 15       	cp	r18, r1
    289a:	88 e0       	ldi	r24, 0x08	; 8
    289c:	38 07       	cpc	r19, r24
    289e:	49 f4       	brne	.+18     	; 0x28b2 <tc45_disable+0x34>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    28a0:	61 e0       	ldi	r22, 0x01	; 1
    28a2:	83 e0       	ldi	r24, 0x03	; 3
    28a4:	0e 94 ac 06 	call	0xd58	; 0xd58 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    28a8:	64 e0       	ldi	r22, 0x04	; 4
    28aa:	83 e0       	ldi	r24, 0x03	; 3
    28ac:	0e 94 ac 06 	call	0xd58	; 0xd58 <sysclk_disable_module>
    28b0:	1b c0       	rjmp	.+54     	; 0x28e8 <tc45_disable+0x6a>
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    28b2:	20 34       	cpi	r18, 0x40	; 64
    28b4:	88 e0       	ldi	r24, 0x08	; 8
    28b6:	38 07       	cpc	r19, r24
    28b8:	49 f4       	brne	.+18     	; 0x28cc <tc45_disable+0x4e>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    28ba:	62 e0       	ldi	r22, 0x02	; 2
    28bc:	83 e0       	ldi	r24, 0x03	; 3
    28be:	0e 94 ac 06 	call	0xd58	; 0xd58 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    28c2:	64 e0       	ldi	r22, 0x04	; 4
    28c4:	83 e0       	ldi	r24, 0x03	; 3
    28c6:	0e 94 ac 06 	call	0xd58	; 0xd58 <sysclk_disable_module>
    28ca:	0e c0       	rjmp	.+28     	; 0x28e8 <tc45_disable+0x6a>
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    28cc:	20 34       	cpi	r18, 0x40	; 64
    28ce:	39 40       	sbci	r19, 0x09	; 9
    28d0:	49 f4       	brne	.+18     	; 0x28e4 <tc45_disable+0x66>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC4);
    28d2:	61 e0       	ldi	r22, 0x01	; 1
    28d4:	84 e0       	ldi	r24, 0x04	; 4
    28d6:	0e 94 ac 06 	call	0xd58	; 0xd58 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    28da:	64 e0       	ldi	r22, 0x04	; 4
    28dc:	84 e0       	ldi	r24, 0x04	; 4
    28de:	0e 94 ac 06 	call	0xd58	; 0xd58 <sysclk_disable_module>
    28e2:	02 c0       	rjmp	.+4      	; 0x28e8 <tc45_disable+0x6a>
    28e4:	cf bf       	out	0x3f, r28	; 63
    28e6:	01 c0       	rjmp	.+2      	; 0x28ea <tc45_disable+0x6c>
    28e8:	cf bf       	out	0x3f, r28	; 63
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    28ea:	cf 91       	pop	r28
    28ec:	08 95       	ret

000028ee <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    28ee:	fc 01       	movw	r30, r24
    28f0:	81 81       	ldd	r24, Z+1	; 0x01
    28f2:	85 ff       	sbrs	r24, 5
    28f4:	fd cf       	rjmp	.-6      	; 0x28f0 <usart_putchar+0x2>
    28f6:	60 83       	st	Z, r22
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	08 95       	ret

000028fe <usart_getchar>:
    28fe:	fc 01       	movw	r30, r24
    2900:	81 81       	ldd	r24, Z+1	; 0x01
    2902:	88 23       	and	r24, r24
    2904:	ec f7       	brge	.-6      	; 0x2900 <usart_getchar+0x2>
    2906:	80 81       	ld	r24, Z
    2908:	08 95       	ret

0000290a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    290a:	4f 92       	push	r4
    290c:	5f 92       	push	r5
    290e:	6f 92       	push	r6
    2910:	7f 92       	push	r7
    2912:	8f 92       	push	r8
    2914:	9f 92       	push	r9
    2916:	af 92       	push	r10
    2918:	bf 92       	push	r11
    291a:	cf 92       	push	r12
    291c:	df 92       	push	r13
    291e:	ef 92       	push	r14
    2920:	ff 92       	push	r15
    2922:	0f 93       	push	r16
    2924:	1f 93       	push	r17
    2926:	cf 93       	push	r28
    2928:	df 93       	push	r29
    292a:	ec 01       	movw	r28, r24
    292c:	4a 01       	movw	r8, r20
    292e:	5b 01       	movw	r10, r22
    2930:	28 01       	movw	r4, r16
    2932:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    2934:	d9 01       	movw	r26, r18
    2936:	c8 01       	movw	r24, r16
    2938:	68 94       	set
    293a:	12 f8       	bld	r1, 2
    293c:	b6 95       	lsr	r27
    293e:	a7 95       	ror	r26
    2940:	97 95       	ror	r25
    2942:	87 95       	ror	r24
    2944:	16 94       	lsr	r1
    2946:	d1 f7       	brne	.-12     	; 0x293c <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    2948:	b9 01       	movw	r22, r18
    294a:	a8 01       	movw	r20, r16
    294c:	03 2e       	mov	r0, r19
    294e:	36 e1       	ldi	r19, 0x16	; 22
    2950:	76 95       	lsr	r23
    2952:	67 95       	ror	r22
    2954:	57 95       	ror	r21
    2956:	47 95       	ror	r20
    2958:	3a 95       	dec	r19
    295a:	d1 f7       	brne	.-12     	; 0x2950 <usart_set_baudrate+0x46>
    295c:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    295e:	2b 81       	ldd	r18, Y+3	; 0x03
    2960:	22 fd       	sbrc	r18, 2
    2962:	08 c0       	rjmp	.+16     	; 0x2974 <usart_set_baudrate+0x6a>
		max_rate /= 2;
    2964:	b6 95       	lsr	r27
    2966:	a7 95       	ror	r26
    2968:	97 95       	ror	r25
    296a:	87 95       	ror	r24
		min_rate /= 2;
    296c:	76 95       	lsr	r23
    296e:	67 95       	ror	r22
    2970:	57 95       	ror	r21
    2972:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    2974:	88 15       	cp	r24, r8
    2976:	99 05       	cpc	r25, r9
    2978:	aa 05       	cpc	r26, r10
    297a:	bb 05       	cpc	r27, r11
    297c:	08 f4       	brcc	.+2      	; 0x2980 <usart_set_baudrate+0x76>
    297e:	a2 c0       	rjmp	.+324    	; 0x2ac4 <usart_set_baudrate+0x1ba>
    2980:	84 16       	cp	r8, r20
    2982:	95 06       	cpc	r9, r21
    2984:	a6 06       	cpc	r10, r22
    2986:	b7 06       	cpc	r11, r23
    2988:	08 f4       	brcc	.+2      	; 0x298c <usart_set_baudrate+0x82>
    298a:	9e c0       	rjmp	.+316    	; 0x2ac8 <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    298c:	8b 81       	ldd	r24, Y+3	; 0x03
    298e:	82 fd       	sbrc	r24, 2
    2990:	04 c0       	rjmp	.+8      	; 0x299a <usart_set_baudrate+0x90>
		baud *= 2;
    2992:	88 0c       	add	r8, r8
    2994:	99 1c       	adc	r9, r9
    2996:	aa 1c       	adc	r10, r10
    2998:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    299a:	c3 01       	movw	r24, r6
    299c:	b2 01       	movw	r22, r4
    299e:	a5 01       	movw	r20, r10
    29a0:	94 01       	movw	r18, r8
    29a2:	24 d4       	rcall	.+2120   	; 0x31ec <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    29a4:	2f 3f       	cpi	r18, 0xFF	; 255
    29a6:	31 05       	cpc	r19, r1
    29a8:	41 05       	cpc	r20, r1
    29aa:	51 05       	cpc	r21, r1
    29ac:	08 f4       	brcc	.+2      	; 0x29b0 <usart_set_baudrate+0xa6>
    29ae:	8e c0       	rjmp	.+284    	; 0x2acc <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    29b0:	c1 2c       	mov	r12, r1
    29b2:	d1 2c       	mov	r13, r1
    29b4:	76 01       	movw	r14, r12
    29b6:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    29b8:	19 ef       	ldi	r17, 0xF9	; 249
    29ba:	05 c0       	rjmp	.+10     	; 0x29c6 <usart_set_baudrate+0xbc>
		if (ratio < limit) {
    29bc:	2c 15       	cp	r18, r12
    29be:	3d 05       	cpc	r19, r13
    29c0:	4e 05       	cpc	r20, r14
    29c2:	5f 05       	cpc	r21, r15
    29c4:	68 f0       	brcs	.+26     	; 0x29e0 <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
    29c6:	cc 0c       	add	r12, r12
    29c8:	dd 1c       	adc	r13, r13
    29ca:	ee 1c       	adc	r14, r14
    29cc:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    29ce:	1d 3f       	cpi	r17, 0xFD	; 253
    29d0:	14 f4       	brge	.+4      	; 0x29d6 <usart_set_baudrate+0xcc>
			limit |= 1;
    29d2:	68 94       	set
    29d4:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    29d6:	1f 5f       	subi	r17, 0xFF	; 255
    29d8:	17 30       	cpi	r17, 0x07	; 7
    29da:	81 f7       	brne	.-32     	; 0x29bc <usart_set_baudrate+0xb2>
    29dc:	21 2f       	mov	r18, r17
    29de:	4e c0       	rjmp	.+156    	; 0x2a7c <usart_set_baudrate+0x172>
    29e0:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    29e2:	11 23       	and	r17, r17
    29e4:	0c f0       	brlt	.+2      	; 0x29e8 <usart_set_baudrate+0xde>
    29e6:	4a c0       	rjmp	.+148    	; 0x2a7c <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    29e8:	d5 01       	movw	r26, r10
    29ea:	c4 01       	movw	r24, r8
    29ec:	88 0f       	add	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	aa 1f       	adc	r26, r26
    29f2:	bb 1f       	adc	r27, r27
    29f4:	88 0f       	add	r24, r24
    29f6:	99 1f       	adc	r25, r25
    29f8:	aa 1f       	adc	r26, r26
    29fa:	bb 1f       	adc	r27, r27
    29fc:	88 0f       	add	r24, r24
    29fe:	99 1f       	adc	r25, r25
    2a00:	aa 1f       	adc	r26, r26
    2a02:	bb 1f       	adc	r27, r27
    2a04:	48 1a       	sub	r4, r24
    2a06:	59 0a       	sbc	r5, r25
    2a08:	6a 0a       	sbc	r6, r26
    2a0a:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    2a0c:	1e 3f       	cpi	r17, 0xFE	; 254
    2a0e:	ec f4       	brge	.+58     	; 0x2a4a <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    2a10:	6d ef       	ldi	r22, 0xFD	; 253
    2a12:	7f ef       	ldi	r23, 0xFF	; 255
    2a14:	61 1b       	sub	r22, r17
    2a16:	71 09       	sbc	r23, r1
    2a18:	17 fd       	sbrc	r17, 7
    2a1a:	73 95       	inc	r23
    2a1c:	04 c0       	rjmp	.+8      	; 0x2a26 <usart_set_baudrate+0x11c>
    2a1e:	44 0c       	add	r4, r4
    2a20:	55 1c       	adc	r5, r5
    2a22:	66 1c       	adc	r6, r6
    2a24:	77 1c       	adc	r7, r7
    2a26:	6a 95       	dec	r22
    2a28:	d2 f7       	brpl	.-12     	; 0x2a1e <usart_set_baudrate+0x114>
    2a2a:	d5 01       	movw	r26, r10
    2a2c:	c4 01       	movw	r24, r8
    2a2e:	b6 95       	lsr	r27
    2a30:	a7 95       	ror	r26
    2a32:	97 95       	ror	r25
    2a34:	87 95       	ror	r24
    2a36:	bc 01       	movw	r22, r24
    2a38:	cd 01       	movw	r24, r26
    2a3a:	64 0d       	add	r22, r4
    2a3c:	75 1d       	adc	r23, r5
    2a3e:	86 1d       	adc	r24, r6
    2a40:	97 1d       	adc	r25, r7
    2a42:	a5 01       	movw	r20, r10
    2a44:	94 01       	movw	r18, r8
    2a46:	d2 d3       	rcall	.+1956   	; 0x31ec <__udivmodsi4>
    2a48:	34 c0       	rjmp	.+104    	; 0x2ab2 <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
    2a4a:	23 e0       	ldi	r18, 0x03	; 3
    2a4c:	21 0f       	add	r18, r17
    2a4e:	d5 01       	movw	r26, r10
    2a50:	c4 01       	movw	r24, r8
    2a52:	04 c0       	rjmp	.+8      	; 0x2a5c <usart_set_baudrate+0x152>
    2a54:	88 0f       	add	r24, r24
    2a56:	99 1f       	adc	r25, r25
    2a58:	aa 1f       	adc	r26, r26
    2a5a:	bb 1f       	adc	r27, r27
    2a5c:	2a 95       	dec	r18
    2a5e:	d2 f7       	brpl	.-12     	; 0x2a54 <usart_set_baudrate+0x14a>
    2a60:	9c 01       	movw	r18, r24
    2a62:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    2a64:	b6 95       	lsr	r27
    2a66:	a7 95       	ror	r26
    2a68:	97 95       	ror	r25
    2a6a:	87 95       	ror	r24
    2a6c:	bc 01       	movw	r22, r24
    2a6e:	cd 01       	movw	r24, r26
    2a70:	64 0d       	add	r22, r4
    2a72:	75 1d       	adc	r23, r5
    2a74:	86 1d       	adc	r24, r6
    2a76:	97 1d       	adc	r25, r7
    2a78:	b9 d3       	rcall	.+1906   	; 0x31ec <__udivmodsi4>
    2a7a:	1b c0       	rjmp	.+54     	; 0x2ab2 <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    2a7c:	2d 5f       	subi	r18, 0xFD	; 253
    2a7e:	d5 01       	movw	r26, r10
    2a80:	c4 01       	movw	r24, r8
    2a82:	04 c0       	rjmp	.+8      	; 0x2a8c <usart_set_baudrate+0x182>
    2a84:	88 0f       	add	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	aa 1f       	adc	r26, r26
    2a8a:	bb 1f       	adc	r27, r27
    2a8c:	2a 95       	dec	r18
    2a8e:	d2 f7       	brpl	.-12     	; 0x2a84 <usart_set_baudrate+0x17a>
    2a90:	9c 01       	movw	r18, r24
    2a92:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    2a94:	b6 95       	lsr	r27
    2a96:	a7 95       	ror	r26
    2a98:	97 95       	ror	r25
    2a9a:	87 95       	ror	r24
    2a9c:	bc 01       	movw	r22, r24
    2a9e:	cd 01       	movw	r24, r26
    2aa0:	64 0d       	add	r22, r4
    2aa2:	75 1d       	adc	r23, r5
    2aa4:	86 1d       	adc	r24, r6
    2aa6:	97 1d       	adc	r25, r7
    2aa8:	a1 d3       	rcall	.+1858   	; 0x31ec <__udivmodsi4>
    2aaa:	21 50       	subi	r18, 0x01	; 1
    2aac:	31 09       	sbc	r19, r1
    2aae:	41 09       	sbc	r20, r1
    2ab0:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    2ab2:	83 2f       	mov	r24, r19
    2ab4:	8f 70       	andi	r24, 0x0F	; 15
    2ab6:	12 95       	swap	r17
    2ab8:	10 7f       	andi	r17, 0xF0	; 240
    2aba:	18 2b       	or	r17, r24
    2abc:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    2abe:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	18 c0       	rjmp	.+48     	; 0x2af4 <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	16 c0       	rjmp	.+44     	; 0x2af4 <usart_set_baudrate+0x1ea>
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	14 c0       	rjmp	.+40     	; 0x2af4 <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    2acc:	d5 01       	movw	r26, r10
    2ace:	c4 01       	movw	r24, r8
    2ad0:	88 0f       	add	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	aa 1f       	adc	r26, r26
    2ad6:	bb 1f       	adc	r27, r27
    2ad8:	88 0f       	add	r24, r24
    2ada:	99 1f       	adc	r25, r25
    2adc:	aa 1f       	adc	r26, r26
    2ade:	bb 1f       	adc	r27, r27
    2ae0:	88 0f       	add	r24, r24
    2ae2:	99 1f       	adc	r25, r25
    2ae4:	aa 1f       	adc	r26, r26
    2ae6:	bb 1f       	adc	r27, r27
    2ae8:	48 1a       	sub	r4, r24
    2aea:	59 0a       	sbc	r5, r25
    2aec:	6a 0a       	sbc	r6, r26
    2aee:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    2af0:	19 ef       	ldi	r17, 0xF9	; 249
    2af2:	8e cf       	rjmp	.-228    	; 0x2a10 <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    2af4:	df 91       	pop	r29
    2af6:	cf 91       	pop	r28
    2af8:	1f 91       	pop	r17
    2afa:	0f 91       	pop	r16
    2afc:	ff 90       	pop	r15
    2afe:	ef 90       	pop	r14
    2b00:	df 90       	pop	r13
    2b02:	cf 90       	pop	r12
    2b04:	bf 90       	pop	r11
    2b06:	af 90       	pop	r10
    2b08:	9f 90       	pop	r9
    2b0a:	8f 90       	pop	r8
    2b0c:	7f 90       	pop	r7
    2b0e:	6f 90       	pop	r6
    2b10:	5f 90       	pop	r5
    2b12:	4f 90       	pop	r4
    2b14:	08 95       	ret

00002b16 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    2b16:	0f 93       	push	r16
    2b18:	1f 93       	push	r17
    2b1a:	cf 93       	push	r28
    2b1c:	df 93       	push	r29
    2b1e:	ec 01       	movw	r28, r24
    2b20:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2b22:	00 97       	sbiw	r24, 0x00	; 0
    2b24:	09 f4       	brne	.+2      	; 0x2b28 <usart_init_rs232+0x12>
    2b26:	86 c0       	rjmp	.+268    	; 0x2c34 <usart_init_rs232+0x11e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    2b28:	c1 15       	cp	r28, r1
    2b2a:	84 e0       	ldi	r24, 0x04	; 4
    2b2c:	d8 07       	cpc	r29, r24
    2b2e:	29 f4       	brne	.+10     	; 0x2b3a <usart_init_rs232+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2b30:	64 e0       	ldi	r22, 0x04	; 4
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2b38:	7d c0       	rjmp	.+250    	; 0x2c34 <usart_init_rs232+0x11e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2b3a:	c0 38       	cpi	r28, 0x80	; 128
    2b3c:	e1 e0       	ldi	r30, 0x01	; 1
    2b3e:	de 07       	cpc	r29, r30
    2b40:	29 f4       	brne	.+10     	; 0x2b4c <usart_init_rs232+0x36>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2b42:	62 e0       	ldi	r22, 0x02	; 2
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2b4a:	74 c0       	rjmp	.+232    	; 0x2c34 <usart_init_rs232+0x11e>
	else if (module == &DMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	}
#endif
#ifdef EDMA
	else if (module == &EDMA) {
    2b4c:	c1 15       	cp	r28, r1
    2b4e:	f1 e0       	ldi	r31, 0x01	; 1
    2b50:	df 07       	cpc	r29, r31
    2b52:	29 f4       	brne	.+10     	; 0x2b5e <usart_init_rs232+0x48>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
    2b54:	61 e0       	ldi	r22, 0x01	; 1
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2b5c:	6b c0       	rjmp	.+214    	; 0x2c34 <usart_init_rs232+0x11e>
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    2b5e:	c0 38       	cpi	r28, 0x80	; 128
    2b60:	83 e0       	ldi	r24, 0x03	; 3
    2b62:	d8 07       	cpc	r29, r24
    2b64:	29 f4       	brne	.+10     	; 0x2b70 <usart_init_rs232+0x5a>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2b66:	61 e0       	ldi	r22, 0x01	; 1
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2b6e:	62 c0       	rjmp	.+196    	; 0x2c34 <usart_init_rs232+0x11e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    2b70:	c1 15       	cp	r28, r1
    2b72:	e2 e0       	ldi	r30, 0x02	; 2
    2b74:	de 07       	cpc	r29, r30
    2b76:	29 f4       	brne	.+10     	; 0x2b82 <usart_init_rs232+0x6c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2b78:	62 e0       	ldi	r22, 0x02	; 2
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2b80:	59 c0       	rjmp	.+178    	; 0x2c34 <usart_init_rs232+0x11e>
	else if (module == &ADCB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    2b82:	c1 15       	cp	r28, r1
    2b84:	f3 e0       	ldi	r31, 0x03	; 3
    2b86:	df 07       	cpc	r29, r31
    2b88:	29 f4       	brne	.+10     	; 0x2b94 <usart_init_rs232+0x7e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    2b8a:	64 e0       	ldi	r22, 0x04	; 4
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2b92:	50 c0       	rjmp	.+160    	; 0x2c34 <usart_init_rs232+0x11e>
	else if (module == &TCF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
	}
#endif
#ifdef TCC4
	else if (module == &TCC4) {
    2b94:	c1 15       	cp	r28, r1
    2b96:	88 e0       	ldi	r24, 0x08	; 8
    2b98:	d8 07       	cpc	r29, r24
    2b9a:	29 f4       	brne	.+10     	; 0x2ba6 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    2b9c:	61 e0       	ldi	r22, 0x01	; 1
    2b9e:	83 e0       	ldi	r24, 0x03	; 3
    2ba0:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2ba4:	47 c0       	rjmp	.+142    	; 0x2c34 <usart_init_rs232+0x11e>
	}
#endif
#ifdef TCC5
	else if (module == &TCC5) {
    2ba6:	c0 34       	cpi	r28, 0x40	; 64
    2ba8:	e8 e0       	ldi	r30, 0x08	; 8
    2baa:	de 07       	cpc	r29, r30
    2bac:	29 f4       	brne	.+10     	; 0x2bb8 <usart_init_rs232+0xa2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    2bae:	62 e0       	ldi	r22, 0x02	; 2
    2bb0:	83 e0       	ldi	r24, 0x03	; 3
    2bb2:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2bb6:	3e c0       	rjmp	.+124    	; 0x2c34 <usart_init_rs232+0x11e>
	else if (module == &TCD4) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC4);
	}
#endif
#ifdef TCD5
	else if (module == &TCD5) {
    2bb8:	c0 34       	cpi	r28, 0x40	; 64
    2bba:	f9 e0       	ldi	r31, 0x09	; 9
    2bbc:	df 07       	cpc	r29, r31
    2bbe:	29 f4       	brne	.+10     	; 0x2bca <usart_init_rs232+0xb4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
    2bc0:	62 e0       	ldi	r22, 0x02	; 2
    2bc2:	84 e0       	ldi	r24, 0x04	; 4
    2bc4:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2bc8:	35 c0       	rjmp	.+106    	; 0x2c34 <usart_init_rs232+0x11e>
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    2bca:	c0 3b       	cpi	r28, 0xB0	; 176
    2bcc:	88 e0       	ldi	r24, 0x08	; 8
    2bce:	d8 07       	cpc	r29, r24
    2bd0:	29 f4       	brne	.+10     	; 0x2bdc <usart_init_rs232+0xc6>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2bd2:	64 e0       	ldi	r22, 0x04	; 4
    2bd4:	83 e0       	ldi	r24, 0x03	; 3
    2bd6:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2bda:	2c c0       	rjmp	.+88     	; 0x2c34 <usart_init_rs232+0x11e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    2bdc:	c0 3e       	cpi	r28, 0xE0	; 224
    2bde:	e8 e0       	ldi	r30, 0x08	; 8
    2be0:	de 07       	cpc	r29, r30
    2be2:	29 f4       	brne	.+10     	; 0x2bee <usart_init_rs232+0xd8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2be4:	68 e0       	ldi	r22, 0x08	; 8
    2be6:	83 e0       	ldi	r24, 0x03	; 3
    2be8:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2bec:	23 c0       	rjmp	.+70     	; 0x2c34 <usart_init_rs232+0x11e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2bee:	c0 3c       	cpi	r28, 0xC0	; 192
    2bf0:	f8 e0       	ldi	r31, 0x08	; 8
    2bf2:	df 07       	cpc	r29, r31
    2bf4:	29 f4       	brne	.+10     	; 0x2c00 <usart_init_rs232+0xea>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2bf6:	60 e1       	ldi	r22, 0x10	; 16
    2bf8:	83 e0       	ldi	r24, 0x03	; 3
    2bfa:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2bfe:	1a c0       	rjmp	.+52     	; 0x2c34 <usart_init_rs232+0x11e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    2c00:	c0 3c       	cpi	r28, 0xC0	; 192
    2c02:	89 e0       	ldi	r24, 0x09	; 9
    2c04:	d8 07       	cpc	r29, r24
    2c06:	29 f4       	brne	.+10     	; 0x2c12 <usart_init_rs232+0xfc>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2c08:	60 e1       	ldi	r22, 0x10	; 16
    2c0a:	84 e0       	ldi	r24, 0x04	; 4
    2c0c:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2c10:	11 c0       	rjmp	.+34     	; 0x2c34 <usart_init_rs232+0x11e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    2c12:	c0 38       	cpi	r28, 0x80	; 128
    2c14:	e4 e0       	ldi	r30, 0x04	; 4
    2c16:	de 07       	cpc	r29, r30
    2c18:	29 f4       	brne	.+10     	; 0x2c24 <usart_init_rs232+0x10e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2c1a:	60 e4       	ldi	r22, 0x40	; 64
    2c1c:	83 e0       	ldi	r24, 0x03	; 3
    2c1e:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2c22:	08 c0       	rjmp	.+16     	; 0x2c34 <usart_init_rs232+0x11e>
	else if (module == &TWIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
	}
#endif
#ifdef XCL
	else if (module == &XCL) {
    2c24:	c0 36       	cpi	r28, 0x60	; 96
    2c26:	f4 e0       	ldi	r31, 0x04	; 4
    2c28:	df 07       	cpc	r29, r31
    2c2a:	21 f4       	brne	.+8      	; 0x2c34 <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_XCL);
    2c2c:	60 e8       	ldi	r22, 0x80	; 128
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    2c34:	8c 81       	ldd	r24, Y+4	; 0x04
    2c36:	8f 73       	andi	r24, 0x3F	; 63
    2c38:	8c 83       	std	Y+4, r24	; 0x04
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    2c3a:	f8 01       	movw	r30, r16
    2c3c:	94 81       	ldd	r25, Z+4	; 0x04
    2c3e:	85 81       	ldd	r24, Z+5	; 0x05
    2c40:	89 2b       	or	r24, r25
    2c42:	96 81       	ldd	r25, Z+6	; 0x06
    2c44:	99 23       	and	r25, r25
    2c46:	11 f0       	breq	.+4      	; 0x2c4c <usart_init_rs232+0x136>
    2c48:	98 e0       	ldi	r25, 0x08	; 8
    2c4a:	01 c0       	rjmp	.+2      	; 0x2c4e <usart_init_rs232+0x138>
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	89 2b       	or	r24, r25
    2c50:	8c 83       	std	Y+4, r24	; 0x04
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    2c52:	f8 01       	movw	r30, r16
    2c54:	40 81       	ld	r20, Z
    2c56:	51 81       	ldd	r21, Z+1	; 0x01
    2c58:	62 81       	ldd	r22, Z+2	; 0x02
    2c5a:	73 81       	ldd	r23, Z+3	; 0x03
    2c5c:	00 e0       	ldi	r16, 0x00	; 0
    2c5e:	18 e4       	ldi	r17, 0x48	; 72
    2c60:	28 ee       	ldi	r18, 0xE8	; 232
    2c62:	31 e0       	ldi	r19, 0x01	; 1
    2c64:	ce 01       	movw	r24, r28
    2c66:	51 de       	rcall	.-862    	; 0x290a <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    2c68:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6a:	98 60       	ori	r25, 0x08	; 8
    2c6c:	9b 83       	std	Y+3, r25	; 0x03
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    2c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c70:	90 61       	ori	r25, 0x10	; 16
    2c72:	9b 83       	std	Y+3, r25	; 0x03
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    2c74:	df 91       	pop	r29
    2c76:	cf 91       	pop	r28
    2c78:	1f 91       	pop	r17
    2c7a:	0f 91       	pop	r16
    2c7c:	08 95       	ret

00002c7e <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    2c7e:	cf 92       	push	r12
    2c80:	df 92       	push	r13
    2c82:	ef 92       	push	r14
    2c84:	ff 92       	push	r15
    2c86:	0f 93       	push	r16
    2c88:	1f 93       	push	r17
    2c8a:	cf 93       	push	r28
    2c8c:	df 93       	push	r29
    2c8e:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    2c90:	68 01       	movw	r12, r16
    2c92:	79 01       	movw	r14, r18
    2c94:	f6 94       	lsr	r15
    2c96:	e7 94       	ror	r14
    2c98:	d7 94       	ror	r13
    2c9a:	c7 94       	ror	r12
    2c9c:	4c 15       	cp	r20, r12
    2c9e:	5d 05       	cpc	r21, r13
    2ca0:	6e 05       	cpc	r22, r14
    2ca2:	7f 05       	cpc	r23, r15
    2ca4:	70 f4       	brcc	.+28     	; 0x2cc2 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    2ca6:	6a 01       	movw	r12, r20
    2ca8:	7b 01       	movw	r14, r22
    2caa:	cc 0c       	add	r12, r12
    2cac:	dd 1c       	adc	r13, r13
    2cae:	ee 1c       	adc	r14, r14
    2cb0:	ff 1c       	adc	r15, r15
    2cb2:	c9 01       	movw	r24, r18
    2cb4:	b8 01       	movw	r22, r16
    2cb6:	a7 01       	movw	r20, r14
    2cb8:	96 01       	movw	r18, r12
    2cba:	98 d2       	rcall	.+1328   	; 0x31ec <__udivmodsi4>
    2cbc:	21 50       	subi	r18, 0x01	; 1
    2cbe:	31 09       	sbc	r19, r1
    2cc0:	02 c0       	rjmp	.+4      	; 0x2cc6 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    2cc6:	83 2f       	mov	r24, r19
    2cc8:	8f 70       	andi	r24, 0x0F	; 15
    2cca:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    2ccc:	2e 83       	std	Y+6, r18	; 0x06
}
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	1f 91       	pop	r17
    2cd4:	0f 91       	pop	r16
    2cd6:	ff 90       	pop	r15
    2cd8:	ef 90       	pop	r14
    2cda:	df 90       	pop	r13
    2cdc:	cf 90       	pop	r12
    2cde:	08 95       	ret

00002ce0 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    2ce0:	ff 92       	push	r15
    2ce2:	0f 93       	push	r16
    2ce4:	1f 93       	push	r17
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	ec 01       	movw	r28, r24
    2cec:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2cee:	00 97       	sbiw	r24, 0x00	; 0
    2cf0:	09 f4       	brne	.+2      	; 0x2cf4 <usart_init_spi+0x14>
    2cf2:	0b c1       	rjmp	.+534    	; 0x2f0a <usart_init_spi+0x22a>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    2cf4:	81 15       	cp	r24, r1
    2cf6:	24 e0       	ldi	r18, 0x04	; 4
    2cf8:	92 07       	cpc	r25, r18
    2cfa:	29 f4       	brne	.+10     	; 0x2d06 <usart_init_spi+0x26>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2cfc:	64 e0       	ldi	r22, 0x04	; 4
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2d04:	02 c1       	rjmp	.+516    	; 0x2f0a <usart_init_spi+0x22a>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2d06:	c0 38       	cpi	r28, 0x80	; 128
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	d8 07       	cpc	r29, r24
    2d0c:	29 f4       	brne	.+10     	; 0x2d18 <usart_init_spi+0x38>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2d0e:	62 e0       	ldi	r22, 0x02	; 2
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2d16:	f9 c0       	rjmp	.+498    	; 0x2f0a <usart_init_spi+0x22a>
	else if (module == &DMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	}
#endif
#ifdef EDMA
	else if (module == &EDMA) {
    2d18:	c1 15       	cp	r28, r1
    2d1a:	e1 e0       	ldi	r30, 0x01	; 1
    2d1c:	de 07       	cpc	r29, r30
    2d1e:	29 f4       	brne	.+10     	; 0x2d2a <usart_init_spi+0x4a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
    2d20:	61 e0       	ldi	r22, 0x01	; 1
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2d28:	f0 c0       	rjmp	.+480    	; 0x2f0a <usart_init_spi+0x22a>
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    2d2a:	c0 38       	cpi	r28, 0x80	; 128
    2d2c:	f3 e0       	ldi	r31, 0x03	; 3
    2d2e:	df 07       	cpc	r29, r31
    2d30:	29 f4       	brne	.+10     	; 0x2d3c <usart_init_spi+0x5c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2d32:	61 e0       	ldi	r22, 0x01	; 1
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2d3a:	e7 c0       	rjmp	.+462    	; 0x2f0a <usart_init_spi+0x22a>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    2d3c:	c1 15       	cp	r28, r1
    2d3e:	22 e0       	ldi	r18, 0x02	; 2
    2d40:	d2 07       	cpc	r29, r18
    2d42:	29 f4       	brne	.+10     	; 0x2d4e <usart_init_spi+0x6e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2d44:	62 e0       	ldi	r22, 0x02	; 2
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2d4c:	de c0       	rjmp	.+444    	; 0x2f0a <usart_init_spi+0x22a>
	else if (module == &ADCB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    2d4e:	c1 15       	cp	r28, r1
    2d50:	83 e0       	ldi	r24, 0x03	; 3
    2d52:	d8 07       	cpc	r29, r24
    2d54:	29 f4       	brne	.+10     	; 0x2d60 <usart_init_spi+0x80>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    2d56:	64 e0       	ldi	r22, 0x04	; 4
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2d5e:	d5 c0       	rjmp	.+426    	; 0x2f0a <usart_init_spi+0x22a>
	else if (module == &TCF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
	}
#endif
#ifdef TCC4
	else if (module == &TCC4) {
    2d60:	c1 15       	cp	r28, r1
    2d62:	e8 e0       	ldi	r30, 0x08	; 8
    2d64:	de 07       	cpc	r29, r30
    2d66:	29 f4       	brne	.+10     	; 0x2d72 <usart_init_spi+0x92>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    2d68:	61 e0       	ldi	r22, 0x01	; 1
    2d6a:	83 e0       	ldi	r24, 0x03	; 3
    2d6c:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2d70:	cc c0       	rjmp	.+408    	; 0x2f0a <usart_init_spi+0x22a>
	}
#endif
#ifdef TCC5
	else if (module == &TCC5) {
    2d72:	c0 34       	cpi	r28, 0x40	; 64
    2d74:	f8 e0       	ldi	r31, 0x08	; 8
    2d76:	df 07       	cpc	r29, r31
    2d78:	29 f4       	brne	.+10     	; 0x2d84 <usart_init_spi+0xa4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    2d7a:	62 e0       	ldi	r22, 0x02	; 2
    2d7c:	83 e0       	ldi	r24, 0x03	; 3
    2d7e:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2d82:	c3 c0       	rjmp	.+390    	; 0x2f0a <usart_init_spi+0x22a>
	else if (module == &TCD4) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC4);
	}
#endif
#ifdef TCD5
	else if (module == &TCD5) {
    2d84:	c0 34       	cpi	r28, 0x40	; 64
    2d86:	29 e0       	ldi	r18, 0x09	; 9
    2d88:	d2 07       	cpc	r29, r18
    2d8a:	29 f4       	brne	.+10     	; 0x2d96 <usart_init_spi+0xb6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
    2d8c:	62 e0       	ldi	r22, 0x02	; 2
    2d8e:	84 e0       	ldi	r24, 0x04	; 4
    2d90:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2d94:	ba c0       	rjmp	.+372    	; 0x2f0a <usart_init_spi+0x22a>
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    2d96:	c0 3b       	cpi	r28, 0xB0	; 176
    2d98:	88 e0       	ldi	r24, 0x08	; 8
    2d9a:	d8 07       	cpc	r29, r24
    2d9c:	29 f4       	brne	.+10     	; 0x2da8 <usart_init_spi+0xc8>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2d9e:	64 e0       	ldi	r22, 0x04	; 4
    2da0:	83 e0       	ldi	r24, 0x03	; 3
    2da2:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2da6:	b1 c0       	rjmp	.+354    	; 0x2f0a <usart_init_spi+0x22a>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    2da8:	c0 3e       	cpi	r28, 0xE0	; 224
    2daa:	e8 e0       	ldi	r30, 0x08	; 8
    2dac:	de 07       	cpc	r29, r30
    2dae:	29 f4       	brne	.+10     	; 0x2dba <usart_init_spi+0xda>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2db0:	68 e0       	ldi	r22, 0x08	; 8
    2db2:	83 e0       	ldi	r24, 0x03	; 3
    2db4:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2db8:	a8 c0       	rjmp	.+336    	; 0x2f0a <usart_init_spi+0x22a>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2dba:	c0 3c       	cpi	r28, 0xC0	; 192
    2dbc:	f8 e0       	ldi	r31, 0x08	; 8
    2dbe:	df 07       	cpc	r29, r31
    2dc0:	69 f4       	brne	.+26     	; 0x2ddc <usart_init_spi+0xfc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2dc2:	60 e1       	ldi	r22, 0x10	; 16
    2dc4:	83 e0       	ldi	r24, 0x03	; 3
    2dc6:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    2dca:	e0 ec       	ldi	r30, 0xC0	; 192
    2dcc:	f8 e0       	ldi	r31, 0x08	; 8
    2dce:	83 81       	ldd	r24, Z+3	; 0x03
    2dd0:	8f 7e       	andi	r24, 0xEF	; 239
    2dd2:	83 83       	std	Z+3, r24	; 0x03
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    2dd4:	f8 01       	movw	r30, r16
    2dd6:	34 81       	ldd	r19, Z+4	; 0x04
    2dd8:	32 50       	subi	r19, 0x02	; 2
    2dda:	26 c0       	rjmp	.+76     	; 0x2e28 <usart_init_spi+0x148>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    2ddc:	c0 3c       	cpi	r28, 0xC0	; 192
    2dde:	f9 e0       	ldi	r31, 0x09	; 9
    2de0:	df 07       	cpc	r29, r31
    2de2:	29 f4       	brne	.+10     	; 0x2dee <usart_init_spi+0x10e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2de4:	60 e1       	ldi	r22, 0x10	; 16
    2de6:	84 e0       	ldi	r24, 0x04	; 4
    2de8:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2dec:	8e c0       	rjmp	.+284    	; 0x2f0a <usart_init_spi+0x22a>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    2dee:	c0 38       	cpi	r28, 0x80	; 128
    2df0:	24 e0       	ldi	r18, 0x04	; 4
    2df2:	d2 07       	cpc	r29, r18
    2df4:	29 f4       	brne	.+10     	; 0x2e00 <usart_init_spi+0x120>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2df6:	60 e4       	ldi	r22, 0x40	; 64
    2df8:	83 e0       	ldi	r24, 0x03	; 3
    2dfa:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2dfe:	85 c0       	rjmp	.+266    	; 0x2f0a <usart_init_spi+0x22a>
	else if (module == &TWIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
	}
#endif
#ifdef XCL
	else if (module == &XCL) {
    2e00:	c0 36       	cpi	r28, 0x60	; 96
    2e02:	84 e0       	ldi	r24, 0x04	; 4
    2e04:	d8 07       	cpc	r29, r24
    2e06:	29 f4       	brne	.+10     	; 0x2e12 <usart_init_spi+0x132>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_XCL);
    2e08:	60 e8       	ldi	r22, 0x80	; 128
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
    2e10:	7c c0       	rjmp	.+248    	; 0x2f0a <usart_init_spi+0x22a>
    2e12:	8b 81       	ldd	r24, Y+3	; 0x03
    2e14:	8f 7e       	andi	r24, 0xEF	; 239
    2e16:	8b 83       	std	Y+3, r24	; 0x03
    2e18:	fb 01       	movw	r30, r22
    2e1a:	34 81       	ldd	r19, Z+4	; 0x04
    2e1c:	32 50       	subi	r19, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    2e1e:	ce 01       	movw	r24, r28
    2e20:	c0 3c       	cpi	r28, 0xC0	; 192
    2e22:	f8 e0       	ldi	r31, 0x08	; 8
    2e24:	df 07       	cpc	r29, r31
    2e26:	51 f4       	brne	.+20     	; 0x2e3c <usart_init_spi+0x15c>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    2e28:	e0 e4       	ldi	r30, 0x40	; 64
    2e2a:	f6 e0       	ldi	r31, 0x06	; 6
    2e2c:	86 85       	ldd	r24, Z+14	; 0x0e
    2e2e:	84 fd       	sbrc	r24, 4
    2e30:	74 c0       	rjmp	.+232    	; 0x2f1a <usart_init_spi+0x23a>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    2e32:	0f 2e       	mov	r0, r31
    2e34:	f1 e1       	ldi	r31, 0x11	; 17
    2e36:	ff 2e       	mov	r15, r31
    2e38:	f0 2d       	mov	r31, r0
    2e3a:	11 c0       	rjmp	.+34     	; 0x2e5e <usart_init_spi+0x17e>
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    2e3c:	80 3c       	cpi	r24, 0xC0	; 192
    2e3e:	99 40       	sbci	r25, 0x09	; 9
    2e40:	71 f4       	brne	.+28     	; 0x2e5e <usart_init_spi+0x17e>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    2e42:	e0 e6       	ldi	r30, 0x60	; 96
    2e44:	f6 e0       	ldi	r31, 0x06	; 6
    2e46:	86 85       	ldd	r24, Z+14	; 0x0e
    2e48:	84 ff       	sbrs	r24, 4
    2e4a:	05 c0       	rjmp	.+10     	; 0x2e56 <usart_init_spi+0x176>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    2e4c:	0f 2e       	mov	r0, r31
    2e4e:	fd e1       	ldi	r31, 0x1D	; 29
    2e50:	ff 2e       	mov	r15, r31
    2e52:	f0 2d       	mov	r31, r0
    2e54:	04 c0       	rjmp	.+8      	; 0x2e5e <usart_init_spi+0x17e>
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    2e56:	0f 2e       	mov	r0, r31
    2e58:	f9 e1       	ldi	r31, 0x19	; 25
    2e5a:	ff 2e       	mov	r15, r31
    2e5c:	f0 2d       	mov	r31, r0
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    2e5e:	af 2d       	mov	r26, r15
    2e60:	a6 95       	lsr	r26
    2e62:	a6 95       	lsr	r26
    2e64:	a6 95       	lsr	r26
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    2e66:	80 e2       	ldi	r24, 0x20	; 32
    2e68:	a8 9f       	mul	r26, r24
    2e6a:	d0 01       	movw	r26, r0
    2e6c:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2e6e:	ba 5f       	subi	r27, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2e70:	2f 2d       	mov	r18, r15
    2e72:	27 70       	andi	r18, 0x07	; 7
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	02 2e       	mov	r0, r18
    2e7a:	02 c0       	rjmp	.+4      	; 0x2e80 <usart_init_spi+0x1a0>
    2e7c:	88 0f       	add	r24, r24
    2e7e:	99 1f       	adc	r25, r25
    2e80:	0a 94       	dec	r0
    2e82:	e2 f7       	brpl	.-8      	; 0x2e7c <usart_init_spi+0x19c>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    2e84:	11 96       	adiw	r26, 0x01	; 1
    2e86:	8c 93       	st	X, r24
    2e88:	11 97       	sbiw	r26, 0x01	; 1
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    2e8a:	32 30       	cpi	r19, 0x02	; 2
    2e8c:	10 f4       	brcc	.+4      	; 0x2e92 <usart_init_spi+0x1b2>
    2e8e:	30 e4       	ldi	r19, 0x40	; 64
    2e90:	01 c0       	rjmp	.+2      	; 0x2e94 <usart_init_spi+0x1b4>
    2e92:	30 e0       	ldi	r19, 0x00	; 0
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    2e94:	fd 01       	movw	r30, r26
    2e96:	70 96       	adiw	r30, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    2e98:	e2 0f       	add	r30, r18
    2e9a:	f1 1d       	adc	r31, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2e9c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2e9e:	f8 94       	cli
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    2ea0:	20 81       	ld	r18, Z
    2ea2:	27 70       	andi	r18, 0x07	; 7
    2ea4:	20 83       	st	Z, r18
	*pin_ctrl |= mode;
    2ea6:	20 81       	ld	r18, Z
    2ea8:	23 2b       	or	r18, r19
    2eaa:	20 83       	st	Z, r18
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2eac:	9f bf       	out	0x3f, r25	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2eae:	15 96       	adiw	r26, 0x05	; 5
    2eb0:	8c 93       	st	X, r24
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    2eb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb4:	80 6c       	ori	r24, 0xC0	; 192
    2eb6:	8c 83       	std	Y+4, r24	; 0x04
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    2eb8:	f8 01       	movw	r30, r16
    2eba:	84 81       	ldd	r24, Z+4	; 0x04
    2ebc:	8d 7f       	andi	r24, 0xFD	; 253
    2ebe:	81 30       	cpi	r24, 0x01	; 1
    2ec0:	21 f4       	brne	.+8      	; 0x2eca <usart_init_spi+0x1ea>
		usart->CTRLC |= USART_UCPHA_bm;
    2ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec4:	82 60       	ori	r24, 0x02	; 2
    2ec6:	8c 83       	std	Y+4, r24	; 0x04
    2ec8:	03 c0       	rjmp	.+6      	; 0x2ed0 <usart_init_spi+0x1f0>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    2eca:	8c 81       	ldd	r24, Y+4	; 0x04
    2ecc:	8d 7f       	andi	r24, 0xFD	; 253
    2ece:	8c 83       	std	Y+4, r24	; 0x04
	}
	if (opt->data_order) {
    2ed0:	f8 01       	movw	r30, r16
    2ed2:	85 81       	ldd	r24, Z+5	; 0x05
    2ed4:	88 23       	and	r24, r24
    2ed6:	21 f0       	breq	.+8      	; 0x2ee0 <usart_init_spi+0x200>
		(usart)->CTRLC |= USART_DORD_bm;
    2ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eda:	84 60       	ori	r24, 0x04	; 4
    2edc:	8c 83       	std	Y+4, r24	; 0x04
    2ede:	03 c0       	rjmp	.+6      	; 0x2ee6 <usart_init_spi+0x206>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    2ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee2:	8b 7f       	andi	r24, 0xFB	; 251
    2ee4:	8c 83       	std	Y+4, r24	; 0x04
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    2ee6:	f8 01       	movw	r30, r16
    2ee8:	40 81       	ld	r20, Z
    2eea:	51 81       	ldd	r21, Z+1	; 0x01
    2eec:	62 81       	ldd	r22, Z+2	; 0x02
    2eee:	73 81       	ldd	r23, Z+3	; 0x03
    2ef0:	00 e0       	ldi	r16, 0x00	; 0
    2ef2:	18 e4       	ldi	r17, 0x48	; 72
    2ef4:	28 ee       	ldi	r18, 0xE8	; 232
    2ef6:	31 e0       	ldi	r19, 0x01	; 1
    2ef8:	ce 01       	movw	r24, r28
    2efa:	c1 de       	rcall	.-638    	; 0x2c7e <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    2efc:	8b 81       	ldd	r24, Y+3	; 0x03
    2efe:	88 60       	ori	r24, 0x08	; 8
    2f00:	8b 83       	std	Y+3, r24	; 0x03
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    2f02:	8b 81       	ldd	r24, Y+3	; 0x03
    2f04:	80 61       	ori	r24, 0x10	; 16
    2f06:	8b 83       	std	Y+3, r24	; 0x03
    2f08:	0d c0       	rjmp	.+26     	; 0x2f24 <usart_init_spi+0x244>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	8f 7e       	andi	r24, 0xEF	; 239
    2f0e:	8b 83       	std	Y+3, r24	; 0x03
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    2f10:	f8 01       	movw	r30, r16
    2f12:	34 81       	ldd	r19, Z+4	; 0x04
    2f14:	32 50       	subi	r19, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    2f16:	ce 01       	movw	r24, r28
    2f18:	91 cf       	rjmp	.-222    	; 0x2e3c <usart_init_spi+0x15c>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    2f1a:	0f 2e       	mov	r0, r31
    2f1c:	f5 e1       	ldi	r31, 0x15	; 21
    2f1e:	ff 2e       	mov	r15, r31
    2f20:	f0 2d       	mov	r31, r0
    2f22:	9d cf       	rjmp	.-198    	; 0x2e5e <usart_init_spi+0x17e>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    2f24:	df 91       	pop	r29
    2f26:	cf 91       	pop	r28
    2f28:	1f 91       	pop	r17
    2f2a:	0f 91       	pop	r16
    2f2c:	ff 90       	pop	r15
    2f2e:	08 95       	ret

00002f30 <main_introduction_is_exist>:

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    2f30:	e0 e6       	ldi	r30, 0x60	; 96
    2f32:	f6 e0       	ldi	r31, 0x06	; 6
    2f34:	80 85       	ldd	r24, Z+8	; 0x08
 *
 * \return Exit is requested if true
 */
static bool main_introduction_is_exist(void)
{
	if (ioport_pin_is_low(GPIO_PUSH_BUTTON_1)) {
    2f36:	82 fb       	bst	r24, 2
    2f38:	88 27       	eor	r24, r24
    2f3a:	80 f9       	bld	r24, 0
		return true;
	}

	return false;
}
    2f3c:	91 e0       	ldi	r25, 0x01	; 1
    2f3e:	89 27       	eor	r24, r25
    2f40:	08 95       	ret

00002f42 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    2f42:	cf 93       	push	r28
    2f44:	df 93       	push	r29
    2f46:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    2f48:	da dc       	rcall	.-1612   	; 0x28fe <usart_getchar>
    2f4a:	88 83       	st	Y, r24
}
    2f4c:	df 91       	pop	r29
    2f4e:	cf 91       	pop	r28
    2f50:	08 95       	ret

00002f52 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    2f52:	cd cc       	rjmp	.-1638   	; 0x28ee <usart_putchar>
}
    2f54:	08 95       	ret

00002f56 <main_introduction_delay>:
 * SW1 pressed stop delay.
 *
 * \param delay_ms  delay in ms
 */
static void main_introduction_delay(uint16_t delay_ms)
{
    2f56:	8f 92       	push	r8
    2f58:	9f 92       	push	r9
    2f5a:	af 92       	push	r10
    2f5c:	bf 92       	push	r11
    2f5e:	cf 92       	push	r12
    2f60:	df 92       	push	r13
    2f62:	ef 92       	push	r14
    2f64:	ff 92       	push	r15
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29
    2f6e:	8c 01       	movw	r16, r24
	/* Initialization TC to manage a delay between each slides */
	tc45_enable(&TCD5);
    2f70:	80 e4       	ldi	r24, 0x40	; 64
    2f72:	99 e0       	ldi	r25, 0x09	; 9
    2f74:	4c dc       	rcall	.-1896   	; 0x280e <tc45_enable>
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
				TC45_CLKSEL_enum;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLA
			= (((TC5_t *)tc)->CTRLA & ~TC5_CLKSEL_gm) |
    2f76:	e0 e4       	ldi	r30, 0x40	; 64
    2f78:	f9 e0       	ldi	r31, 0x09	; 9
    2f7a:	80 81       	ld	r24, Z
    2f7c:	80 7f       	andi	r24, 0xF0	; 240
    2f7e:	87 60       	ori	r24, 0x07	; 7
    2f80:	80 83       	st	Z, r24
{
	if (dir == TC45_UP) {
		if (tc45_is_TC4(void *tc)) {
			((TC4_t *)tc)->CTRLGCLR = TC4_DIR_bm;
		} else if (tc45_is_TC5(void *tc)) {
			((TC5_t *)tc)->CTRLGCLR = TC4_DIR_bm;
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	80 87       	std	Z+8, r24	; 0x08
	/* 32MHz / 1024 */
	tc45_write_clock_source(&TCD5, TC45_CLKSEL_DIV1024_gc);
	tc45_set_direction(&TCD5, TC45_UP);
	while (delay_ms) {
    2f86:	01 15       	cp	r16, r1
    2f88:	11 05       	cpc	r17, r1
    2f8a:	91 f1       	breq	.+100    	; 0x2ff0 <main_introduction_delay+0x9a>
static inline void tc45_write_count(volatile void *tc, uint16_t cnt_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CNT = cnt_value;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CNT = cnt_value;
    2f8c:	c0 e4       	ldi	r28, 0x40	; 64
    2f8e:	d9 e0       	ldi	r29, 0x09	; 9
    2f90:	0f 2e       	mov	r0, r31
    2f92:	f0 ed       	ldi	r31, 0xD0	; 208
    2f94:	8f 2e       	mov	r8, r31
    2f96:	f0 2d       	mov	r31, r0
    2f98:	0f 2e       	mov	r0, r31
    2f9a:	f7 e0       	ldi	r31, 0x07	; 7
    2f9c:	9f 2e       	mov	r9, r31
    2f9e:	f0 2d       	mov	r31, r0
    2fa0:	18 a2       	std	Y+32, r1	; 0x20
    2fa2:	19 a2       	std	Y+33, r1	; 0x21
    2fa4:	58 01       	movw	r10, r16
    2fa6:	01 3d       	cpi	r16, 0xD1	; 209
    2fa8:	87 e0       	ldi	r24, 0x07	; 7
    2faa:	18 07       	cpc	r17, r24
    2fac:	10 f0       	brcs	.+4      	; 0x2fb2 <main_introduction_delay+0x5c>
    2fae:	a8 2c       	mov	r10, r8
    2fb0:	b9 2c       	mov	r11, r9
		if (delay_step > 2000) {
			delay_step = 2000;
		}

		while (tc45_read_count(&TCD5) <
				((32000lu * delay_step) / 1024lu)) {
    2fb2:	95 01       	movw	r18, r10
    2fb4:	a0 e0       	ldi	r26, 0x00	; 0
    2fb6:	bd e7       	ldi	r27, 0x7D	; 125
    2fb8:	41 d1       	rcall	.+642    	; 0x323c <__umulhisi3>
    2fba:	6b 01       	movw	r12, r22
    2fbc:	7c 01       	movw	r14, r24
    2fbe:	0b 2e       	mov	r0, r27
    2fc0:	ba e0       	ldi	r27, 0x0A	; 10
    2fc2:	f6 94       	lsr	r15
    2fc4:	e7 94       	ror	r14
    2fc6:	d7 94       	ror	r13
    2fc8:	c7 94       	ror	r12
    2fca:	ba 95       	dec	r27
    2fcc:	d1 f7       	brne	.-12     	; 0x2fc2 <main_introduction_delay+0x6c>
    2fce:	b0 2d       	mov	r27, r0
    2fd0:	03 c0       	rjmp	.+6      	; 0x2fd8 <main_introduction_delay+0x82>
			if (main_introduction_is_exist()) {
    2fd2:	ae df       	rcall	.-164    	; 0x2f30 <main_introduction_is_exist>
    2fd4:	81 11       	cpse	r24, r1
    2fd6:	09 c0       	rjmp	.+18     	; 0x2fea <main_introduction_delay+0x94>
static inline uint16_t tc45_read_count(volatile void *tc)
{
	if (tc45_is_TC4(void *tc)) {
		return (((TC4_t *)tc)->CNT);
	} else if (tc45_is_TC5(void *tc)) {
		return (((TC5_t *)tc)->CNT);
    2fd8:	88 a1       	ldd	r24, Y+32	; 0x20
    2fda:	99 a1       	ldd	r25, Y+33	; 0x21
		uint16_t delay_step = delay_ms;
		if (delay_step > 2000) {
			delay_step = 2000;
		}

		while (tc45_read_count(&TCD5) <
    2fdc:	a0 e0       	ldi	r26, 0x00	; 0
    2fde:	b0 e0       	ldi	r27, 0x00	; 0
    2fe0:	8c 15       	cp	r24, r12
    2fe2:	9d 05       	cpc	r25, r13
    2fe4:	ae 05       	cpc	r26, r14
    2fe6:	bf 05       	cpc	r27, r15
    2fe8:	a0 f3       	brcs	.-24     	; 0x2fd2 <main_introduction_delay+0x7c>
				((32000lu * delay_step) / 1024lu)) {
			if (main_introduction_is_exist()) {
				break;
			}
		}
		delay_ms -= delay_step;
    2fea:	0a 19       	sub	r16, r10
    2fec:	1b 09       	sbc	r17, r11
	/* Initialization TC to manage a delay between each slides */
	tc45_enable(&TCD5);
	/* 32MHz / 1024 */
	tc45_write_clock_source(&TCD5, TC45_CLKSEL_DIV1024_gc);
	tc45_set_direction(&TCD5, TC45_UP);
	while (delay_ms) {
    2fee:	c1 f6       	brne	.-80     	; 0x2fa0 <main_introduction_delay+0x4a>
				break;
			}
		}
		delay_ms -= delay_step;
	}
	tc45_disable(&TCD5);
    2ff0:	80 e4       	ldi	r24, 0x40	; 64
    2ff2:	99 e0       	ldi	r25, 0x09	; 9
    2ff4:	44 dc       	rcall	.-1912   	; 0x287e <tc45_disable>
}
    2ff6:	df 91       	pop	r29
    2ff8:	cf 91       	pop	r28
    2ffa:	1f 91       	pop	r17
    2ffc:	0f 91       	pop	r16
    2ffe:	ff 90       	pop	r15
    3000:	ef 90       	pop	r14
    3002:	df 90       	pop	r13
    3004:	cf 90       	pop	r12
    3006:	bf 90       	pop	r11
    3008:	af 90       	pop	r10
    300a:	9f 90       	pop	r9
    300c:	8f 90       	pop	r8
    300e:	08 95       	ret

00003010 <main>:
static bool main_introduction_is_exist(void);

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    3010:	cf 93       	push	r28
    3012:	df 93       	push	r29
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
    3018:	27 97       	sbiw	r28, 0x07	; 7
    301a:	cd bf       	out	0x3d, r28	; 61
    301c:	de bf       	out	0x3e, r29	; 62
		.charlength = USART_CHSIZE_8BIT_gc,
		.paritytype = USART_PMODE_DISABLED_gc,
		.stopbits   = false, /* No extra stopbit */
	};

	irq_initialize_vectors();
    301e:	87 e0       	ldi	r24, 0x07	; 7
    3020:	e0 ea       	ldi	r30, 0xA0	; 160
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    3026:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    3028:	10 92 67 23 	sts	0x2367, r1
    302c:	10 92 68 23 	sts	0x2368, r1
    3030:	10 92 69 23 	sts	0x2369, r1
    3034:	10 92 6a 23 	sts	0x236A, r1
    3038:	10 92 6b 23 	sts	0x236B, r1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	80 93 6c 23 	sts	0x236C, r24

	/* Initialize ASF services */
	sleepmgr_init();
	sysclk_init();
    3042:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <sysclk_init>
	board_init();
    3046:	0e 94 ce 0b 	call	0x179c	; 0x179c <board_init>
	gfx_mono_init();
    304a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <gfx_mono_ssd1306_init>
	rtc_init();
    304e:	c6 d8       	rcall	.-3700   	; 0x21dc <rtc_init>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    3050:	80 ec       	ldi	r24, 0xC0	; 192
    3052:	99 e0       	ldi	r25, 0x09	; 9
    3054:	80 93 71 23 	sts	0x2371, r24
    3058:	90 93 72 23 	sts	0x2372, r25
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    305c:	89 ea       	ldi	r24, 0xA9	; 169
    305e:	97 e1       	ldi	r25, 0x17	; 23
    3060:	80 93 6f 23 	sts	0x236F, r24
    3064:	90 93 70 23 	sts	0x2370, r25
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3068:	81 ea       	ldi	r24, 0xA1	; 161
    306a:	97 e1       	ldi	r25, 0x17	; 23
    306c:	80 93 6d 23 	sts	0x236D, r24
    3070:	90 93 6e 23 	sts	0x236E, r25
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    3074:	83 e0       	ldi	r24, 0x03	; 3
    3076:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    3078:	1e 82       	std	Y+6, r1	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    307a:	1f 82       	std	Y+7, r1	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	96 e9       	ldi	r25, 0x96	; 150
    3080:	a0 e0       	ldi	r26, 0x00	; 0
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	89 83       	std	Y+1, r24	; 0x01
    3086:	9a 83       	std	Y+2, r25	; 0x02
    3088:	ab 83       	std	Y+3, r26	; 0x03
    308a:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
	}
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    308c:	60 e1       	ldi	r22, 0x10	; 16
    308e:	84 e0       	ldi	r24, 0x04	; 4
    3090:	0e 94 a0 06 	call	0xd40	; 0xd40 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    3094:	be 01       	movw	r22, r28
    3096:	6f 5f       	subi	r22, 0xFF	; 255
    3098:	7f 4f       	sbci	r23, 0xFF	; 255
    309a:	80 ec       	ldi	r24, 0xC0	; 192
    309c:	99 e0       	ldi	r25, 0x09	; 9
    309e:	3b dd       	rcall	.-1418   	; 0x2b16 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    30a0:	63 ea       	ldi	r22, 0xA3	; 163
    30a2:	7b e0       	ldi	r23, 0x0B	; 11
    30a4:	8c eb       	ldi	r24, 0xBC	; 188
    30a6:	9b e0       	ldi	r25, 0x0B	; 11
    30a8:	58 d1       	rcall	.+688    	; 0x335a <fdevopen>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    30aa:	80 e1       	ldi	r24, 0x10	; 16
    30ac:	e0 e6       	ldi	r30, 0x60	; 96
    30ae:	f6 e0       	ldi	r31, 0x06	; 6
    30b0:	86 83       	std	Z+6, r24	; 0x06
static void main_introduction(void)
{
	LED_On(LED0_GPIO);  /* Keep power LED on */

	/* Display Atmel logo */
	if (!main_introduction_is_exist()) {
    30b2:	3e df       	rcall	.-388    	; 0x2f30 <main_introduction_is_exist>
    30b4:	81 11       	cpse	r24, r1
    30b6:	0e c0       	rjmp	.+28     	; 0x30d4 <main+0xc4>
		gfx_mono_generic_put_bitmap(&bitmap_atmel, 10, 0);
    30b8:	40 e0       	ldi	r20, 0x00	; 0
    30ba:	6a e0       	ldi	r22, 0x0A	; 10
    30bc:	86 e0       	ldi	r24, 0x06	; 6
    30be:	90 e2       	ldi	r25, 0x20	; 32
    30c0:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <gfx_mono_generic_put_bitmap>
		gfx_mono_draw_string(DISPLAY_INTRO_MSG_EXIT,
    30c4:	2e e0       	ldi	r18, 0x0E	; 14
    30c6:	30 e2       	ldi	r19, 0x20	; 32
    30c8:	49 e1       	ldi	r20, 0x19	; 25
    30ca:	60 e0       	ldi	r22, 0x00	; 0
    30cc:	89 e5       	ldi	r24, 0x59	; 89
    30ce:	90 e2       	ldi	r25, 0x20	; 32
    30d0:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_mono_draw_string>
				0, 25, &sysfont);
	}

	main_introduction_delay(DISPLAY_INTRO_ATMEL_DELAY);
    30d4:	88 eb       	ldi	r24, 0xB8	; 184
    30d6:	9b e0       	ldi	r25, 0x0B	; 11
    30d8:	3e df       	rcall	.-388    	; 0x2f56 <main_introduction_delay>
	/* Display message */
	if (!main_introduction_is_exist()) {
    30da:	2a df       	rcall	.-428    	; 0x2f30 <main_introduction_is_exist>
    30dc:	81 11       	cpse	r24, r1
    30de:	1a c0       	rjmp	.+52     	; 0x3114 <main+0x104>
		gfx_mono_init();
    30e0:	0e 94 ab 0a 	call	0x1556	; 0x1556 <gfx_mono_ssd1306_init>
		gfx_mono_draw_string(DISPLAY_INTRO_MSG_A,
    30e4:	2e e0       	ldi	r18, 0x0E	; 14
    30e6:	30 e2       	ldi	r19, 0x20	; 32
    30e8:	40 e0       	ldi	r20, 0x00	; 0
    30ea:	60 e0       	ldi	r22, 0x00	; 0
    30ec:	8b e6       	ldi	r24, 0x6B	; 107
    30ee:	90 e2       	ldi	r25, 0x20	; 32
    30f0:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_mono_draw_string>
				0, 10 * 0, &sysfont);
		gfx_mono_draw_string(DISPLAY_INTRO_MSG_B,
    30f4:	2e e0       	ldi	r18, 0x0E	; 14
    30f6:	30 e2       	ldi	r19, 0x20	; 32
    30f8:	4a e0       	ldi	r20, 0x0A	; 10
    30fa:	60 e0       	ldi	r22, 0x00	; 0
    30fc:	8f e7       	ldi	r24, 0x7F	; 127
    30fe:	90 e2       	ldi	r25, 0x20	; 32
    3100:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_mono_draw_string>
				0, 10 * 1, &sysfont);
		gfx_mono_draw_string(DISPLAY_INTRO_MSG_C,
    3104:	2e e0       	ldi	r18, 0x0E	; 14
    3106:	30 e2       	ldi	r19, 0x20	; 32
    3108:	44 e1       	ldi	r20, 0x14	; 20
    310a:	60 e0       	ldi	r22, 0x00	; 0
    310c:	82 e9       	ldi	r24, 0x92	; 146
    310e:	90 e2       	ldi	r25, 0x20	; 32
    3110:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_mono_draw_string>
				0, 10 * 2, &sysfont);
	}

	main_introduction_delay(DISPLAY_INTRO_HELP_DELAY);
    3114:	88 eb       	ldi	r24, 0xB8	; 184
    3116:	9b e0       	ldi	r25, 0x0B	; 11
    3118:	1e df       	rcall	.-452    	; 0x2f56 <main_introduction_delay>
	/* Display help */
	if (!main_introduction_is_exist()) {
    311a:	0a df       	rcall	.-492    	; 0x2f30 <main_introduction_is_exist>
    311c:	81 11       	cpse	r24, r1
    311e:	12 c0       	rjmp	.+36     	; 0x3144 <main+0x134>
		gfx_mono_init();
    3120:	0e 94 ab 0a 	call	0x1556	; 0x1556 <gfx_mono_ssd1306_init>
		gfx_mono_draw_string(DISPLAY_INTRO_HELP_A,
    3124:	2e e0       	ldi	r18, 0x0E	; 14
    3126:	30 e2       	ldi	r19, 0x20	; 32
    3128:	40 e0       	ldi	r20, 0x00	; 0
    312a:	60 e0       	ldi	r22, 0x00	; 0
    312c:	86 ea       	ldi	r24, 0xA6	; 166
    312e:	90 e2       	ldi	r25, 0x20	; 32
    3130:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_mono_draw_string>
				0, 10 * 0, &sysfont);
		gfx_mono_draw_string(DISPLAY_INTRO_HELP_B,
    3134:	2e e0       	ldi	r18, 0x0E	; 14
    3136:	30 e2       	ldi	r19, 0x20	; 32
    3138:	4a e0       	ldi	r20, 0x0A	; 10
    313a:	60 e0       	ldi	r22, 0x00	; 0
    313c:	89 eb       	ldi	r24, 0xB9	; 185
    313e:	90 e2       	ldi	r25, 0x20	; 32
    3140:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_mono_draw_string>
				0, 10 * 1, &sysfont);
	}

	main_introduction_delay(DISPLAY_INTRO_HELP_DELAY);
    3144:	88 eb       	ldi	r24, 0xB8	; 184
    3146:	9b e0       	ldi	r25, 0x0B	; 11
    3148:	06 df       	rcall	.-500    	; 0x2f56 <main_introduction_delay>

	/* Clear display */
	gfx_mono_init();
    314a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <gfx_mono_ssd1306_init>
	/* UART link with board controller */
	stdio_serial_init(&USARTD0, &usart_serial_options);

	main_introduction();
	/* Initialize tasks */
	app_cpu_load_init();
    314e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <app_cpu_load_init>
	app_sampling_init();
    3152:	0e 94 12 04 	call	0x824	; 0x824 <app_sampling_init>

	/* Initialization TC to generate an interrupt (CPU wakeup) each 100ms */
	tc45_enable(&TCD5);
    3156:	80 e4       	ldi	r24, 0x40	; 64
    3158:	99 e0       	ldi	r25, 0x09	; 9
    315a:	59 db       	rcall	.-2382   	; 0x280e <tc45_enable>
static inline void tc45_write_period(volatile void *tc, uint16_t per_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->PER = per_value;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->PER = per_value;
    315c:	e0 e4       	ldi	r30, 0x40	; 64
    315e:	f9 e0       	ldi	r31, 0x09	; 9
    3160:	8c e1       	ldi	r24, 0x1C	; 28
    3162:	9c e0       	ldi	r25, 0x0C	; 12
    3164:	86 a3       	std	Z+38, r24	; 0x26
    3166:	97 a3       	std	Z+39, r25	; 0x27
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
				TC45_CLKSEL_enum;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLA
			= (((TC5_t *)tc)->CTRLA & ~TC5_CLKSEL_gm) |
    3168:	80 81       	ld	r24, Z
    316a:	80 7f       	andi	r24, 0xF0	; 240
    316c:	87 60       	ori	r24, 0x07	; 7
    316e:	80 83       	st	Z, r24
		((TC4_t *)tc)->INTCTRLB = ((TC4_t *)tc)->INTCTRLB &
				~TC4_CCAINTLVL_gm;
		((TC4_t *)tc)->INTCTRLB
			= ((TC4_t *)tc)->INTCTRLB | (level << TC4_CCAINTLVL_gp);
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->INTCTRLB = ((TC5_t *)tc)->INTCTRLB &
    3170:	87 81       	ldd	r24, Z+7	; 0x07
    3172:	8c 7f       	andi	r24, 0xFC	; 252
    3174:	87 83       	std	Z+7, r24	; 0x07
				~TC5_CCAINTLVL_gm;
		((TC5_t *)tc)->INTCTRLB
			= ((TC5_t *)tc)->INTCTRLB | (level << TC5_CCAINTLVL_gp);
    3176:	87 81       	ldd	r24, Z+7	; 0x07
    3178:	81 60       	ori	r24, 0x01	; 1
    317a:	87 83       	std	Z+7, r24	; 0x07

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    317c:	0f 2e       	mov	r0, r31
    317e:	f7 e6       	ldi	r31, 0x67	; 103
    3180:	ef 2e       	mov	r14, r31
    3182:	f3 e2       	ldi	r31, 0x23	; 35
    3184:	ff 2e       	mov	r15, r31
    3186:	f0 2d       	mov	r31, r0
    3188:	0f 2e       	mov	r0, r31
    318a:	f8 e6       	ldi	r31, 0x68	; 104
    318c:	cf 2e       	mov	r12, r31
    318e:	f3 e2       	ldi	r31, 0x23	; 35
    3190:	df 2e       	mov	r13, r31
    3192:	f0 2d       	mov	r31, r0
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    3194:	08 e4       	ldi	r16, 0x48	; 72
    3196:	10 e0       	ldi	r17, 0x00	; 0
	tc45_set_cca_interrupt_level(&TCD5, PMIC_LVL_LOW);

	/* The main loop */
	while (true) {
		/* Enter in sleep mode */
		app_cpu_load_enter_sleep();
    3198:	0e 94 8d 02 	call	0x51a	; 0x51a <app_cpu_load_enter_sleep>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    319c:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    319e:	f7 01       	movw	r30, r14
    31a0:	80 81       	ld	r24, Z
    31a2:	81 11       	cpse	r24, r1
    31a4:	07 c0       	rjmp	.+14     	; 0x31b4 <main+0x1a4>
    31a6:	f6 01       	movw	r30, r12
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    31a8:	8f 5f       	subi	r24, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    31aa:	91 91       	ld	r25, Z+
    31ac:	99 23       	and	r25, r25
    31ae:	e1 f3       	breq	.-8      	; 0x31a8 <main+0x198>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    31b0:	81 11       	cpse	r24, r1
    31b2:	02 c0       	rjmp	.+4      	; 0x31b8 <main+0x1a8>
		cpu_irq_enable();
    31b4:	78 94       	sei
    31b6:	15 c0       	rjmp	.+42     	; 0x31e2 <main+0x1d2>
    31b8:	f8 01       	movw	r30, r16
    31ba:	90 81       	ld	r25, Z

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    31bc:	e8 2f       	mov	r30, r24
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	ec 5e       	subi	r30, 0xEC	; 236
    31c2:	ff 4d       	sbci	r31, 0xDF	; 223
    31c4:	89 2f       	mov	r24, r25
    31c6:	81 7f       	andi	r24, 0xF1	; 241
    31c8:	90 81       	ld	r25, Z
    31ca:	89 2b       	or	r24, r25
    31cc:	f8 01       	movw	r30, r16
    31ce:	80 83       	st	Z, r24
	sleep_enable();
    31d0:	80 81       	ld	r24, Z
    31d2:	81 60       	ori	r24, 0x01	; 1
    31d4:	80 83       	st	Z, r24

	cpu_irq_enable();
    31d6:	78 94       	sei
	sleep_enter();
    31d8:	88 95       	sleep

	sleep_disable();
    31da:	f8 01       	movw	r30, r16
    31dc:	80 81       	ld	r24, Z
    31de:	8e 7f       	andi	r24, 0xFE	; 254
    31e0:	80 83       	st	Z, r24
		sleepmgr_enter_sleep();

		/* Execute tasks */
		app_sampling_task();
    31e2:	0e 94 a6 04 	call	0x94c	; 0x94c <app_sampling_task>
		app_cpu_load_task();
    31e6:	0e 94 cd 02 	call	0x59a	; 0x59a <app_cpu_load_task>
	}
    31ea:	d6 cf       	rjmp	.-84     	; 0x3198 <main+0x188>

000031ec <__udivmodsi4>:
    31ec:	a1 e2       	ldi	r26, 0x21	; 33
    31ee:	1a 2e       	mov	r1, r26
    31f0:	aa 1b       	sub	r26, r26
    31f2:	bb 1b       	sub	r27, r27
    31f4:	fd 01       	movw	r30, r26
    31f6:	0d c0       	rjmp	.+26     	; 0x3212 <__udivmodsi4_ep>

000031f8 <__udivmodsi4_loop>:
    31f8:	aa 1f       	adc	r26, r26
    31fa:	bb 1f       	adc	r27, r27
    31fc:	ee 1f       	adc	r30, r30
    31fe:	ff 1f       	adc	r31, r31
    3200:	a2 17       	cp	r26, r18
    3202:	b3 07       	cpc	r27, r19
    3204:	e4 07       	cpc	r30, r20
    3206:	f5 07       	cpc	r31, r21
    3208:	20 f0       	brcs	.+8      	; 0x3212 <__udivmodsi4_ep>
    320a:	a2 1b       	sub	r26, r18
    320c:	b3 0b       	sbc	r27, r19
    320e:	e4 0b       	sbc	r30, r20
    3210:	f5 0b       	sbc	r31, r21

00003212 <__udivmodsi4_ep>:
    3212:	66 1f       	adc	r22, r22
    3214:	77 1f       	adc	r23, r23
    3216:	88 1f       	adc	r24, r24
    3218:	99 1f       	adc	r25, r25
    321a:	1a 94       	dec	r1
    321c:	69 f7       	brne	.-38     	; 0x31f8 <__udivmodsi4_loop>
    321e:	60 95       	com	r22
    3220:	70 95       	com	r23
    3222:	80 95       	com	r24
    3224:	90 95       	com	r25
    3226:	9b 01       	movw	r18, r22
    3228:	ac 01       	movw	r20, r24
    322a:	bd 01       	movw	r22, r26
    322c:	cf 01       	movw	r24, r30
    322e:	08 95       	ret

00003230 <__tablejump2__>:
    3230:	ee 0f       	add	r30, r30
    3232:	ff 1f       	adc	r31, r31

00003234 <__tablejump__>:
    3234:	05 90       	lpm	r0, Z+
    3236:	f4 91       	lpm	r31, Z
    3238:	e0 2d       	mov	r30, r0
    323a:	09 94       	ijmp

0000323c <__umulhisi3>:
    323c:	a2 9f       	mul	r26, r18
    323e:	b0 01       	movw	r22, r0
    3240:	b3 9f       	mul	r27, r19
    3242:	c0 01       	movw	r24, r0
    3244:	a3 9f       	mul	r26, r19
    3246:	70 0d       	add	r23, r0
    3248:	81 1d       	adc	r24, r1
    324a:	11 24       	eor	r1, r1
    324c:	91 1d       	adc	r25, r1
    324e:	b2 9f       	mul	r27, r18
    3250:	70 0d       	add	r23, r0
    3252:	81 1d       	adc	r24, r1
    3254:	11 24       	eor	r1, r1
    3256:	91 1d       	adc	r25, r1
    3258:	08 95       	ret

0000325a <__umoddi3>:
    325a:	68 94       	set
    325c:	01 c0       	rjmp	.+2      	; 0x3260 <__udivdi3_umoddi3>

0000325e <__udivdi3>:
    325e:	e8 94       	clt

00003260 <__udivdi3_umoddi3>:
    3260:	8f 92       	push	r8
    3262:	9f 92       	push	r9
    3264:	cf 93       	push	r28
    3266:	df 93       	push	r29
    3268:	05 d0       	rcall	.+10     	; 0x3274 <__udivmod64>
    326a:	df 91       	pop	r29
    326c:	cf 91       	pop	r28
    326e:	9f 90       	pop	r9
    3270:	8f 90       	pop	r8
    3272:	08 95       	ret

00003274 <__udivmod64>:
    3274:	88 24       	eor	r8, r8
    3276:	99 24       	eor	r9, r9
    3278:	f4 01       	movw	r30, r8
    327a:	e4 01       	movw	r28, r8
    327c:	b0 e4       	ldi	r27, 0x40	; 64
    327e:	9f 93       	push	r25
    3280:	aa 27       	eor	r26, r26
    3282:	9a 15       	cp	r25, r10
    3284:	8b 04       	cpc	r8, r11
    3286:	9c 04       	cpc	r9, r12
    3288:	ed 05       	cpc	r30, r13
    328a:	fe 05       	cpc	r31, r14
    328c:	cf 05       	cpc	r28, r15
    328e:	d0 07       	cpc	r29, r16
    3290:	a1 07       	cpc	r26, r17
    3292:	98 f4       	brcc	.+38     	; 0x32ba <__udivmod64+0x46>
    3294:	ad 2f       	mov	r26, r29
    3296:	dc 2f       	mov	r29, r28
    3298:	cf 2f       	mov	r28, r31
    329a:	fe 2f       	mov	r31, r30
    329c:	e9 2d       	mov	r30, r9
    329e:	98 2c       	mov	r9, r8
    32a0:	89 2e       	mov	r8, r25
    32a2:	98 2f       	mov	r25, r24
    32a4:	87 2f       	mov	r24, r23
    32a6:	76 2f       	mov	r23, r22
    32a8:	65 2f       	mov	r22, r21
    32aa:	54 2f       	mov	r21, r20
    32ac:	43 2f       	mov	r20, r19
    32ae:	32 2f       	mov	r19, r18
    32b0:	22 27       	eor	r18, r18
    32b2:	b8 50       	subi	r27, 0x08	; 8
    32b4:	31 f7       	brne	.-52     	; 0x3282 <__udivmod64+0xe>
    32b6:	bf 91       	pop	r27
    32b8:	27 c0       	rjmp	.+78     	; 0x3308 <__udivmod64+0x94>
    32ba:	1b 2e       	mov	r1, r27
    32bc:	bf 91       	pop	r27
    32be:	bb 27       	eor	r27, r27
    32c0:	22 0f       	add	r18, r18
    32c2:	33 1f       	adc	r19, r19
    32c4:	44 1f       	adc	r20, r20
    32c6:	55 1f       	adc	r21, r21
    32c8:	66 1f       	adc	r22, r22
    32ca:	77 1f       	adc	r23, r23
    32cc:	88 1f       	adc	r24, r24
    32ce:	99 1f       	adc	r25, r25
    32d0:	88 1c       	adc	r8, r8
    32d2:	99 1c       	adc	r9, r9
    32d4:	ee 1f       	adc	r30, r30
    32d6:	ff 1f       	adc	r31, r31
    32d8:	cc 1f       	adc	r28, r28
    32da:	dd 1f       	adc	r29, r29
    32dc:	aa 1f       	adc	r26, r26
    32de:	bb 1f       	adc	r27, r27
    32e0:	8a 14       	cp	r8, r10
    32e2:	9b 04       	cpc	r9, r11
    32e4:	ec 05       	cpc	r30, r12
    32e6:	fd 05       	cpc	r31, r13
    32e8:	ce 05       	cpc	r28, r14
    32ea:	df 05       	cpc	r29, r15
    32ec:	a0 07       	cpc	r26, r16
    32ee:	b1 07       	cpc	r27, r17
    32f0:	48 f0       	brcs	.+18     	; 0x3304 <__udivmod64+0x90>
    32f2:	8a 18       	sub	r8, r10
    32f4:	9b 08       	sbc	r9, r11
    32f6:	ec 09       	sbc	r30, r12
    32f8:	fd 09       	sbc	r31, r13
    32fa:	ce 09       	sbc	r28, r14
    32fc:	df 09       	sbc	r29, r15
    32fe:	a0 0b       	sbc	r26, r16
    3300:	b1 0b       	sbc	r27, r17
    3302:	21 60       	ori	r18, 0x01	; 1
    3304:	1a 94       	dec	r1
    3306:	e1 f6       	brne	.-72     	; 0x32c0 <__udivmod64+0x4c>
    3308:	2e f4       	brtc	.+10     	; 0x3314 <__udivmod64+0xa0>
    330a:	94 01       	movw	r18, r8
    330c:	af 01       	movw	r20, r30
    330e:	be 01       	movw	r22, r28
    3310:	cd 01       	movw	r24, r26
    3312:	00 0c       	add	r0, r0
    3314:	08 95       	ret

00003316 <__ashldi3>:
    3316:	0f 93       	push	r16
    3318:	08 30       	cpi	r16, 0x08	; 8
    331a:	90 f0       	brcs	.+36     	; 0x3340 <__ashldi3+0x2a>
    331c:	98 2f       	mov	r25, r24
    331e:	87 2f       	mov	r24, r23
    3320:	76 2f       	mov	r23, r22
    3322:	65 2f       	mov	r22, r21
    3324:	54 2f       	mov	r21, r20
    3326:	43 2f       	mov	r20, r19
    3328:	32 2f       	mov	r19, r18
    332a:	22 27       	eor	r18, r18
    332c:	08 50       	subi	r16, 0x08	; 8
    332e:	f4 cf       	rjmp	.-24     	; 0x3318 <__ashldi3+0x2>
    3330:	22 0f       	add	r18, r18
    3332:	33 1f       	adc	r19, r19
    3334:	44 1f       	adc	r20, r20
    3336:	55 1f       	adc	r21, r21
    3338:	66 1f       	adc	r22, r22
    333a:	77 1f       	adc	r23, r23
    333c:	88 1f       	adc	r24, r24
    333e:	99 1f       	adc	r25, r25
    3340:	0a 95       	dec	r16
    3342:	b2 f7       	brpl	.-20     	; 0x3330 <__ashldi3+0x1a>
    3344:	0f 91       	pop	r16
    3346:	08 95       	ret

00003348 <__subdi3>:
    3348:	2a 19       	sub	r18, r10
    334a:	3b 09       	sbc	r19, r11
    334c:	4c 09       	sbc	r20, r12
    334e:	5d 09       	sbc	r21, r13
    3350:	6e 09       	sbc	r22, r14
    3352:	7f 09       	sbc	r23, r15
    3354:	80 0b       	sbc	r24, r16
    3356:	91 0b       	sbc	r25, r17
    3358:	08 95       	ret

0000335a <fdevopen>:
    335a:	0f 93       	push	r16
    335c:	1f 93       	push	r17
    335e:	cf 93       	push	r28
    3360:	df 93       	push	r29
    3362:	ec 01       	movw	r28, r24
    3364:	8b 01       	movw	r16, r22
    3366:	00 97       	sbiw	r24, 0x00	; 0
    3368:	31 f4       	brne	.+12     	; 0x3376 <fdevopen+0x1c>
    336a:	61 15       	cp	r22, r1
    336c:	71 05       	cpc	r23, r1
    336e:	19 f4       	brne	.+6      	; 0x3376 <fdevopen+0x1c>
    3370:	80 e0       	ldi	r24, 0x00	; 0
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	37 c0       	rjmp	.+110    	; 0x33e4 <fdevopen+0x8a>
    3376:	6e e0       	ldi	r22, 0x0E	; 14
    3378:	70 e0       	ldi	r23, 0x00	; 0
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	2a d2       	rcall	.+1108   	; 0x37d4 <calloc>
    3380:	fc 01       	movw	r30, r24
    3382:	00 97       	sbiw	r24, 0x00	; 0
    3384:	a9 f3       	breq	.-22     	; 0x3370 <fdevopen+0x16>
    3386:	80 e8       	ldi	r24, 0x80	; 128
    3388:	83 83       	std	Z+3, r24	; 0x03
    338a:	01 15       	cp	r16, r1
    338c:	11 05       	cpc	r17, r1
    338e:	71 f0       	breq	.+28     	; 0x33ac <fdevopen+0x52>
    3390:	02 87       	std	Z+10, r16	; 0x0a
    3392:	13 87       	std	Z+11, r17	; 0x0b
    3394:	81 e8       	ldi	r24, 0x81	; 129
    3396:	83 83       	std	Z+3, r24	; 0x03
    3398:	80 91 7d 23 	lds	r24, 0x237D
    339c:	90 91 7e 23 	lds	r25, 0x237E
    33a0:	89 2b       	or	r24, r25
    33a2:	21 f4       	brne	.+8      	; 0x33ac <fdevopen+0x52>
    33a4:	e0 93 7d 23 	sts	0x237D, r30
    33a8:	f0 93 7e 23 	sts	0x237E, r31
    33ac:	20 97       	sbiw	r28, 0x00	; 0
    33ae:	c9 f0       	breq	.+50     	; 0x33e2 <fdevopen+0x88>
    33b0:	c0 87       	std	Z+8, r28	; 0x08
    33b2:	d1 87       	std	Z+9, r29	; 0x09
    33b4:	83 81       	ldd	r24, Z+3	; 0x03
    33b6:	82 60       	ori	r24, 0x02	; 2
    33b8:	83 83       	std	Z+3, r24	; 0x03
    33ba:	80 91 7f 23 	lds	r24, 0x237F
    33be:	90 91 80 23 	lds	r25, 0x2380
    33c2:	89 2b       	or	r24, r25
    33c4:	71 f4       	brne	.+28     	; 0x33e2 <fdevopen+0x88>
    33c6:	e0 93 7f 23 	sts	0x237F, r30
    33ca:	f0 93 80 23 	sts	0x2380, r31
    33ce:	80 91 81 23 	lds	r24, 0x2381
    33d2:	90 91 82 23 	lds	r25, 0x2382
    33d6:	89 2b       	or	r24, r25
    33d8:	21 f4       	brne	.+8      	; 0x33e2 <fdevopen+0x88>
    33da:	e0 93 81 23 	sts	0x2381, r30
    33de:	f0 93 82 23 	sts	0x2382, r31
    33e2:	cf 01       	movw	r24, r30
    33e4:	df 91       	pop	r29
    33e6:	cf 91       	pop	r28
    33e8:	1f 91       	pop	r17
    33ea:	0f 91       	pop	r16
    33ec:	08 95       	ret

000033ee <printf>:
    33ee:	a0 e0       	ldi	r26, 0x00	; 0
    33f0:	b0 e0       	ldi	r27, 0x00	; 0
    33f2:	ec ef       	ldi	r30, 0xFC	; 252
    33f4:	f9 e1       	ldi	r31, 0x19	; 25
    33f6:	ec c3       	rjmp	.+2008   	; 0x3bd0 <__prologue_saves__+0x20>
    33f8:	fe 01       	movw	r30, r28
    33fa:	35 96       	adiw	r30, 0x05	; 5
    33fc:	61 91       	ld	r22, Z+
    33fe:	71 91       	ld	r23, Z+
    3400:	af 01       	movw	r20, r30
    3402:	80 91 7f 23 	lds	r24, 0x237F
    3406:	90 91 80 23 	lds	r25, 0x2380
    340a:	21 d0       	rcall	.+66     	; 0x344e <vfprintf>
    340c:	e2 e0       	ldi	r30, 0x02	; 2
    340e:	f9 c3       	rjmp	.+2034   	; 0x3c02 <__epilogue_restores__+0x20>

00003410 <sprintf>:
    3410:	ae e0       	ldi	r26, 0x0E	; 14
    3412:	b0 e0       	ldi	r27, 0x00	; 0
    3414:	ed e0       	ldi	r30, 0x0D	; 13
    3416:	fa e1       	ldi	r31, 0x1A	; 26
    3418:	d9 c3       	rjmp	.+1970   	; 0x3bcc <__prologue_saves__+0x1c>
    341a:	0d 89       	ldd	r16, Y+21	; 0x15
    341c:	1e 89       	ldd	r17, Y+22	; 0x16
    341e:	86 e0       	ldi	r24, 0x06	; 6
    3420:	8c 83       	std	Y+4, r24	; 0x04
    3422:	09 83       	std	Y+1, r16	; 0x01
    3424:	1a 83       	std	Y+2, r17	; 0x02
    3426:	8f ef       	ldi	r24, 0xFF	; 255
    3428:	9f e7       	ldi	r25, 0x7F	; 127
    342a:	8d 83       	std	Y+5, r24	; 0x05
    342c:	9e 83       	std	Y+6, r25	; 0x06
    342e:	ae 01       	movw	r20, r28
    3430:	47 5e       	subi	r20, 0xE7	; 231
    3432:	5f 4f       	sbci	r21, 0xFF	; 255
    3434:	6f 89       	ldd	r22, Y+23	; 0x17
    3436:	78 8d       	ldd	r23, Y+24	; 0x18
    3438:	ce 01       	movw	r24, r28
    343a:	01 96       	adiw	r24, 0x01	; 1
    343c:	08 d0       	rcall	.+16     	; 0x344e <vfprintf>
    343e:	ef 81       	ldd	r30, Y+7	; 0x07
    3440:	f8 85       	ldd	r31, Y+8	; 0x08
    3442:	e0 0f       	add	r30, r16
    3444:	f1 1f       	adc	r31, r17
    3446:	10 82       	st	Z, r1
    3448:	2e 96       	adiw	r28, 0x0e	; 14
    344a:	e4 e0       	ldi	r30, 0x04	; 4
    344c:	d8 c3       	rjmp	.+1968   	; 0x3bfe <__epilogue_restores__+0x1c>

0000344e <vfprintf>:
    344e:	ac e0       	ldi	r26, 0x0C	; 12
    3450:	b0 e0       	ldi	r27, 0x00	; 0
    3452:	ec e2       	ldi	r30, 0x2C	; 44
    3454:	fa e1       	ldi	r31, 0x1A	; 26
    3456:	ac c3       	rjmp	.+1880   	; 0x3bb0 <__prologue_saves__>
    3458:	7c 01       	movw	r14, r24
    345a:	6b 01       	movw	r12, r22
    345c:	8a 01       	movw	r16, r20
    345e:	fc 01       	movw	r30, r24
    3460:	16 82       	std	Z+6, r1	; 0x06
    3462:	17 82       	std	Z+7, r1	; 0x07
    3464:	83 81       	ldd	r24, Z+3	; 0x03
    3466:	81 ff       	sbrs	r24, 1
    3468:	b0 c1       	rjmp	.+864    	; 0x37ca <vfprintf+0x37c>
    346a:	ce 01       	movw	r24, r28
    346c:	01 96       	adiw	r24, 0x01	; 1
    346e:	4c 01       	movw	r8, r24
    3470:	f7 01       	movw	r30, r14
    3472:	93 81       	ldd	r25, Z+3	; 0x03
    3474:	f6 01       	movw	r30, r12
    3476:	93 fd       	sbrc	r25, 3
    3478:	85 91       	lpm	r24, Z+
    347a:	93 ff       	sbrs	r25, 3
    347c:	81 91       	ld	r24, Z+
    347e:	6f 01       	movw	r12, r30
    3480:	88 23       	and	r24, r24
    3482:	09 f4       	brne	.+2      	; 0x3486 <vfprintf+0x38>
    3484:	9e c1       	rjmp	.+828    	; 0x37c2 <vfprintf+0x374>
    3486:	85 32       	cpi	r24, 0x25	; 37
    3488:	39 f4       	brne	.+14     	; 0x3498 <vfprintf+0x4a>
    348a:	93 fd       	sbrc	r25, 3
    348c:	85 91       	lpm	r24, Z+
    348e:	93 ff       	sbrs	r25, 3
    3490:	81 91       	ld	r24, Z+
    3492:	6f 01       	movw	r12, r30
    3494:	85 32       	cpi	r24, 0x25	; 37
    3496:	21 f4       	brne	.+8      	; 0x34a0 <vfprintf+0x52>
    3498:	b7 01       	movw	r22, r14
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	f9 d2       	rcall	.+1522   	; 0x3a90 <fputc>
    349e:	e8 cf       	rjmp	.-48     	; 0x3470 <vfprintf+0x22>
    34a0:	51 2c       	mov	r5, r1
    34a2:	31 2c       	mov	r3, r1
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	20 32       	cpi	r18, 0x20	; 32
    34a8:	a0 f4       	brcc	.+40     	; 0x34d2 <vfprintf+0x84>
    34aa:	8b 32       	cpi	r24, 0x2B	; 43
    34ac:	69 f0       	breq	.+26     	; 0x34c8 <vfprintf+0x7a>
    34ae:	30 f4       	brcc	.+12     	; 0x34bc <vfprintf+0x6e>
    34b0:	80 32       	cpi	r24, 0x20	; 32
    34b2:	59 f0       	breq	.+22     	; 0x34ca <vfprintf+0x7c>
    34b4:	83 32       	cpi	r24, 0x23	; 35
    34b6:	69 f4       	brne	.+26     	; 0x34d2 <vfprintf+0x84>
    34b8:	20 61       	ori	r18, 0x10	; 16
    34ba:	2c c0       	rjmp	.+88     	; 0x3514 <vfprintf+0xc6>
    34bc:	8d 32       	cpi	r24, 0x2D	; 45
    34be:	39 f0       	breq	.+14     	; 0x34ce <vfprintf+0x80>
    34c0:	80 33       	cpi	r24, 0x30	; 48
    34c2:	39 f4       	brne	.+14     	; 0x34d2 <vfprintf+0x84>
    34c4:	21 60       	ori	r18, 0x01	; 1
    34c6:	26 c0       	rjmp	.+76     	; 0x3514 <vfprintf+0xc6>
    34c8:	22 60       	ori	r18, 0x02	; 2
    34ca:	24 60       	ori	r18, 0x04	; 4
    34cc:	23 c0       	rjmp	.+70     	; 0x3514 <vfprintf+0xc6>
    34ce:	28 60       	ori	r18, 0x08	; 8
    34d0:	21 c0       	rjmp	.+66     	; 0x3514 <vfprintf+0xc6>
    34d2:	27 fd       	sbrc	r18, 7
    34d4:	27 c0       	rjmp	.+78     	; 0x3524 <vfprintf+0xd6>
    34d6:	30 ed       	ldi	r19, 0xD0	; 208
    34d8:	38 0f       	add	r19, r24
    34da:	3a 30       	cpi	r19, 0x0A	; 10
    34dc:	78 f4       	brcc	.+30     	; 0x34fc <vfprintf+0xae>
    34de:	26 ff       	sbrs	r18, 6
    34e0:	06 c0       	rjmp	.+12     	; 0x34ee <vfprintf+0xa0>
    34e2:	fa e0       	ldi	r31, 0x0A	; 10
    34e4:	5f 9e       	mul	r5, r31
    34e6:	30 0d       	add	r19, r0
    34e8:	11 24       	eor	r1, r1
    34ea:	53 2e       	mov	r5, r19
    34ec:	13 c0       	rjmp	.+38     	; 0x3514 <vfprintf+0xc6>
    34ee:	8a e0       	ldi	r24, 0x0A	; 10
    34f0:	38 9e       	mul	r3, r24
    34f2:	30 0d       	add	r19, r0
    34f4:	11 24       	eor	r1, r1
    34f6:	33 2e       	mov	r3, r19
    34f8:	20 62       	ori	r18, 0x20	; 32
    34fa:	0c c0       	rjmp	.+24     	; 0x3514 <vfprintf+0xc6>
    34fc:	8e 32       	cpi	r24, 0x2E	; 46
    34fe:	21 f4       	brne	.+8      	; 0x3508 <vfprintf+0xba>
    3500:	26 fd       	sbrc	r18, 6
    3502:	5f c1       	rjmp	.+702    	; 0x37c2 <vfprintf+0x374>
    3504:	20 64       	ori	r18, 0x40	; 64
    3506:	06 c0       	rjmp	.+12     	; 0x3514 <vfprintf+0xc6>
    3508:	8c 36       	cpi	r24, 0x6C	; 108
    350a:	11 f4       	brne	.+4      	; 0x3510 <vfprintf+0xc2>
    350c:	20 68       	ori	r18, 0x80	; 128
    350e:	02 c0       	rjmp	.+4      	; 0x3514 <vfprintf+0xc6>
    3510:	88 36       	cpi	r24, 0x68	; 104
    3512:	41 f4       	brne	.+16     	; 0x3524 <vfprintf+0xd6>
    3514:	f6 01       	movw	r30, r12
    3516:	93 fd       	sbrc	r25, 3
    3518:	85 91       	lpm	r24, Z+
    351a:	93 ff       	sbrs	r25, 3
    351c:	81 91       	ld	r24, Z+
    351e:	6f 01       	movw	r12, r30
    3520:	81 11       	cpse	r24, r1
    3522:	c1 cf       	rjmp	.-126    	; 0x34a6 <vfprintf+0x58>
    3524:	98 2f       	mov	r25, r24
    3526:	9f 7d       	andi	r25, 0xDF	; 223
    3528:	95 54       	subi	r25, 0x45	; 69
    352a:	93 30       	cpi	r25, 0x03	; 3
    352c:	28 f4       	brcc	.+10     	; 0x3538 <vfprintf+0xea>
    352e:	0c 5f       	subi	r16, 0xFC	; 252
    3530:	1f 4f       	sbci	r17, 0xFF	; 255
    3532:	ff e3       	ldi	r31, 0x3F	; 63
    3534:	f9 83       	std	Y+1, r31	; 0x01
    3536:	0d c0       	rjmp	.+26     	; 0x3552 <vfprintf+0x104>
    3538:	83 36       	cpi	r24, 0x63	; 99
    353a:	31 f0       	breq	.+12     	; 0x3548 <vfprintf+0xfa>
    353c:	83 37       	cpi	r24, 0x73	; 115
    353e:	71 f0       	breq	.+28     	; 0x355c <vfprintf+0x10e>
    3540:	83 35       	cpi	r24, 0x53	; 83
    3542:	09 f0       	breq	.+2      	; 0x3546 <vfprintf+0xf8>
    3544:	57 c0       	rjmp	.+174    	; 0x35f4 <vfprintf+0x1a6>
    3546:	21 c0       	rjmp	.+66     	; 0x358a <vfprintf+0x13c>
    3548:	f8 01       	movw	r30, r16
    354a:	80 81       	ld	r24, Z
    354c:	89 83       	std	Y+1, r24	; 0x01
    354e:	0e 5f       	subi	r16, 0xFE	; 254
    3550:	1f 4f       	sbci	r17, 0xFF	; 255
    3552:	44 24       	eor	r4, r4
    3554:	43 94       	inc	r4
    3556:	51 2c       	mov	r5, r1
    3558:	54 01       	movw	r10, r8
    355a:	14 c0       	rjmp	.+40     	; 0x3584 <vfprintf+0x136>
    355c:	38 01       	movw	r6, r16
    355e:	f2 e0       	ldi	r31, 0x02	; 2
    3560:	6f 0e       	add	r6, r31
    3562:	71 1c       	adc	r7, r1
    3564:	f8 01       	movw	r30, r16
    3566:	a0 80       	ld	r10, Z
    3568:	b1 80       	ldd	r11, Z+1	; 0x01
    356a:	26 ff       	sbrs	r18, 6
    356c:	03 c0       	rjmp	.+6      	; 0x3574 <vfprintf+0x126>
    356e:	65 2d       	mov	r22, r5
    3570:	70 e0       	ldi	r23, 0x00	; 0
    3572:	02 c0       	rjmp	.+4      	; 0x3578 <vfprintf+0x12a>
    3574:	6f ef       	ldi	r22, 0xFF	; 255
    3576:	7f ef       	ldi	r23, 0xFF	; 255
    3578:	c5 01       	movw	r24, r10
    357a:	2c 87       	std	Y+12, r18	; 0x0c
    357c:	7e d2       	rcall	.+1276   	; 0x3a7a <strnlen>
    357e:	2c 01       	movw	r4, r24
    3580:	83 01       	movw	r16, r6
    3582:	2c 85       	ldd	r18, Y+12	; 0x0c
    3584:	2f 77       	andi	r18, 0x7F	; 127
    3586:	22 2e       	mov	r2, r18
    3588:	16 c0       	rjmp	.+44     	; 0x35b6 <vfprintf+0x168>
    358a:	38 01       	movw	r6, r16
    358c:	f2 e0       	ldi	r31, 0x02	; 2
    358e:	6f 0e       	add	r6, r31
    3590:	71 1c       	adc	r7, r1
    3592:	f8 01       	movw	r30, r16
    3594:	a0 80       	ld	r10, Z
    3596:	b1 80       	ldd	r11, Z+1	; 0x01
    3598:	26 ff       	sbrs	r18, 6
    359a:	03 c0       	rjmp	.+6      	; 0x35a2 <vfprintf+0x154>
    359c:	65 2d       	mov	r22, r5
    359e:	70 e0       	ldi	r23, 0x00	; 0
    35a0:	02 c0       	rjmp	.+4      	; 0x35a6 <vfprintf+0x158>
    35a2:	6f ef       	ldi	r22, 0xFF	; 255
    35a4:	7f ef       	ldi	r23, 0xFF	; 255
    35a6:	c5 01       	movw	r24, r10
    35a8:	2c 87       	std	Y+12, r18	; 0x0c
    35aa:	55 d2       	rcall	.+1194   	; 0x3a56 <strnlen_P>
    35ac:	2c 01       	movw	r4, r24
    35ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    35b0:	20 68       	ori	r18, 0x80	; 128
    35b2:	22 2e       	mov	r2, r18
    35b4:	83 01       	movw	r16, r6
    35b6:	23 fc       	sbrc	r2, 3
    35b8:	19 c0       	rjmp	.+50     	; 0x35ec <vfprintf+0x19e>
    35ba:	83 2d       	mov	r24, r3
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	48 16       	cp	r4, r24
    35c0:	59 06       	cpc	r5, r25
    35c2:	a0 f4       	brcc	.+40     	; 0x35ec <vfprintf+0x19e>
    35c4:	b7 01       	movw	r22, r14
    35c6:	80 e2       	ldi	r24, 0x20	; 32
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	62 d2       	rcall	.+1220   	; 0x3a90 <fputc>
    35cc:	3a 94       	dec	r3
    35ce:	f5 cf       	rjmp	.-22     	; 0x35ba <vfprintf+0x16c>
    35d0:	f5 01       	movw	r30, r10
    35d2:	27 fc       	sbrc	r2, 7
    35d4:	85 91       	lpm	r24, Z+
    35d6:	27 fe       	sbrs	r2, 7
    35d8:	81 91       	ld	r24, Z+
    35da:	5f 01       	movw	r10, r30
    35dc:	b7 01       	movw	r22, r14
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	57 d2       	rcall	.+1198   	; 0x3a90 <fputc>
    35e2:	31 10       	cpse	r3, r1
    35e4:	3a 94       	dec	r3
    35e6:	f1 e0       	ldi	r31, 0x01	; 1
    35e8:	4f 1a       	sub	r4, r31
    35ea:	51 08       	sbc	r5, r1
    35ec:	41 14       	cp	r4, r1
    35ee:	51 04       	cpc	r5, r1
    35f0:	79 f7       	brne	.-34     	; 0x35d0 <vfprintf+0x182>
    35f2:	de c0       	rjmp	.+444    	; 0x37b0 <vfprintf+0x362>
    35f4:	84 36       	cpi	r24, 0x64	; 100
    35f6:	11 f0       	breq	.+4      	; 0x35fc <vfprintf+0x1ae>
    35f8:	89 36       	cpi	r24, 0x69	; 105
    35fa:	31 f5       	brne	.+76     	; 0x3648 <vfprintf+0x1fa>
    35fc:	f8 01       	movw	r30, r16
    35fe:	27 ff       	sbrs	r18, 7
    3600:	07 c0       	rjmp	.+14     	; 0x3610 <vfprintf+0x1c2>
    3602:	60 81       	ld	r22, Z
    3604:	71 81       	ldd	r23, Z+1	; 0x01
    3606:	82 81       	ldd	r24, Z+2	; 0x02
    3608:	93 81       	ldd	r25, Z+3	; 0x03
    360a:	0c 5f       	subi	r16, 0xFC	; 252
    360c:	1f 4f       	sbci	r17, 0xFF	; 255
    360e:	08 c0       	rjmp	.+16     	; 0x3620 <vfprintf+0x1d2>
    3610:	60 81       	ld	r22, Z
    3612:	71 81       	ldd	r23, Z+1	; 0x01
    3614:	88 27       	eor	r24, r24
    3616:	77 fd       	sbrc	r23, 7
    3618:	80 95       	com	r24
    361a:	98 2f       	mov	r25, r24
    361c:	0e 5f       	subi	r16, 0xFE	; 254
    361e:	1f 4f       	sbci	r17, 0xFF	; 255
    3620:	2f 76       	andi	r18, 0x6F	; 111
    3622:	b2 2e       	mov	r11, r18
    3624:	97 ff       	sbrs	r25, 7
    3626:	09 c0       	rjmp	.+18     	; 0x363a <vfprintf+0x1ec>
    3628:	90 95       	com	r25
    362a:	80 95       	com	r24
    362c:	70 95       	com	r23
    362e:	61 95       	neg	r22
    3630:	7f 4f       	sbci	r23, 0xFF	; 255
    3632:	8f 4f       	sbci	r24, 0xFF	; 255
    3634:	9f 4f       	sbci	r25, 0xFF	; 255
    3636:	20 68       	ori	r18, 0x80	; 128
    3638:	b2 2e       	mov	r11, r18
    363a:	2a e0       	ldi	r18, 0x0A	; 10
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	a4 01       	movw	r20, r8
    3640:	59 d2       	rcall	.+1202   	; 0x3af4 <__ultoa_invert>
    3642:	a8 2e       	mov	r10, r24
    3644:	a8 18       	sub	r10, r8
    3646:	43 c0       	rjmp	.+134    	; 0x36ce <vfprintf+0x280>
    3648:	85 37       	cpi	r24, 0x75	; 117
    364a:	29 f4       	brne	.+10     	; 0x3656 <vfprintf+0x208>
    364c:	2f 7e       	andi	r18, 0xEF	; 239
    364e:	b2 2e       	mov	r11, r18
    3650:	2a e0       	ldi	r18, 0x0A	; 10
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	25 c0       	rjmp	.+74     	; 0x36a0 <vfprintf+0x252>
    3656:	f2 2f       	mov	r31, r18
    3658:	f9 7f       	andi	r31, 0xF9	; 249
    365a:	bf 2e       	mov	r11, r31
    365c:	8f 36       	cpi	r24, 0x6F	; 111
    365e:	c1 f0       	breq	.+48     	; 0x3690 <vfprintf+0x242>
    3660:	18 f4       	brcc	.+6      	; 0x3668 <vfprintf+0x21a>
    3662:	88 35       	cpi	r24, 0x58	; 88
    3664:	79 f0       	breq	.+30     	; 0x3684 <vfprintf+0x236>
    3666:	ad c0       	rjmp	.+346    	; 0x37c2 <vfprintf+0x374>
    3668:	80 37       	cpi	r24, 0x70	; 112
    366a:	19 f0       	breq	.+6      	; 0x3672 <vfprintf+0x224>
    366c:	88 37       	cpi	r24, 0x78	; 120
    366e:	21 f0       	breq	.+8      	; 0x3678 <vfprintf+0x22a>
    3670:	a8 c0       	rjmp	.+336    	; 0x37c2 <vfprintf+0x374>
    3672:	2f 2f       	mov	r18, r31
    3674:	20 61       	ori	r18, 0x10	; 16
    3676:	b2 2e       	mov	r11, r18
    3678:	b4 fe       	sbrs	r11, 4
    367a:	0d c0       	rjmp	.+26     	; 0x3696 <vfprintf+0x248>
    367c:	8b 2d       	mov	r24, r11
    367e:	84 60       	ori	r24, 0x04	; 4
    3680:	b8 2e       	mov	r11, r24
    3682:	09 c0       	rjmp	.+18     	; 0x3696 <vfprintf+0x248>
    3684:	24 ff       	sbrs	r18, 4
    3686:	0a c0       	rjmp	.+20     	; 0x369c <vfprintf+0x24e>
    3688:	9f 2f       	mov	r25, r31
    368a:	96 60       	ori	r25, 0x06	; 6
    368c:	b9 2e       	mov	r11, r25
    368e:	06 c0       	rjmp	.+12     	; 0x369c <vfprintf+0x24e>
    3690:	28 e0       	ldi	r18, 0x08	; 8
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	05 c0       	rjmp	.+10     	; 0x36a0 <vfprintf+0x252>
    3696:	20 e1       	ldi	r18, 0x10	; 16
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	02 c0       	rjmp	.+4      	; 0x36a0 <vfprintf+0x252>
    369c:	20 e1       	ldi	r18, 0x10	; 16
    369e:	32 e0       	ldi	r19, 0x02	; 2
    36a0:	f8 01       	movw	r30, r16
    36a2:	b7 fe       	sbrs	r11, 7
    36a4:	07 c0       	rjmp	.+14     	; 0x36b4 <vfprintf+0x266>
    36a6:	60 81       	ld	r22, Z
    36a8:	71 81       	ldd	r23, Z+1	; 0x01
    36aa:	82 81       	ldd	r24, Z+2	; 0x02
    36ac:	93 81       	ldd	r25, Z+3	; 0x03
    36ae:	0c 5f       	subi	r16, 0xFC	; 252
    36b0:	1f 4f       	sbci	r17, 0xFF	; 255
    36b2:	06 c0       	rjmp	.+12     	; 0x36c0 <vfprintf+0x272>
    36b4:	60 81       	ld	r22, Z
    36b6:	71 81       	ldd	r23, Z+1	; 0x01
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	0e 5f       	subi	r16, 0xFE	; 254
    36be:	1f 4f       	sbci	r17, 0xFF	; 255
    36c0:	a4 01       	movw	r20, r8
    36c2:	18 d2       	rcall	.+1072   	; 0x3af4 <__ultoa_invert>
    36c4:	a8 2e       	mov	r10, r24
    36c6:	a8 18       	sub	r10, r8
    36c8:	fb 2d       	mov	r31, r11
    36ca:	ff 77       	andi	r31, 0x7F	; 127
    36cc:	bf 2e       	mov	r11, r31
    36ce:	b6 fe       	sbrs	r11, 6
    36d0:	0b c0       	rjmp	.+22     	; 0x36e8 <vfprintf+0x29a>
    36d2:	2b 2d       	mov	r18, r11
    36d4:	2e 7f       	andi	r18, 0xFE	; 254
    36d6:	a5 14       	cp	r10, r5
    36d8:	50 f4       	brcc	.+20     	; 0x36ee <vfprintf+0x2a0>
    36da:	b4 fe       	sbrs	r11, 4
    36dc:	0a c0       	rjmp	.+20     	; 0x36f2 <vfprintf+0x2a4>
    36de:	b2 fc       	sbrc	r11, 2
    36e0:	08 c0       	rjmp	.+16     	; 0x36f2 <vfprintf+0x2a4>
    36e2:	2b 2d       	mov	r18, r11
    36e4:	2e 7e       	andi	r18, 0xEE	; 238
    36e6:	05 c0       	rjmp	.+10     	; 0x36f2 <vfprintf+0x2a4>
    36e8:	7a 2c       	mov	r7, r10
    36ea:	2b 2d       	mov	r18, r11
    36ec:	03 c0       	rjmp	.+6      	; 0x36f4 <vfprintf+0x2a6>
    36ee:	7a 2c       	mov	r7, r10
    36f0:	01 c0       	rjmp	.+2      	; 0x36f4 <vfprintf+0x2a6>
    36f2:	75 2c       	mov	r7, r5
    36f4:	24 ff       	sbrs	r18, 4
    36f6:	0d c0       	rjmp	.+26     	; 0x3712 <vfprintf+0x2c4>
    36f8:	fe 01       	movw	r30, r28
    36fa:	ea 0d       	add	r30, r10
    36fc:	f1 1d       	adc	r31, r1
    36fe:	80 81       	ld	r24, Z
    3700:	80 33       	cpi	r24, 0x30	; 48
    3702:	11 f4       	brne	.+4      	; 0x3708 <vfprintf+0x2ba>
    3704:	29 7e       	andi	r18, 0xE9	; 233
    3706:	09 c0       	rjmp	.+18     	; 0x371a <vfprintf+0x2cc>
    3708:	22 ff       	sbrs	r18, 2
    370a:	06 c0       	rjmp	.+12     	; 0x3718 <vfprintf+0x2ca>
    370c:	73 94       	inc	r7
    370e:	73 94       	inc	r7
    3710:	04 c0       	rjmp	.+8      	; 0x371a <vfprintf+0x2cc>
    3712:	82 2f       	mov	r24, r18
    3714:	86 78       	andi	r24, 0x86	; 134
    3716:	09 f0       	breq	.+2      	; 0x371a <vfprintf+0x2cc>
    3718:	73 94       	inc	r7
    371a:	23 fd       	sbrc	r18, 3
    371c:	12 c0       	rjmp	.+36     	; 0x3742 <vfprintf+0x2f4>
    371e:	20 ff       	sbrs	r18, 0
    3720:	06 c0       	rjmp	.+12     	; 0x372e <vfprintf+0x2e0>
    3722:	5a 2c       	mov	r5, r10
    3724:	73 14       	cp	r7, r3
    3726:	18 f4       	brcc	.+6      	; 0x372e <vfprintf+0x2e0>
    3728:	53 0c       	add	r5, r3
    372a:	57 18       	sub	r5, r7
    372c:	73 2c       	mov	r7, r3
    372e:	73 14       	cp	r7, r3
    3730:	60 f4       	brcc	.+24     	; 0x374a <vfprintf+0x2fc>
    3732:	b7 01       	movw	r22, r14
    3734:	80 e2       	ldi	r24, 0x20	; 32
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	2c 87       	std	Y+12, r18	; 0x0c
    373a:	aa d1       	rcall	.+852    	; 0x3a90 <fputc>
    373c:	73 94       	inc	r7
    373e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3740:	f6 cf       	rjmp	.-20     	; 0x372e <vfprintf+0x2e0>
    3742:	73 14       	cp	r7, r3
    3744:	10 f4       	brcc	.+4      	; 0x374a <vfprintf+0x2fc>
    3746:	37 18       	sub	r3, r7
    3748:	01 c0       	rjmp	.+2      	; 0x374c <vfprintf+0x2fe>
    374a:	31 2c       	mov	r3, r1
    374c:	24 ff       	sbrs	r18, 4
    374e:	11 c0       	rjmp	.+34     	; 0x3772 <vfprintf+0x324>
    3750:	b7 01       	movw	r22, r14
    3752:	80 e3       	ldi	r24, 0x30	; 48
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	2c 87       	std	Y+12, r18	; 0x0c
    3758:	9b d1       	rcall	.+822    	; 0x3a90 <fputc>
    375a:	2c 85       	ldd	r18, Y+12	; 0x0c
    375c:	22 ff       	sbrs	r18, 2
    375e:	16 c0       	rjmp	.+44     	; 0x378c <vfprintf+0x33e>
    3760:	21 ff       	sbrs	r18, 1
    3762:	03 c0       	rjmp	.+6      	; 0x376a <vfprintf+0x31c>
    3764:	88 e5       	ldi	r24, 0x58	; 88
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	02 c0       	rjmp	.+4      	; 0x376e <vfprintf+0x320>
    376a:	88 e7       	ldi	r24, 0x78	; 120
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	b7 01       	movw	r22, r14
    3770:	0c c0       	rjmp	.+24     	; 0x378a <vfprintf+0x33c>
    3772:	82 2f       	mov	r24, r18
    3774:	86 78       	andi	r24, 0x86	; 134
    3776:	51 f0       	breq	.+20     	; 0x378c <vfprintf+0x33e>
    3778:	21 fd       	sbrc	r18, 1
    377a:	02 c0       	rjmp	.+4      	; 0x3780 <vfprintf+0x332>
    377c:	80 e2       	ldi	r24, 0x20	; 32
    377e:	01 c0       	rjmp	.+2      	; 0x3782 <vfprintf+0x334>
    3780:	8b e2       	ldi	r24, 0x2B	; 43
    3782:	27 fd       	sbrc	r18, 7
    3784:	8d e2       	ldi	r24, 0x2D	; 45
    3786:	b7 01       	movw	r22, r14
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	82 d1       	rcall	.+772    	; 0x3a90 <fputc>
    378c:	a5 14       	cp	r10, r5
    378e:	30 f4       	brcc	.+12     	; 0x379c <vfprintf+0x34e>
    3790:	b7 01       	movw	r22, r14
    3792:	80 e3       	ldi	r24, 0x30	; 48
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	7c d1       	rcall	.+760    	; 0x3a90 <fputc>
    3798:	5a 94       	dec	r5
    379a:	f8 cf       	rjmp	.-16     	; 0x378c <vfprintf+0x33e>
    379c:	aa 94       	dec	r10
    379e:	f4 01       	movw	r30, r8
    37a0:	ea 0d       	add	r30, r10
    37a2:	f1 1d       	adc	r31, r1
    37a4:	80 81       	ld	r24, Z
    37a6:	b7 01       	movw	r22, r14
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	72 d1       	rcall	.+740    	; 0x3a90 <fputc>
    37ac:	a1 10       	cpse	r10, r1
    37ae:	f6 cf       	rjmp	.-20     	; 0x379c <vfprintf+0x34e>
    37b0:	33 20       	and	r3, r3
    37b2:	09 f4       	brne	.+2      	; 0x37b6 <vfprintf+0x368>
    37b4:	5d ce       	rjmp	.-838    	; 0x3470 <vfprintf+0x22>
    37b6:	b7 01       	movw	r22, r14
    37b8:	80 e2       	ldi	r24, 0x20	; 32
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	69 d1       	rcall	.+722    	; 0x3a90 <fputc>
    37be:	3a 94       	dec	r3
    37c0:	f7 cf       	rjmp	.-18     	; 0x37b0 <vfprintf+0x362>
    37c2:	f7 01       	movw	r30, r14
    37c4:	86 81       	ldd	r24, Z+6	; 0x06
    37c6:	97 81       	ldd	r25, Z+7	; 0x07
    37c8:	02 c0       	rjmp	.+4      	; 0x37ce <vfprintf+0x380>
    37ca:	8f ef       	ldi	r24, 0xFF	; 255
    37cc:	9f ef       	ldi	r25, 0xFF	; 255
    37ce:	2c 96       	adiw	r28, 0x0c	; 12
    37d0:	e2 e1       	ldi	r30, 0x12	; 18
    37d2:	07 c2       	rjmp	.+1038   	; 0x3be2 <__epilogue_restores__>

000037d4 <calloc>:
    37d4:	0f 93       	push	r16
    37d6:	1f 93       	push	r17
    37d8:	cf 93       	push	r28
    37da:	df 93       	push	r29
    37dc:	86 9f       	mul	r24, r22
    37de:	80 01       	movw	r16, r0
    37e0:	87 9f       	mul	r24, r23
    37e2:	10 0d       	add	r17, r0
    37e4:	96 9f       	mul	r25, r22
    37e6:	10 0d       	add	r17, r0
    37e8:	11 24       	eor	r1, r1
    37ea:	c8 01       	movw	r24, r16
    37ec:	0d d0       	rcall	.+26     	; 0x3808 <malloc>
    37ee:	ec 01       	movw	r28, r24
    37f0:	00 97       	sbiw	r24, 0x00	; 0
    37f2:	21 f0       	breq	.+8      	; 0x37fc <calloc+0x28>
    37f4:	a8 01       	movw	r20, r16
    37f6:	60 e0       	ldi	r22, 0x00	; 0
    37f8:	70 e0       	ldi	r23, 0x00	; 0
    37fa:	38 d1       	rcall	.+624    	; 0x3a6c <memset>
    37fc:	ce 01       	movw	r24, r28
    37fe:	df 91       	pop	r29
    3800:	cf 91       	pop	r28
    3802:	1f 91       	pop	r17
    3804:	0f 91       	pop	r16
    3806:	08 95       	ret

00003808 <malloc>:
    3808:	cf 93       	push	r28
    380a:	df 93       	push	r29
    380c:	82 30       	cpi	r24, 0x02	; 2
    380e:	91 05       	cpc	r25, r1
    3810:	10 f4       	brcc	.+4      	; 0x3816 <malloc+0xe>
    3812:	82 e0       	ldi	r24, 0x02	; 2
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	e0 91 85 23 	lds	r30, 0x2385
    381a:	f0 91 86 23 	lds	r31, 0x2386
    381e:	20 e0       	ldi	r18, 0x00	; 0
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	a0 e0       	ldi	r26, 0x00	; 0
    3824:	b0 e0       	ldi	r27, 0x00	; 0
    3826:	30 97       	sbiw	r30, 0x00	; 0
    3828:	39 f1       	breq	.+78     	; 0x3878 <malloc+0x70>
    382a:	40 81       	ld	r20, Z
    382c:	51 81       	ldd	r21, Z+1	; 0x01
    382e:	48 17       	cp	r20, r24
    3830:	59 07       	cpc	r21, r25
    3832:	b8 f0       	brcs	.+46     	; 0x3862 <malloc+0x5a>
    3834:	48 17       	cp	r20, r24
    3836:	59 07       	cpc	r21, r25
    3838:	71 f4       	brne	.+28     	; 0x3856 <malloc+0x4e>
    383a:	82 81       	ldd	r24, Z+2	; 0x02
    383c:	93 81       	ldd	r25, Z+3	; 0x03
    383e:	10 97       	sbiw	r26, 0x00	; 0
    3840:	29 f0       	breq	.+10     	; 0x384c <malloc+0x44>
    3842:	12 96       	adiw	r26, 0x02	; 2
    3844:	8d 93       	st	X+, r24
    3846:	9c 93       	st	X, r25
    3848:	13 97       	sbiw	r26, 0x03	; 3
    384a:	2c c0       	rjmp	.+88     	; 0x38a4 <malloc+0x9c>
    384c:	80 93 85 23 	sts	0x2385, r24
    3850:	90 93 86 23 	sts	0x2386, r25
    3854:	27 c0       	rjmp	.+78     	; 0x38a4 <malloc+0x9c>
    3856:	21 15       	cp	r18, r1
    3858:	31 05       	cpc	r19, r1
    385a:	31 f0       	breq	.+12     	; 0x3868 <malloc+0x60>
    385c:	42 17       	cp	r20, r18
    385e:	53 07       	cpc	r21, r19
    3860:	18 f0       	brcs	.+6      	; 0x3868 <malloc+0x60>
    3862:	a9 01       	movw	r20, r18
    3864:	db 01       	movw	r26, r22
    3866:	01 c0       	rjmp	.+2      	; 0x386a <malloc+0x62>
    3868:	ef 01       	movw	r28, r30
    386a:	9a 01       	movw	r18, r20
    386c:	bd 01       	movw	r22, r26
    386e:	df 01       	movw	r26, r30
    3870:	02 80       	ldd	r0, Z+2	; 0x02
    3872:	f3 81       	ldd	r31, Z+3	; 0x03
    3874:	e0 2d       	mov	r30, r0
    3876:	d7 cf       	rjmp	.-82     	; 0x3826 <malloc+0x1e>
    3878:	21 15       	cp	r18, r1
    387a:	31 05       	cpc	r19, r1
    387c:	f9 f0       	breq	.+62     	; 0x38bc <malloc+0xb4>
    387e:	28 1b       	sub	r18, r24
    3880:	39 0b       	sbc	r19, r25
    3882:	24 30       	cpi	r18, 0x04	; 4
    3884:	31 05       	cpc	r19, r1
    3886:	80 f4       	brcc	.+32     	; 0x38a8 <malloc+0xa0>
    3888:	8a 81       	ldd	r24, Y+2	; 0x02
    388a:	9b 81       	ldd	r25, Y+3	; 0x03
    388c:	61 15       	cp	r22, r1
    388e:	71 05       	cpc	r23, r1
    3890:	21 f0       	breq	.+8      	; 0x389a <malloc+0x92>
    3892:	fb 01       	movw	r30, r22
    3894:	82 83       	std	Z+2, r24	; 0x02
    3896:	93 83       	std	Z+3, r25	; 0x03
    3898:	04 c0       	rjmp	.+8      	; 0x38a2 <malloc+0x9a>
    389a:	80 93 85 23 	sts	0x2385, r24
    389e:	90 93 86 23 	sts	0x2386, r25
    38a2:	fe 01       	movw	r30, r28
    38a4:	32 96       	adiw	r30, 0x02	; 2
    38a6:	44 c0       	rjmp	.+136    	; 0x3930 <malloc+0x128>
    38a8:	fe 01       	movw	r30, r28
    38aa:	e2 0f       	add	r30, r18
    38ac:	f3 1f       	adc	r31, r19
    38ae:	81 93       	st	Z+, r24
    38b0:	91 93       	st	Z+, r25
    38b2:	22 50       	subi	r18, 0x02	; 2
    38b4:	31 09       	sbc	r19, r1
    38b6:	28 83       	st	Y, r18
    38b8:	39 83       	std	Y+1, r19	; 0x01
    38ba:	3a c0       	rjmp	.+116    	; 0x3930 <malloc+0x128>
    38bc:	20 91 83 23 	lds	r18, 0x2383
    38c0:	30 91 84 23 	lds	r19, 0x2384
    38c4:	23 2b       	or	r18, r19
    38c6:	41 f4       	brne	.+16     	; 0x38d8 <malloc+0xd0>
    38c8:	20 91 02 20 	lds	r18, 0x2002
    38cc:	30 91 03 20 	lds	r19, 0x2003
    38d0:	20 93 83 23 	sts	0x2383, r18
    38d4:	30 93 84 23 	sts	0x2384, r19
    38d8:	20 91 00 20 	lds	r18, 0x2000
    38dc:	30 91 01 20 	lds	r19, 0x2001
    38e0:	21 15       	cp	r18, r1
    38e2:	31 05       	cpc	r19, r1
    38e4:	41 f4       	brne	.+16     	; 0x38f6 <malloc+0xee>
    38e6:	2d b7       	in	r18, 0x3d	; 61
    38e8:	3e b7       	in	r19, 0x3e	; 62
    38ea:	40 91 04 20 	lds	r20, 0x2004
    38ee:	50 91 05 20 	lds	r21, 0x2005
    38f2:	24 1b       	sub	r18, r20
    38f4:	35 0b       	sbc	r19, r21
    38f6:	e0 91 83 23 	lds	r30, 0x2383
    38fa:	f0 91 84 23 	lds	r31, 0x2384
    38fe:	e2 17       	cp	r30, r18
    3900:	f3 07       	cpc	r31, r19
    3902:	a0 f4       	brcc	.+40     	; 0x392c <malloc+0x124>
    3904:	2e 1b       	sub	r18, r30
    3906:	3f 0b       	sbc	r19, r31
    3908:	28 17       	cp	r18, r24
    390a:	39 07       	cpc	r19, r25
    390c:	78 f0       	brcs	.+30     	; 0x392c <malloc+0x124>
    390e:	ac 01       	movw	r20, r24
    3910:	4e 5f       	subi	r20, 0xFE	; 254
    3912:	5f 4f       	sbci	r21, 0xFF	; 255
    3914:	24 17       	cp	r18, r20
    3916:	35 07       	cpc	r19, r21
    3918:	48 f0       	brcs	.+18     	; 0x392c <malloc+0x124>
    391a:	4e 0f       	add	r20, r30
    391c:	5f 1f       	adc	r21, r31
    391e:	40 93 83 23 	sts	0x2383, r20
    3922:	50 93 84 23 	sts	0x2384, r21
    3926:	81 93       	st	Z+, r24
    3928:	91 93       	st	Z+, r25
    392a:	02 c0       	rjmp	.+4      	; 0x3930 <malloc+0x128>
    392c:	e0 e0       	ldi	r30, 0x00	; 0
    392e:	f0 e0       	ldi	r31, 0x00	; 0
    3930:	cf 01       	movw	r24, r30
    3932:	df 91       	pop	r29
    3934:	cf 91       	pop	r28
    3936:	08 95       	ret

00003938 <free>:
    3938:	cf 93       	push	r28
    393a:	df 93       	push	r29
    393c:	00 97       	sbiw	r24, 0x00	; 0
    393e:	09 f4       	brne	.+2      	; 0x3942 <free+0xa>
    3940:	87 c0       	rjmp	.+270    	; 0x3a50 <free+0x118>
    3942:	fc 01       	movw	r30, r24
    3944:	32 97       	sbiw	r30, 0x02	; 2
    3946:	12 82       	std	Z+2, r1	; 0x02
    3948:	13 82       	std	Z+3, r1	; 0x03
    394a:	c0 91 85 23 	lds	r28, 0x2385
    394e:	d0 91 86 23 	lds	r29, 0x2386
    3952:	20 97       	sbiw	r28, 0x00	; 0
    3954:	81 f4       	brne	.+32     	; 0x3976 <free+0x3e>
    3956:	20 81       	ld	r18, Z
    3958:	31 81       	ldd	r19, Z+1	; 0x01
    395a:	28 0f       	add	r18, r24
    395c:	39 1f       	adc	r19, r25
    395e:	80 91 83 23 	lds	r24, 0x2383
    3962:	90 91 84 23 	lds	r25, 0x2384
    3966:	82 17       	cp	r24, r18
    3968:	93 07       	cpc	r25, r19
    396a:	79 f5       	brne	.+94     	; 0x39ca <free+0x92>
    396c:	e0 93 83 23 	sts	0x2383, r30
    3970:	f0 93 84 23 	sts	0x2384, r31
    3974:	6d c0       	rjmp	.+218    	; 0x3a50 <free+0x118>
    3976:	de 01       	movw	r26, r28
    3978:	20 e0       	ldi	r18, 0x00	; 0
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	ae 17       	cp	r26, r30
    397e:	bf 07       	cpc	r27, r31
    3980:	50 f4       	brcc	.+20     	; 0x3996 <free+0x5e>
    3982:	12 96       	adiw	r26, 0x02	; 2
    3984:	4d 91       	ld	r20, X+
    3986:	5c 91       	ld	r21, X
    3988:	13 97       	sbiw	r26, 0x03	; 3
    398a:	9d 01       	movw	r18, r26
    398c:	41 15       	cp	r20, r1
    398e:	51 05       	cpc	r21, r1
    3990:	09 f1       	breq	.+66     	; 0x39d4 <free+0x9c>
    3992:	da 01       	movw	r26, r20
    3994:	f3 cf       	rjmp	.-26     	; 0x397c <free+0x44>
    3996:	a2 83       	std	Z+2, r26	; 0x02
    3998:	b3 83       	std	Z+3, r27	; 0x03
    399a:	40 81       	ld	r20, Z
    399c:	51 81       	ldd	r21, Z+1	; 0x01
    399e:	84 0f       	add	r24, r20
    39a0:	95 1f       	adc	r25, r21
    39a2:	8a 17       	cp	r24, r26
    39a4:	9b 07       	cpc	r25, r27
    39a6:	71 f4       	brne	.+28     	; 0x39c4 <free+0x8c>
    39a8:	8d 91       	ld	r24, X+
    39aa:	9c 91       	ld	r25, X
    39ac:	11 97       	sbiw	r26, 0x01	; 1
    39ae:	84 0f       	add	r24, r20
    39b0:	95 1f       	adc	r25, r21
    39b2:	02 96       	adiw	r24, 0x02	; 2
    39b4:	80 83       	st	Z, r24
    39b6:	91 83       	std	Z+1, r25	; 0x01
    39b8:	12 96       	adiw	r26, 0x02	; 2
    39ba:	8d 91       	ld	r24, X+
    39bc:	9c 91       	ld	r25, X
    39be:	13 97       	sbiw	r26, 0x03	; 3
    39c0:	82 83       	std	Z+2, r24	; 0x02
    39c2:	93 83       	std	Z+3, r25	; 0x03
    39c4:	21 15       	cp	r18, r1
    39c6:	31 05       	cpc	r19, r1
    39c8:	29 f4       	brne	.+10     	; 0x39d4 <free+0x9c>
    39ca:	e0 93 85 23 	sts	0x2385, r30
    39ce:	f0 93 86 23 	sts	0x2386, r31
    39d2:	3e c0       	rjmp	.+124    	; 0x3a50 <free+0x118>
    39d4:	d9 01       	movw	r26, r18
    39d6:	12 96       	adiw	r26, 0x02	; 2
    39d8:	ed 93       	st	X+, r30
    39da:	fc 93       	st	X, r31
    39dc:	13 97       	sbiw	r26, 0x03	; 3
    39de:	4d 91       	ld	r20, X+
    39e0:	5d 91       	ld	r21, X+
    39e2:	a4 0f       	add	r26, r20
    39e4:	b5 1f       	adc	r27, r21
    39e6:	ea 17       	cp	r30, r26
    39e8:	fb 07       	cpc	r31, r27
    39ea:	79 f4       	brne	.+30     	; 0x3a0a <free+0xd2>
    39ec:	80 81       	ld	r24, Z
    39ee:	91 81       	ldd	r25, Z+1	; 0x01
    39f0:	84 0f       	add	r24, r20
    39f2:	95 1f       	adc	r25, r21
    39f4:	02 96       	adiw	r24, 0x02	; 2
    39f6:	d9 01       	movw	r26, r18
    39f8:	8d 93       	st	X+, r24
    39fa:	9c 93       	st	X, r25
    39fc:	11 97       	sbiw	r26, 0x01	; 1
    39fe:	82 81       	ldd	r24, Z+2	; 0x02
    3a00:	93 81       	ldd	r25, Z+3	; 0x03
    3a02:	12 96       	adiw	r26, 0x02	; 2
    3a04:	8d 93       	st	X+, r24
    3a06:	9c 93       	st	X, r25
    3a08:	13 97       	sbiw	r26, 0x03	; 3
    3a0a:	e0 e0       	ldi	r30, 0x00	; 0
    3a0c:	f0 e0       	ldi	r31, 0x00	; 0
    3a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a10:	9b 81       	ldd	r25, Y+3	; 0x03
    3a12:	00 97       	sbiw	r24, 0x00	; 0
    3a14:	19 f0       	breq	.+6      	; 0x3a1c <free+0xe4>
    3a16:	fe 01       	movw	r30, r28
    3a18:	ec 01       	movw	r28, r24
    3a1a:	f9 cf       	rjmp	.-14     	; 0x3a0e <free+0xd6>
    3a1c:	ce 01       	movw	r24, r28
    3a1e:	02 96       	adiw	r24, 0x02	; 2
    3a20:	28 81       	ld	r18, Y
    3a22:	39 81       	ldd	r19, Y+1	; 0x01
    3a24:	82 0f       	add	r24, r18
    3a26:	93 1f       	adc	r25, r19
    3a28:	20 91 83 23 	lds	r18, 0x2383
    3a2c:	30 91 84 23 	lds	r19, 0x2384
    3a30:	28 17       	cp	r18, r24
    3a32:	39 07       	cpc	r19, r25
    3a34:	69 f4       	brne	.+26     	; 0x3a50 <free+0x118>
    3a36:	30 97       	sbiw	r30, 0x00	; 0
    3a38:	29 f4       	brne	.+10     	; 0x3a44 <free+0x10c>
    3a3a:	10 92 85 23 	sts	0x2385, r1
    3a3e:	10 92 86 23 	sts	0x2386, r1
    3a42:	02 c0       	rjmp	.+4      	; 0x3a48 <free+0x110>
    3a44:	12 82       	std	Z+2, r1	; 0x02
    3a46:	13 82       	std	Z+3, r1	; 0x03
    3a48:	c0 93 83 23 	sts	0x2383, r28
    3a4c:	d0 93 84 23 	sts	0x2384, r29
    3a50:	df 91       	pop	r29
    3a52:	cf 91       	pop	r28
    3a54:	08 95       	ret

00003a56 <strnlen_P>:
    3a56:	fc 01       	movw	r30, r24
    3a58:	05 90       	lpm	r0, Z+
    3a5a:	61 50       	subi	r22, 0x01	; 1
    3a5c:	70 40       	sbci	r23, 0x00	; 0
    3a5e:	01 10       	cpse	r0, r1
    3a60:	d8 f7       	brcc	.-10     	; 0x3a58 <strnlen_P+0x2>
    3a62:	80 95       	com	r24
    3a64:	90 95       	com	r25
    3a66:	8e 0f       	add	r24, r30
    3a68:	9f 1f       	adc	r25, r31
    3a6a:	08 95       	ret

00003a6c <memset>:
    3a6c:	dc 01       	movw	r26, r24
    3a6e:	01 c0       	rjmp	.+2      	; 0x3a72 <memset+0x6>
    3a70:	6d 93       	st	X+, r22
    3a72:	41 50       	subi	r20, 0x01	; 1
    3a74:	50 40       	sbci	r21, 0x00	; 0
    3a76:	e0 f7       	brcc	.-8      	; 0x3a70 <memset+0x4>
    3a78:	08 95       	ret

00003a7a <strnlen>:
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	61 50       	subi	r22, 0x01	; 1
    3a7e:	70 40       	sbci	r23, 0x00	; 0
    3a80:	01 90       	ld	r0, Z+
    3a82:	01 10       	cpse	r0, r1
    3a84:	d8 f7       	brcc	.-10     	; 0x3a7c <strnlen+0x2>
    3a86:	80 95       	com	r24
    3a88:	90 95       	com	r25
    3a8a:	8e 0f       	add	r24, r30
    3a8c:	9f 1f       	adc	r25, r31
    3a8e:	08 95       	ret

00003a90 <fputc>:
    3a90:	0f 93       	push	r16
    3a92:	1f 93       	push	r17
    3a94:	cf 93       	push	r28
    3a96:	df 93       	push	r29
    3a98:	18 2f       	mov	r17, r24
    3a9a:	09 2f       	mov	r16, r25
    3a9c:	eb 01       	movw	r28, r22
    3a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa0:	81 fd       	sbrc	r24, 1
    3aa2:	03 c0       	rjmp	.+6      	; 0x3aaa <fputc+0x1a>
    3aa4:	8f ef       	ldi	r24, 0xFF	; 255
    3aa6:	9f ef       	ldi	r25, 0xFF	; 255
    3aa8:	20 c0       	rjmp	.+64     	; 0x3aea <fputc+0x5a>
    3aaa:	82 ff       	sbrs	r24, 2
    3aac:	10 c0       	rjmp	.+32     	; 0x3ace <fputc+0x3e>
    3aae:	4e 81       	ldd	r20, Y+6	; 0x06
    3ab0:	5f 81       	ldd	r21, Y+7	; 0x07
    3ab2:	2c 81       	ldd	r18, Y+4	; 0x04
    3ab4:	3d 81       	ldd	r19, Y+5	; 0x05
    3ab6:	42 17       	cp	r20, r18
    3ab8:	53 07       	cpc	r21, r19
    3aba:	7c f4       	brge	.+30     	; 0x3ada <fputc+0x4a>
    3abc:	e8 81       	ld	r30, Y
    3abe:	f9 81       	ldd	r31, Y+1	; 0x01
    3ac0:	9f 01       	movw	r18, r30
    3ac2:	2f 5f       	subi	r18, 0xFF	; 255
    3ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ac6:	28 83       	st	Y, r18
    3ac8:	39 83       	std	Y+1, r19	; 0x01
    3aca:	10 83       	st	Z, r17
    3acc:	06 c0       	rjmp	.+12     	; 0x3ada <fputc+0x4a>
    3ace:	e8 85       	ldd	r30, Y+8	; 0x08
    3ad0:	f9 85       	ldd	r31, Y+9	; 0x09
    3ad2:	81 2f       	mov	r24, r17
    3ad4:	09 95       	icall
    3ad6:	89 2b       	or	r24, r25
    3ad8:	29 f7       	brne	.-54     	; 0x3aa4 <fputc+0x14>
    3ada:	2e 81       	ldd	r18, Y+6	; 0x06
    3adc:	3f 81       	ldd	r19, Y+7	; 0x07
    3ade:	2f 5f       	subi	r18, 0xFF	; 255
    3ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae2:	2e 83       	std	Y+6, r18	; 0x06
    3ae4:	3f 83       	std	Y+7, r19	; 0x07
    3ae6:	81 2f       	mov	r24, r17
    3ae8:	90 2f       	mov	r25, r16
    3aea:	df 91       	pop	r29
    3aec:	cf 91       	pop	r28
    3aee:	1f 91       	pop	r17
    3af0:	0f 91       	pop	r16
    3af2:	08 95       	ret

00003af4 <__ultoa_invert>:
    3af4:	fa 01       	movw	r30, r20
    3af6:	aa 27       	eor	r26, r26
    3af8:	28 30       	cpi	r18, 0x08	; 8
    3afa:	51 f1       	breq	.+84     	; 0x3b50 <__ultoa_invert+0x5c>
    3afc:	20 31       	cpi	r18, 0x10	; 16
    3afe:	81 f1       	breq	.+96     	; 0x3b60 <__ultoa_invert+0x6c>
    3b00:	e8 94       	clt
    3b02:	6f 93       	push	r22
    3b04:	6e 7f       	andi	r22, 0xFE	; 254
    3b06:	6e 5f       	subi	r22, 0xFE	; 254
    3b08:	7f 4f       	sbci	r23, 0xFF	; 255
    3b0a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b0e:	af 4f       	sbci	r26, 0xFF	; 255
    3b10:	b1 e0       	ldi	r27, 0x01	; 1
    3b12:	3e d0       	rcall	.+124    	; 0x3b90 <__ultoa_invert+0x9c>
    3b14:	b4 e0       	ldi	r27, 0x04	; 4
    3b16:	3c d0       	rcall	.+120    	; 0x3b90 <__ultoa_invert+0x9c>
    3b18:	67 0f       	add	r22, r23
    3b1a:	78 1f       	adc	r23, r24
    3b1c:	89 1f       	adc	r24, r25
    3b1e:	9a 1f       	adc	r25, r26
    3b20:	a1 1d       	adc	r26, r1
    3b22:	68 0f       	add	r22, r24
    3b24:	79 1f       	adc	r23, r25
    3b26:	8a 1f       	adc	r24, r26
    3b28:	91 1d       	adc	r25, r1
    3b2a:	a1 1d       	adc	r26, r1
    3b2c:	6a 0f       	add	r22, r26
    3b2e:	71 1d       	adc	r23, r1
    3b30:	81 1d       	adc	r24, r1
    3b32:	91 1d       	adc	r25, r1
    3b34:	a1 1d       	adc	r26, r1
    3b36:	20 d0       	rcall	.+64     	; 0x3b78 <__ultoa_invert+0x84>
    3b38:	09 f4       	brne	.+2      	; 0x3b3c <__ultoa_invert+0x48>
    3b3a:	68 94       	set
    3b3c:	3f 91       	pop	r19
    3b3e:	2a e0       	ldi	r18, 0x0A	; 10
    3b40:	26 9f       	mul	r18, r22
    3b42:	11 24       	eor	r1, r1
    3b44:	30 19       	sub	r19, r0
    3b46:	30 5d       	subi	r19, 0xD0	; 208
    3b48:	31 93       	st	Z+, r19
    3b4a:	de f6       	brtc	.-74     	; 0x3b02 <__ultoa_invert+0xe>
    3b4c:	cf 01       	movw	r24, r30
    3b4e:	08 95       	ret
    3b50:	46 2f       	mov	r20, r22
    3b52:	47 70       	andi	r20, 0x07	; 7
    3b54:	40 5d       	subi	r20, 0xD0	; 208
    3b56:	41 93       	st	Z+, r20
    3b58:	b3 e0       	ldi	r27, 0x03	; 3
    3b5a:	0f d0       	rcall	.+30     	; 0x3b7a <__ultoa_invert+0x86>
    3b5c:	c9 f7       	brne	.-14     	; 0x3b50 <__ultoa_invert+0x5c>
    3b5e:	f6 cf       	rjmp	.-20     	; 0x3b4c <__ultoa_invert+0x58>
    3b60:	46 2f       	mov	r20, r22
    3b62:	4f 70       	andi	r20, 0x0F	; 15
    3b64:	40 5d       	subi	r20, 0xD0	; 208
    3b66:	4a 33       	cpi	r20, 0x3A	; 58
    3b68:	18 f0       	brcs	.+6      	; 0x3b70 <__ultoa_invert+0x7c>
    3b6a:	49 5d       	subi	r20, 0xD9	; 217
    3b6c:	31 fd       	sbrc	r19, 1
    3b6e:	40 52       	subi	r20, 0x20	; 32
    3b70:	41 93       	st	Z+, r20
    3b72:	02 d0       	rcall	.+4      	; 0x3b78 <__ultoa_invert+0x84>
    3b74:	a9 f7       	brne	.-22     	; 0x3b60 <__ultoa_invert+0x6c>
    3b76:	ea cf       	rjmp	.-44     	; 0x3b4c <__ultoa_invert+0x58>
    3b78:	b4 e0       	ldi	r27, 0x04	; 4
    3b7a:	a6 95       	lsr	r26
    3b7c:	97 95       	ror	r25
    3b7e:	87 95       	ror	r24
    3b80:	77 95       	ror	r23
    3b82:	67 95       	ror	r22
    3b84:	ba 95       	dec	r27
    3b86:	c9 f7       	brne	.-14     	; 0x3b7a <__ultoa_invert+0x86>
    3b88:	00 97       	sbiw	r24, 0x00	; 0
    3b8a:	61 05       	cpc	r22, r1
    3b8c:	71 05       	cpc	r23, r1
    3b8e:	08 95       	ret
    3b90:	9b 01       	movw	r18, r22
    3b92:	ac 01       	movw	r20, r24
    3b94:	0a 2e       	mov	r0, r26
    3b96:	06 94       	lsr	r0
    3b98:	57 95       	ror	r21
    3b9a:	47 95       	ror	r20
    3b9c:	37 95       	ror	r19
    3b9e:	27 95       	ror	r18
    3ba0:	ba 95       	dec	r27
    3ba2:	c9 f7       	brne	.-14     	; 0x3b96 <__ultoa_invert+0xa2>
    3ba4:	62 0f       	add	r22, r18
    3ba6:	73 1f       	adc	r23, r19
    3ba8:	84 1f       	adc	r24, r20
    3baa:	95 1f       	adc	r25, r21
    3bac:	a0 1d       	adc	r26, r0
    3bae:	08 95       	ret

00003bb0 <__prologue_saves__>:
    3bb0:	2f 92       	push	r2
    3bb2:	3f 92       	push	r3
    3bb4:	4f 92       	push	r4
    3bb6:	5f 92       	push	r5
    3bb8:	6f 92       	push	r6
    3bba:	7f 92       	push	r7
    3bbc:	8f 92       	push	r8
    3bbe:	9f 92       	push	r9
    3bc0:	af 92       	push	r10
    3bc2:	bf 92       	push	r11
    3bc4:	cf 92       	push	r12
    3bc6:	df 92       	push	r13
    3bc8:	ef 92       	push	r14
    3bca:	ff 92       	push	r15
    3bcc:	0f 93       	push	r16
    3bce:	1f 93       	push	r17
    3bd0:	cf 93       	push	r28
    3bd2:	df 93       	push	r29
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62
    3bd8:	ca 1b       	sub	r28, r26
    3bda:	db 0b       	sbc	r29, r27
    3bdc:	cd bf       	out	0x3d, r28	; 61
    3bde:	de bf       	out	0x3e, r29	; 62
    3be0:	09 94       	ijmp

00003be2 <__epilogue_restores__>:
    3be2:	2a 88       	ldd	r2, Y+18	; 0x12
    3be4:	39 88       	ldd	r3, Y+17	; 0x11
    3be6:	48 88       	ldd	r4, Y+16	; 0x10
    3be8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3bea:	6e 84       	ldd	r6, Y+14	; 0x0e
    3bec:	7d 84       	ldd	r7, Y+13	; 0x0d
    3bee:	8c 84       	ldd	r8, Y+12	; 0x0c
    3bf0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bf2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bf4:	b9 84       	ldd	r11, Y+9	; 0x09
    3bf6:	c8 84       	ldd	r12, Y+8	; 0x08
    3bf8:	df 80       	ldd	r13, Y+7	; 0x07
    3bfa:	ee 80       	ldd	r14, Y+6	; 0x06
    3bfc:	fd 80       	ldd	r15, Y+5	; 0x05
    3bfe:	0c 81       	ldd	r16, Y+4	; 0x04
    3c00:	1b 81       	ldd	r17, Y+3	; 0x03
    3c02:	aa 81       	ldd	r26, Y+2	; 0x02
    3c04:	b9 81       	ldd	r27, Y+1	; 0x01
    3c06:	ce 0f       	add	r28, r30
    3c08:	d1 1d       	adc	r29, r1
    3c0a:	cd bf       	out	0x3d, r28	; 61
    3c0c:	de bf       	out	0x3e, r29	; 62
    3c0e:	ed 01       	movw	r28, r26
    3c10:	08 95       	ret

00003c12 <_exit>:
    3c12:	f8 94       	cli

00003c14 <__stop_program>:
    3c14:	ff cf       	rjmp	.-2      	; 0x3c14 <__stop_program>
