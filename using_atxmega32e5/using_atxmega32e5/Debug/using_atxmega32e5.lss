
using_atxmega32e5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00802000  000001ca  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000867  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000023c  00000000  00000000  00000b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000274  00000000  00000000  00000d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000bc  00000000  00000000  00000fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000630  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000119  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  000017e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_40>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	10 e2       	ldi	r17, 0x20	; 32
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	ea ec       	ldi	r30, 0xCA	; 202
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 30       	cpi	r26, 0x02	; 2
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 80 00 	call	0x100	; 0x100 <main>
  d2:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <initButton>:
//#include <board.h>
//#include <gpio.h>


void initButton(void){
	PORTD.DIRCLR = PIN0_bm;
  da:	e0 e6       	ldi	r30, 0x60	; 96
  dc:	f6 e0       	ldi	r31, 0x06	; 6
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	82 83       	std	Z+2, r24	; 0x02
	PORTD.DIRCLR = PIN2_bm;
  e2:	84 e0       	ldi	r24, 0x04	; 4
  e4:	82 83       	std	Z+2, r24	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;
  e6:	88 e1       	ldi	r24, 0x18	; 24
  e8:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;
  ea:	82 8b       	std	Z+18, r24	; 0x12
  ec:	08 95       	ret

000000ee <initLeds>:
	
return PORTD.IN;
}

void initLeds(void){
	PORTD.DIRSET = PIN5_bm; 
  ee:	e0 e6       	ldi	r30, 0x60	; 96
  f0:	f6 e0       	ldi	r31, 0x06	; 6
  f2:	90 e2       	ldi	r25, 0x20	; 32
  f4:	91 83       	std	Z+1, r25	; 0x01
	PORTD.DIRSET = PIN4_bm;
  f6:	80 e1       	ldi	r24, 0x10	; 16
  f8:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTCLR = PIN5_bm;
  fa:	96 83       	std	Z+6, r25	; 0x06
	PORTD.OUTCLR = PIN4_bm;
  fc:	86 83       	std	Z+6, r24	; 0x06
  fe:	08 95       	ret

00000100 <main>:
}

static inline void init_oscillator() {
	// enable 32Mhz internal oscillator
	OSC.CTRL |= OSC_RC32MEN_bm;
 100:	e0 e5       	ldi	r30, 0x50	; 80
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	82 60       	ori	r24, 0x02	; 2
 108:	80 83       	st	Z, r24
	// wait for it to be stable
	while (!(OSC.STATUS & OSC_RC32MRDY_bm));
 10a:	81 81       	ldd	r24, Z+1	; 0x01
 10c:	81 ff       	sbrs	r24, 1
 10e:	fd cf       	rjmp	.-6      	; 0x10a <main+0xa>
	// tell the processor we want to change a protected register
	CCP=CCP_IOREG_gc;
 110:	88 ed       	ldi	r24, 0xD8	; 216
 112:	84 bf       	out	0x34, r24	; 52
	// and start using the 32Mhz oscillator
	CLK.CTRL=CLK_SCLKSEL_RC32M_gc;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 40 00 	sts	0x0040, r24
	// disable the default 2Mhz oscillator
	OSC.CTRL&=(~OSC_RC2MEN_bm);
 11a:	e0 e5       	ldi	r30, 0x50	; 80
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	8e 7f       	andi	r24, 0xFE	; 254
 122:	80 83       	st	Z, r24
	// enable 32kHz calibrated internal oscillator
	OSC.CTRL|= OSC_RC32KEN_bm;
 124:	80 81       	ld	r24, Z
 126:	84 60       	ori	r24, 0x04	; 4
 128:	80 83       	st	Z, r24
	while (!(OSC.STATUS & OSC_RC32KRDY_bm));
 12a:	81 81       	ldd	r24, Z+1	; 0x01
 12c:	82 ff       	sbrs	r24, 2
 12e:	fd cf       	rjmp	.-6      	; 0x12a <main+0x2a>
	// set bit to 0 to indicate we use the internal 32kHz
	// callibrated oscillator as auto-calibration source
	// for our 32Mhz oscillator
	OSC.DFLLCTRL = OSC_RC32MCREF_RC32K_gc;
 130:	e0 e5       	ldi	r30, 0x50	; 80
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	16 82       	std	Z+6, r1	; 0x06
	// enable auto-calibration for the 32Mhz oscillator
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
 136:	e0 e6       	ldi	r30, 0x60	; 96
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	80 83       	st	Z, r24
}

int main( void )
{
	init_oscillator();
	initButton();
 140:	0e 94 6d 00 	call	0xda	; 0xda <initButton>
	initLeds();
 144:	0e 94 77 00 	call	0xee	; 0xee <initLeds>
	USARTD0.CTRLA = (USARTD0.CTRLA & ~USART_RXCINTLVL_gm) | USART_RXCINTLVL_LO_gc;
}

static inline void init_interrupts() {
	// Enable PMIC interrupt level low
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
 148:	e0 ea       	ldi	r30, 0xA0	; 160
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	82 81       	ldd	r24, Z+2	; 0x02
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	82 83       	std	Z+2, r24	; 0x02
	// enable interrupts
	sei();
 152:	78 94       	sei

  init_interrupts();

	while (1) {
		_delay_ms(500);                  // waiting 500ms
        PORTD.OUTSET    =   PIN0_bm;     // setting bit in the new way
 154:	e0 e6       	ldi	r30, 0x60	; 96
 156:	f6 e0       	ldi	r31, 0x06	; 6
 158:	91 e0       	ldi	r25, 0x01	; 1
        PORTD.OUTSET    =   PIN2_bm;     
 15a:	84 e0       	ldi	r24, 0x04	; 4
#include "test.h"

static volatile uint8_t echo_char = 42;

void toggle(PORT_t *io, uint8_t pin_bm){
	io->OUTTGL = pin_bm;
 15c:	40 e1       	ldi	r20, 0x10	; 16
 15e:	30 e2       	ldi	r19, 0x20	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	53 ed       	ldi	r21, 0xD3	; 211
 164:	60 e3       	ldi	r22, 0x30	; 48
 166:	21 50       	subi	r18, 0x01	; 1
 168:	50 40       	sbci	r21, 0x00	; 0
 16a:	60 40       	sbci	r22, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x66>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x70>
 170:	00 00       	nop

  init_interrupts();

	while (1) {
		_delay_ms(500);                  // waiting 500ms
        PORTD.OUTSET    =   PIN0_bm;     // setting bit in the new way
 172:	95 83       	std	Z+5, r25	; 0x05
        PORTD.OUTSET    =   PIN2_bm;     
 174:	85 83       	std	Z+5, r24	; 0x05
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	53 ed       	ldi	r21, 0xD3	; 211
 17a:	60 e3       	ldi	r22, 0x30	; 48
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	50 40       	sbci	r21, 0x00	; 0
 180:	60 40       	sbci	r22, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x7c>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x86>
 186:	00 00       	nop
        _delay_ms(500);                  // waiting 500ms
        PORTD.OUTCLR    =   PIN0_bm;
 188:	96 83       	std	Z+6, r25	; 0x06
		PORTD.OUTCLR    =   PIN2_bm;  
 18a:	86 83       	std	Z+6, r24	; 0x06
		
		
	if((PORTD.IN & PIN0_bm)){
 18c:	20 85       	ldd	r18, Z+8	; 0x08
 18e:	20 ff       	sbrs	r18, 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <main+0x96>
#include "test.h"

static volatile uint8_t echo_char = 42;

void toggle(PORT_t *io, uint8_t pin_bm){
	io->OUTTGL = pin_bm;
 192:	47 83       	std	Z+7, r20	; 0x07
 194:	01 c0       	rjmp	.+2      	; 0x198 <main+0x98>
 196:	47 83       	std	Z+7, r20	; 0x07
		toggle(&PORTD, PIN4_bm);
	}
	else {
		toggle(&PORTD, PIN4_bm);
	}
	if((PORTD.IN & PIN2_bm)){
 198:	20 85       	ldd	r18, Z+8	; 0x08
 19a:	22 ff       	sbrs	r18, 2
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <main+0xa2>
#include "test.h"

static volatile uint8_t echo_char = 42;

void toggle(PORT_t *io, uint8_t pin_bm){
	io->OUTTGL = pin_bm;
 19e:	37 83       	std	Z+7, r19	; 0x07
 1a0:	df cf       	rjmp	.-66     	; 0x160 <main+0x60>
 1a2:	37 83       	std	Z+7, r19	; 0x07
 1a4:	dd cf       	rjmp	.-70     	; 0x160 <main+0x60>

000001a6 <__vector_40>:
	//_delay_ms(500);
	}
}

// USART RX receive interrupt handler
ISR(USARTD0_RXC_vect) {
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	8f 93       	push	r24
	echo_char = USARTD0.DATA;
 1b2:	80 91 c0 09 	lds	r24, 0x09C0
 1b6:	80 93 00 20 	sts	0x2000, r24
}	
 1ba:	8f 91       	pop	r24
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
